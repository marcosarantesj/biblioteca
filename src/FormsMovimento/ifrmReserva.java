/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadAutores.java
 *
 * Created on 16/09/2010, 22:49:54
 */
package FormsMovimento;

import Classes2.Itens;
import Classes2.Leitores;
import FormsConsulta.MkTableModel;
import FormsConsulta.jdfrmConsultaAcervodeObrasReserva;
import FormsConsulta.jdfrmConsultaLeitores;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Query;

/**
 *
 * @author MARK
 */
public class ifrmReserva extends javax.swing.JInternalFrame {

    private boolean novoCadastro;
    private DB banco2;
    private ArrayList vetor;
    private int dias = 0;
    //=========================================================================
    //Máximo de detalhesmovimento
    int max2 = -1;
    //Modelo para adicionar as Obras
    private MkTableModel modelObra;
    private String[] colunasObra = new String[]{"Código", "Título da Obra", "Validade da Reserva"};
    private ArrayList dadosObra = new ArrayList();
    //=========================================================================
    //Modelo implementado da jTable para filtrar
    private TableRowSorter<MkTableModel> sorter;
    private MkTableModel modelLeitores;
    //Modelo da consulta
    private MkTableModel modelObrasdoLeitor;

    /** Creates new form ifrmCadAutores */
    public ifrmReserva() {

        initComponents();
        tblLeitores.setAutoCreateRowSorter(true);
        txtCodLeitor.setDocument(new FixedLengthDocument(10));
        txtCodItem.setDocument(new FixedLengthDocument(10));
        txtDataEntrega.setDocument(new FixedLengthDocument(10));
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        txtCodigo = new javax.swing.JTextField();
        txtDataCadastro = new javax.swing.JTextField();
        txtHoraCadastro = new javax.swing.JTextField();
        cbNomedoLeitor = new javax.swing.JComboBox();
        btnConsultaLeitor = new javax.swing.JButton();
        cbTitulo = new javax.swing.JComboBox();
        btnConsultaItem = new javax.swing.JButton();
        txtLocal = new javax.swing.JTextField();
        txtDataEntrega = new javax.swing.JTextField();
        btnAddObra = new javax.swing.JButton();
        btnExcluirObra = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCodLeitor = new javax.swing.JTextField();
        txtCodItem = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtHoraCadastro1 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEmprestimos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        lblMensagem = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnConsultarData = new javax.swing.JButton();
        txtConsultaDataIn = new javax.swing.JTextField();
        txtConsultaDataFin = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblLeitores = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblObrasdoLeitor = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reservas");
        setMinimumSize(new java.awt.Dimension(750, 600));
        setNormalBounds(new java.awt.Rectangle(0, 0, 690, 542));
        setPreferredSize(new java.awt.Dimension(740, 600));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAdicionar.setToolTipText("Adicionar");
        btnAdicionar.setFocusable(false);
        btnAdicionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionar.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdicionar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Editar.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Cancelar.png"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCancelar);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setToolTipText("Salvar");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvar);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluir.setToolTipText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExcluir);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(675, 477));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        txtDataCadastro.setEnabled(false);

        txtHoraCadastro.setEnabled(false);

        cbNomedoLeitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNomedoLeitorActionPerformed(evt);
            }
        });
        cbNomedoLeitor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbNomedoLeitorFocusLost(evt);
            }
        });

        btnConsultaLeitor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaLeitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaLeitorActionPerformed(evt);
            }
        });

        cbTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTituloActionPerformed(evt);
            }
        });
        cbTitulo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbTituloFocusLost(evt);
            }
        });

        btnConsultaItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaItemActionPerformed(evt);
            }
        });
        btnConsultaItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnConsultaItemFocusLost(evt);
            }
        });

        txtLocal.setEnabled(false);

        txtDataEntrega.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataEntregaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDataEntregaKeyTyped(evt);
            }
        });

        btnAddObra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAddObra.setText("Adicionar Obra");
        btnAddObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddObraActionPerformed(evt);
            }
        });

        btnExcluirObra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluirObra.setText("Excluir Obra");
        btnExcluirObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirObraActionPerformed(evt);
            }
        });

        jLabel1.setText("Reserva Nº");

        jLabel6.setText("Nome do Leitor");

        jLabel5.setText("Cód. do Leitor");

        jLabel3.setText("Validade da Reserva");

        jLabel7.setText("Cód. da Obra");

        jLabel10.setText("Título da Obra");

        jLabel4.setText("Data");

        jLabel9.setText("Hora");

        jLabel2.setText("Local");

        txtCodLeitor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLeitorFocusLost(evt);
            }
        });
        txtCodLeitor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodLeitorKeyTyped(evt);
            }
        });

        txtCodItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodItemFocusLost(evt);
            }
        });
        txtCodItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodItemKeyTyped(evt);
            }
        });

        jLabel8.setText("Exemplar");

        txtHoraCadastro1.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCodLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel10)))
                            .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHoraCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbNomedoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtHoraCadastro1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConsultaItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConsultaLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnAddObra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirObra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9)
                    .addComponent(txtHoraCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtDataCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(cbNomedoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCodLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConsultaLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(txtCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtHoraCadastro1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(btnConsultaItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddObra)
                    .addComponent(btnExcluirObra))
                .addGap(288, 288, 288))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Obras"));

        tblEmprestimos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblEmprestimos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblEmprestimos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane5.setViewportView(tblEmprestimos);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Principal", jPanel1);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionaRegistro)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarConsulta)
                    .addComponent(btnTodos)
                    .addComponent(btnSelecionaRegistro))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código do Leitor", "Nome do Leitor", "Data do Empréstimo" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        jLabel11.setText("Data Inicial:");

        jLabel12.setText("Data Final:");

        btnConsultarData.setText("Consultar");
        btnConsultarData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarDataActionPerformed(evt);
            }
        });

        txtConsultaDataIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaDataInKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConsultaDataInKeyTyped(evt);
            }
        });

        txtConsultaDataFin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaDataFinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConsultaDataFinKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtConsultaDataIn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtConsultaDataFin, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsultarData)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txtConsultaDataIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConsultaDataFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarData))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblLeitores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblLeitores.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblLeitores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLeitoresMouseClicked(evt);
            }
        });
        tblLeitores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblLeitoresKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblLeitoresKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblLeitores);

        tblObrasdoLeitor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblObrasdoLeitor.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblObrasdoLeitor.setFocusable(false);
        tblObrasdoLeitor.setRequestFocusEnabled(false);
        jScrollPane6.setViewportView(tblObrasdoLeitor);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consulta", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-750)/2, (screenSize.height-600)/2, 750, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Botões
        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);

        txtDataCadastro.setEnabled(false);
        txtHoraCadastro.setEnabled(false);
        txtDataEntrega.setEnabled(true);
        txtCodLeitor.setEnabled(true);
        cbNomedoLeitor.setEnabled(true);
        txtCodItem.setEnabled(true);
        cbTitulo.setEnabled(true);
        btnConsultaLeitor.setEnabled(true);
        btnConsultaItem.setEnabled(true);
        btnAddObra.setEnabled(true);
        btnExcluirObra.setEnabled(true);
        txtCodLeitor.setText("");
        cbNomedoLeitor.setSelectedIndex(-1);
        txtCodItem.setText("");
        cbTitulo.setSelectedIndex(-1);
        if (tblEmprestimos.getRowCount() > 0) {
            //remove os itens da tabela
            modelObra.removeAllRows();
        }

        //Põe o foco no controle nome
        txtCodLeitor.requestFocus();
        //===========================================================

        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        txtDataCadastro.setText(df.format(new Date()));
        DateFormat h = new SimpleDateFormat("HH:mm:ss");
        txtHoraCadastro.setText(h.format(new Date().getTime()));

        //cria um objeto MysqlDB apontando para o banco especificado.
        DB banco = new DB();
        banco.connect();
        //Máximo de movimento
        int max1 = -1;

        String dataSTR = txtDataCadastro.getText().trim();
        DateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
        java.util.Date data = null;
        try {
            data = df2.parse(dataSTR);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(data);
        cal.add(Calendar.DATE, dias);
        txtDataEntrega.setText(df.format(cal.getTime()));
        try {
            String sql = "SELECT MAX(codigo)AS codigo FROM detalhesreservas";
            Query query1 = new Query(banco.conn);
            query1.open(sql);
            query1.next();
            max2 = query1.rs.getInt("codigo");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro: MAX detalhesreservas" + e.getMessage());
        }
        try {
            String sql = "SELECT MAX(codigo)As codigo FROM reservas";
            Query query1 = new Query(banco.conn);
            query1.open(sql); //executa uma sentença sql.
            query1.next();
            max1 = query1.rs.getInt("codigo");
            banco.disconnect();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro: MAX movimento" + e.getMessage());
        }
        max1 = max1 + 1;
        txtCodigo.setText(new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(max1))));
        novoCadastro = true;

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);

        txtDataCadastro.setEnabled(false);
        txtHoraCadastro.setEnabled(false);
        txtDataEntrega.setEnabled(true);
        txtCodLeitor.setEnabled(true);
        cbNomedoLeitor.setEnabled(true);
        txtCodItem.setEnabled(true);
        cbTitulo.setEnabled(true);
        btnConsultaLeitor.setEnabled(true);
        btnConsultaItem.setEnabled(true);
        btnAddObra.setEnabled(true);
        btnExcluirObra.setEnabled(true);

        String dataSTR = txtDataCadastro.getText().trim();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        java.util.Date data = null;
        try {
            data = df.parse(dataSTR);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(data);
        cal.add(Calendar.DATE, dias);
        txtDataEntrega.setText(df.format(cal.getTime()));
        novoCadastro = false;

}//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        btnAdicionar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);

        //Limpa os controles ao cancelar
        txtCodigo.setText("");
        txtDataCadastro.setText("");
        txtHoraCadastro.setText("");
        txtDataEntrega.setText("");
        txtCodLeitor.setText("");
        cbNomedoLeitor.setSelectedIndex(-1);
        txtCodItem.setText("");
        cbTitulo.setSelectedIndex(-1);
        txtLocal.setText("");

        txtDataCadastro.setEnabled(false);
        txtHoraCadastro.setEnabled(false);
        txtDataEntrega.setEnabled(false);
        txtCodLeitor.setEnabled(false);
        cbNomedoLeitor.setEnabled(false);
        btnConsultaLeitor.setEnabled(false);
        txtCodItem.setEnabled(false);
        cbTitulo.setEnabled(false);
        btnConsultaItem.setEnabled(false);
        txtLocal.setEnabled(false);
        btnAddObra.setEnabled(false);
        btnExcluirObra.setEnabled(false);
        if (tblEmprestimos.getRowCount() > 0) {
            //remove os itens da tabela
            modelObra.removeAllRows();
        }
        novoCadastro = false;
}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        if (txtCodigo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "O código da reserva não pode ser nulo!", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else if (txtCodLeitor.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "O código do leitor não pode ser nulo!", "Aviso", JOptionPane.WARNING_MESSAGE);
            txtCodLeitor.requestFocus();
        } else if (cbNomedoLeitor.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione o nome do leitor!", "Aviso", JOptionPane.WARNING_MESSAGE);
            cbNomedoLeitor.requestFocus();
        } else if (tblEmprestimos.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Adicione pelo menos 1 Obra !", "Aviso", JOptionPane.WARNING_MESSAGE);
            txtCodItem.requestFocus();
        } //Insert---------------------------------------------------------
        else if (novoCadastro == true) {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            PreparedStatement sti = null;
            try {
                //Começa a transação que será executada uma a uma
                sti = banco.conn.prepareStatement("BEGIN");
                sti.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            int ri1 = 0;
            //Insere usando formatacao JAVA
            //Insere primeiro na tabela pai(movimento)         
            PreparedStatement st1 = null;
            String sqlGeral = "INSERT INTO reservas(codigo,data_2,hora,"
                    + "codleitor,validadereserva)VALUES(?,?,?,?,?)";
            try {
                st1 = banco.conn.prepareStatement(sqlGeral);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                //Data de cadastro
                DateFormat dfCR = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dtCR = dfCR.parse(txtDataEntrega.getText().trim());
                java.sql.Date dtCJDBC = new java.sql.Date(dtCR.getTime());
                st1.setDate(2, dtCJDBC);
                //Hora de cadastro
                DateFormat hfCR = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hCR = hfCR.parse(txtHoraCadastro.getText().trim());
                java.sql.Time hCJDBC = new java.sql.Time(hCR.getTime());
                st1.setTime(3, hCJDBC);
                st1.setInt(4, Integer.parseInt(txtCodLeitor.getText().trim()));
                //Validade da reserva            
                //Converte a data para o formato JDBC
                DateFormat dfR = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dtRv = dfR.parse(txtDataEntrega.getText().trim());
                java.sql.Date dtJDBCv = new java.sql.Date(dtRv.getTime());
                st1.setDate(5, dtJDBCv);
                ri1 = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao inserir em movimento \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//----------//Se foi inserido na tabela pai, insere na tabela filho-------------
            //detalhesmovimento 
            //codmovimento,codlivro,datadaentrega,situacao
            int ri2 = 0;
            //Código detalhesmovimento
            max2 = max2 + 1;
            if (ri1 > 0) {
                PreparedStatement st2 = null;
                String sql = "INSERT INTO detalhesreservas(codigo,codreserva,"
                        + "codlivro)VALUES(?,?,?)";
                try {
                    st2 = banco.conn.prepareStatement(sql);
                    for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
                        //Código do autoincremento
                        st2.setInt(1, max2++);
                        //Código do movimento
                        st2.setInt(2, Integer.parseInt(txtCodigo.getText().trim()));
                        //Código do livro/Código de barras
                        st2.setInt(3, Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()));
                        ri2 = st2.executeUpdate();
                    }
                    st2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao inserir em detalhesmovimento \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            //-----------------------------UPDATE EM LIVROS---------------------
            int ruLivros = 0;
            if (ri2 > 0) {
                //Se foi executado, então atualiza na tabela cadlivros
                //em disponibilidade=EM(emprestado) ou LL(lido no local)
                PreparedStatement st3 = null;
                String sqlUpdateLivros = "UPDATE detalhesdolivro SET disponibilidade=? "
                        + "WHERE iddetalhesdolivro=?";
                try {
                    st3 = banco.conn.prepareStatement(sqlUpdateLivros);
                    for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
                        //R-Reservado
                        st3.setString(1, "R");
                        //Código do livro
                        st3.setInt(2, Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()));
                        ruLivros = st3.executeUpdate();
                    }
                    st3.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar em detalhesdolivro \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
//---------//Se foi executado, então mostra a mensagem--------------------------
            if (ri1 > 0 && ri2 > 0 && ruLivros > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }

                JOptionPane.showMessageDialog(null, "Reserva realizada"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                //Limpa os controles ao cancelar
                txtCodigo.setText("");
                txtDataCadastro.setText("");
                txtHoraCadastro.setText("");
                txtDataEntrega.setText("");
                txtCodLeitor.setText("");
                cbNomedoLeitor.setSelectedIndex(-1);
                txtCodItem.setText("");
                cbTitulo.setSelectedIndex(-1);
                txtLocal.setText("");

                txtDataCadastro.setEnabled(false);
                txtHoraCadastro.setEnabled(false);
                txtDataEntrega.setEnabled(false);
                txtCodLeitor.setEnabled(false);
                cbNomedoLeitor.setEnabled(false);
                btnConsultaLeitor.setEnabled(false);
                txtCodItem.setEnabled(false);
                cbTitulo.setEnabled(false);
                btnConsultaItem.setEnabled(false);
                txtLocal.setEnabled(false);
                btnAddObra.setEnabled(false);
                btnExcluirObra.setEnabled(false);
                //Carrega os livros
                for (Itens item : new Itens().carregar()) {
                    if (item.getDisponibilidade().equals("D")) {
                        cbTitulo.addItem(item);
                    }
                }
                //Preenche a consulta
                btnTodosActionPerformed(evt);
                //Apaga todos os dados da lista de obras
                //Remove as linhas da jTable
                if (tblEmprestimos.getRowCount() > 0) {
                    modelObra.removeAllRows();
                }
            } else {
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Contate o administrador do sistema. \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            banco.disconnect();


        } //====================================================================
        //======================================================================
        //======================================================================
        //senão Update==========================================================
        else if (novoCadastro == false) {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            banco.connect();
            //conecta ao banco
            PreparedStatement st = null;
            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            //-----------------------------------------------------------------

            //Atualiza usando formatacao JAVA
            //Primeiro atualiza em cadlivros D
            //Tem que fazer um LOOP na tabela detalhesmovimento e verificar os
            //ítens antes antigos e colocar em cadlivros disponibilidade=D
            //Depois inserir novamente em detalhesmovimento e atualiza em cadlivros            
            //-------------------Primeiro vê em detalhesmovimento os ítens------
            //e faz um Loop atualizando em cadlivros disponibilidade='D'
            int ruLivros1 = 0;
            Query consulta = new Query(banco.conn);
            String sqlC = "SELECT codlivro "
                    + "FROM detalhesreservas "
                    + "WHERE codreserva=" + txtCodigo.getText().trim();
            consulta.open(sqlC);
            String codlivro;
            PreparedStatement stu = null;
            String sqlUpdate1 = "UPDATE detalhesdolivro SET disponibilidade=? "
                    + "WHERE iddetalhesdolivro=?";
            try {
                stu = banco.conn.prepareStatement(sqlUpdate1);
                while (consulta.next()) {
                    codlivro = consulta.fieldbyname("codlivro");
                    stu.setString(1, "D");
                    stu.setInt(2, Integer.parseInt(codlivro));
                    ruLivros1 = stu.executeUpdate();
                }
                stu.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar em livros "
                        + "(DISPONÍVEL) \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            //------------------------------------------------------------------------------
            //Se foi executado, então atualiza na tabela cadlivros NOVAMENTE
            //em disponibilidade=EM com o novo código do livro  ou LL se
            //for lido no local
            int ruLivros2 = 0;
            if (ruLivros1 > 0) {

                PreparedStatement stu2 = null;
                String sqlUpdateLivros = "UPDATE detalhesdolivro SET disponibilidade=? "
                        + "WHERE iddetalhesdolivro=?";
                try {
                    stu2 = banco.conn.prepareStatement(sqlUpdateLivros);
                    //Faz um loop em tblEmprestimos
                    for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
                        stu.setString(1, "R");
                        //Código do livro
                        stu2.setInt(2, Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()));
                        ruLivros2 = stu2.executeUpdate();
                    }
                    stu2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar em livros "
                            + "(RESERVADO) \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            //UPDATE em reservas------------------------------------------------
            int ruMov = 0;
            if (ruLivros2 > 0) {

                PreparedStatement stm = null;
                String sqlUpdateM = "UPDATE reservas SET codleitor=? SET validadereserva=?"
                        + " WHERE codigo=?";
                try {
                    stm = banco.conn.prepareStatement(sqlUpdateM);
                    //Pega o código do leitor
                    stm.setInt(1, (((Leitores) cbNomedoLeitor.getModel().getSelectedItem()).getCodigo()));
                    stm.setInt(2, Integer.parseInt(txtCodigo.getText()));
                    //Validade da reserva            
                    //Converte a data para o formato JDBC
                    DateFormat dfR = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtRv = dfR.parse(txtDataEntrega.getText().trim());
                    java.sql.Date dtJDBCv = new java.sql.Date(dtRv.getTime());
                    stm.setDate(3, dtJDBCv);
                    ruMov = stm.executeUpdate();
                    stm.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar em movimento\n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }

//            //----------------------------------------------------------------
//            //Deleta na tabela detalhesreservas-------------------------------
            int rD = 0;
            if (ruMov > 0) {
                PreparedStatement std = null;
                String sqlD = "DELETE FROM detalhesreservas "
                        + "WHERE codreserva=?";
                try {
                    std = banco.conn.prepareStatement(sqlD);
                    std.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                    rD = std.executeUpdate();
                    std.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao deletar em detalhesreservas \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
//            //----------------------------------------------------------------
//            //Insere em detalhesreservas--------------------------------------
//            //Primeiro pega o código máximo de detalhesmovimento--------------
            int ri = 0;
            if (rD > 0) {
                try {
                    String sqlMax = "SELECT MAX(codigo)AS codigo FROM detalhesreservas";
                    Query query1 = new Query(banco.conn);
                    query1.open(sqlMax);
                    query1.next();
                    max2 = query1.rs.getInt("codigo");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro: MAX detalhesreservas" + e.getMessage());
                }
                //--------------------------------------------------------------
                //Agora faz um loop inserindo os dados na tabela detalhesreservas
                //Pega o valor máximo do Código detalhesreservas
                max2 = max2 + 1;
                PreparedStatement sti2 = null;
                String sqli = "INSERT INTO detalhesreservas(codigo,codreserva,"
                        + "codlivro)VALUES(?,?,?)";
                try {
                    sti2 = banco.conn.prepareStatement(sqli);
                    for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
                        //Código do autoincremento
                        sti2.setInt(1, max2++);
                        //Código do movimento
                        sti2.setInt(2, Integer.parseInt(txtCodigo.getText().trim()));
                        //Código do livro/Código de barras
                        sti2.setInt(3, Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()));
                        ri = sti2.executeUpdate();
                    }
                    sti2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao inserir em detalhesreservas \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
//            //-----------------------------------------------------------------
//            //-----------------------------------------------------------------
//            //Se foi executado, então mostra a mensagem------------------------
            if (ruLivros1 > 0 && ruLivros2 > 0 && ruMov > 0 && rD > 0 && ri > 0) {
                // Se as query foram executas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }

                JOptionPane.showMessageDialog(null, "Reserva atualizada"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                //Limpa os controles ao cancelar
                txtCodigo.setText("");
                txtDataCadastro.setText("");
                txtHoraCadastro.setText("");
                txtDataEntrega.setText("");
                txtCodLeitor.setText("");
                cbNomedoLeitor.setSelectedIndex(-1);
                txtCodItem.setText("");
                cbTitulo.setSelectedIndex(-1);
                txtLocal.setText("");

                txtDataCadastro.setEnabled(false);
                txtHoraCadastro.setEnabled(false);
                txtDataEntrega.setEnabled(false);
                txtCodLeitor.setEnabled(false);
                cbNomedoLeitor.setEnabled(false);
                btnConsultaLeitor.setEnabled(false);
                txtCodItem.setEnabled(false);
                cbTitulo.setEnabled(false);
                btnConsultaItem.setEnabled(false);
                txtLocal.setEnabled(false);
                btnAddObra.setEnabled(false);
                btnExcluirObra.setEnabled(false);
                //Carrega os livros
                for (Itens item : new Itens().carregar()) {
                    if (item.getDisponibilidade().equals("D")) {
                        cbTitulo.addItem(item);
                    }
                }
                //Preenche a consulta
                btnTodosActionPerformed(evt);
                //Apaga todos os dados da lista de obras
                //Remove as linhas da jTable
                if (tblEmprestimos.getRowCount() > 0) {
                    modelObra.removeAllRows();
                }
            } else {
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Contate o administrador do sistema. \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            banco.disconnect();
        }

}//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
        //txtCodigo.setText("");
        //Volta para a tab principal
        jTabbedPane1.setSelectedIndex(0);
}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed

        banco2 = new DB();
        banco2.connect();
        Query query1 = new Query(banco2.conn);
        String sql = "SELECT r.data_2,r.hora,r.codleitor,l.nomedoleitor,r.codigo,r.validadereserva"
                + " FROM cadleitores l,reservas r"
                + " WHERE r.codleitor=l.codigo"
                + " ORDER BY l.nomedoleitor";
        //Somente as obras reservadas
        query1.open(sql);
        //------------------------------
        String codigo;
        String data;
        String hora;
        String codleitor;
        String nomedoleitor;
        String validadereserva;
        //------------------------------
        vetor = new ArrayList();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat dfH = new SimpleDateFormat("HH:mm:ss");
        //Pega a data no formato do banco e armazena na variável
        java.sql.Date data_2 = null;
        java.sql.Time hr = null;
        java.sql.Date dtentrega = null;

        while (query1.next()) {
            codigo = query1.fieldbyname("codigo");
            data = query1.fieldbyname("data_2");
            hora = query1.fieldbyname("hora");
            codleitor = query1.fieldbyname("codleitor");
            nomedoleitor = query1.fieldbyname("nomedoleitor");
            validadereserva = query1.fieldbyname("validadereserva");
            //Converte a string em DataJDBC no formato do banco de dados
            data_2 = java.sql.Date.valueOf(data);
            //Transforma em String
            data = df.format(data_2);
            hr = java.sql.Time.valueOf(hora);
            //Transforma em String
            hora = dfH.format(hr);
            //Adiciona ao ArrayList os valores armazenados
            dtentrega = java.sql.Date.valueOf(validadereserva);
            validadereserva = df.format(dtentrega);
            vetor.add(new String[]{
                        data,
                        hora,
                        new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(codleitor).doubleValue())),
                        nomedoleitor,
                        validadereserva,
                        new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(codigo).doubleValue()))
                    });
        }
        //Desconecta
        banco2.disconnect();
        //=====================================================================
        String[] colunasLeitor = {"Data", "Hora", "Código", "Nome do Leitor", "Validade"};
        boolean[] edicao = {false, false, false, false};
        modelLeitores = new MkTableModel(vetor, colunasLeitor, edicao);
        tblLeitores.setModel(modelLeitores);
        sorter = new TableRowSorter<MkTableModel>(modelLeitores);
        tblLeitores.setRowSorter(sorter);

        tblLeitores.getColumnModel().getColumn(0).setPreferredWidth(100);
        tblLeitores.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblLeitores.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblLeitores.getColumnModel().getColumn(3).setPreferredWidth(350);
        tblLeitores.getColumnModel().getColumn(4).setPreferredWidth(100);

        if (tblLeitores.getRowCount() == 0) {
            lblMensagem.setText("Nenhum leitor encontrado !");
        } else if (tblLeitores.getRowCount() == 1) {
            lblMensagem.setText(tblLeitores.getRowCount() + " leitor encontrado !");
            tblLeitores.requestFocus();
        } else if (tblLeitores.getRowCount() > 1) {
            lblMensagem.setText(tblLeitores.getRowCount() + " leitores encontrados ! ");
            tblLeitores.requestFocus();
        }

        if (tblObrasdoLeitor.getRowCount() > 0) {
            modelObrasdoLeitor.removeAllRows();
        }

}//GEN-LAST:event_btnTodosActionPerformed

    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed
//
//       
        if (tblLeitores.getRowCount() > 0 && tblLeitores.getSelectedRow() > -1) {
            txtCodigo.setText(new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(modelLeitores.getRow(tblLeitores.getSelectedRow(), 4).toString()))));
            txtDataCadastro.setText(tblLeitores.getValueAt(tblLeitores.getSelectedRow(), 0).toString());
            txtHoraCadastro.setText(tblLeitores.getValueAt(tblLeitores.getSelectedRow(), 1).toString());//
            //------------------------------------------------------------------
            //Seleciona o leitor corretamente setando o objeto
            for (Leitores leitor : new Leitores().carregar()) {
                if (leitor.getCodigo() == Integer.parseInt(tblLeitores.getValueAt(tblLeitores.getSelectedRow(), 2).toString())) {
                    cbNomedoLeitor.getModel().setSelectedItem(leitor);
                    txtCodLeitor.setText(new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(String.valueOf(leitor.getCodigo())))));
                }
            }
            //--------------------Preenche a lista de obras---------------------
            if (tblEmprestimos.getRowCount() > 0) {
                modelObra.removeAllRows();
            }
            String[] linha;
            for (int i = 0; i < tblObrasdoLeitor.getRowCount(); i++) {
                linha = new String[]{tblObrasdoLeitor.getValueAt(i, 0).toString(),
                            tblObrasdoLeitor.getValueAt(i, 1).toString(),
                            tblObrasdoLeitor.getValueAt(i, 2).toString()};
                dadosObra.add(linha);
            }
            boolean[] edicao = {false, false, false};
            modelObra = new MkTableModel(dadosObra, colunasObra, edicao);
            tblEmprestimos.setModel(modelObra);
            tblEmprestimos.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblEmprestimos.getColumnModel().getColumn(1).setPreferredWidth(350);
            tblEmprestimos.getColumnModel().getColumn(2).setPreferredWidth(150);

            btnEditar.setEnabled(true);
            btnExcluir.setEnabled(true);
            btnAdicionar.setEnabled(true);
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            btnAddObra.setEnabled(false);
            btnExcluirObra.setEnabled(false);
            jTabbedPane1.setSelectedIndex(0);

        } else {
            JOptionPane.showMessageDialog(null, "Selecione o registro que deseja editar ou excluir!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        }
}//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        //Desativa a consulta de data e o botão que filtra a data
        txtConsultaDataIn.setEnabled(false);
        txtConsultaDataFin.setEnabled(false);
        btnConsultarData.setEnabled(false);

        banco2 = new DB();
        banco2.connect();
//        Query nomeDoLeitor = new Query(banco2.conn);
//        Query Qitem = new Query(banco2.conn);
        //conecta ao banco
        Query query1 = new Query(banco2.conn);
        query1.open("SELECT diasdareserva FROM configuracoes");
        String d = null;
        while (query1.next()) {
            d = query1.fieldbyname("diasdareserva");
        }
        //Pega o número de dias
        dias = Integer.parseInt(d);
        //Carrega os leitores
        for (Leitores leitor : new Leitores().carregar()) {
            cbNomedoLeitor.addItem(leitor);
        }
        //Carrega os livros
        for (Itens item : new Itens().carregar()) {
            if (!item.getDisponibilidade().equals("R")) {
                cbTitulo.addItem(item);
            }
        }
        txtDataCadastro.setEnabled(false);
        txtHoraCadastro.setEnabled(false);
        txtDataEntrega.setEnabled(false);
        txtCodLeitor.setEnabled(false);
        cbNomedoLeitor.setEnabled(false);
        btnConsultaLeitor.setEnabled(false);
        txtCodItem.setEnabled(false);
        cbTitulo.setEnabled(false);
        btnConsultaItem.setEnabled(false);
        cbNomedoLeitor.setSelectedIndex(-1);
        cbTitulo.setSelectedIndex(-1);
        txtCodLeitor.setText("");
        txtCodItem.setText("");
        //Não mostrar o código do empréstimo
        btnAddObra.setEnabled(false);
        btnExcluirObra.setEnabled(false);
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        //cria um objeto DB apontando para o banco especificado.
        DB banco = new DB();
        //conecta ao banco
        banco.connect();
        //PRIMEIRO ABRE A TRANSAÇÃO
        PreparedStatement st = null;
        try {
            //Começa a transação que será executada uma a uma
            st = banco.conn.prepareStatement("BEGIN");
            st.execute();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                    + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
        }
        //---------------------------------------------------------------------
        //Dá o update na tabela cadlivros, disponibilidade=D
        //Antes de iniciar a exclusão na tabela filho(detalhesreservas)
        //e tabela pai (reservas)
        int ruLivros = 0;
        PreparedStatement stu = null;
        String sqlUpdateLivros = "UPDATE cadlivros SET disponibilidade=D "
                + "WHERE codigo=?";
        try {
            stu = banco.conn.prepareStatement(sqlUpdateLivros);
            //Faz um loop em tblEmprestimos
            for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
                //Código do livro
                stu.setInt(1, Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()));
                ruLivros = stu.executeUpdate();
            }
            stu.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar em livros "
                    + "(EMPRESTADO/LIDO NO LOCAL) \n"
                    + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
        }
        //----------------------------------------------------------------------
        int rd = 0;
        if (ruLivros > 0) {
            PreparedStatement std2 = null;
            String sqld2 = "DELETE FROM reservas WHERE codigo=? ";
            try {
                std2 = banco.conn.prepareStatement(sqld2);
                std2.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                rd = std2.executeUpdate();
                std2.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao deletar em reservas \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
        //----------------------------------------------------------------------
        if (ruLivros > 0 && rd > 0) {
            // Se as query foram executas com sucesso,
            //executa o commit para efetivar as operações
            PreparedStatement stCommit = null;
            try {
                stCommit = banco.conn.prepareStatement("COMMIT");
                stCommit.execute();
                stCommit.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Registro excluído"
                    + " com sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            btnAdicionar.setEnabled(true);
            btnEditar.setEnabled(false);
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            btnExcluir.setEnabled(false);

            //Limpa os controles ao cancelar
            txtCodigo.setText("");
            txtDataCadastro.setText("");
            txtHoraCadastro.setText("");
            txtDataEntrega.setText("");
            txtCodLeitor.setText("");
            cbNomedoLeitor.setSelectedIndex(-1);
            txtCodItem.setText("");
            cbTitulo.setSelectedIndex(-1);

            txtDataCadastro.setEnabled(false);
            txtHoraCadastro.setEnabled(false);
            txtDataEntrega.setEnabled(false);
            txtCodLeitor.setEnabled(false);
            cbNomedoLeitor.setEnabled(false);
            btnConsultaLeitor.setEnabled(false);
            txtCodItem.setEnabled(false);
            cbTitulo.setEnabled(false);
            btnConsultaItem.setEnabled(false);
            //Remove as linhas da jTable
            if (tblEmprestimos.getRowCount() > 0) {
                modelObra.removeAllRows();
            }

        } else {
            // Se as query retornaram falha,
            //executa o rollback para desfazer as operações
            PreparedStatement stRollback = null;
            try {
                stRollback = banco.conn.prepareStatement("ROLLBACK");
                stRollback.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Operação não realizada! "
                        + "Contate o administrador do sistema \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
        banco.disconnect();

    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnConsultaLeitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaLeitorActionPerformed
        jdfrmConsultaLeitores cl = new jdfrmConsultaLeitores(null, closable);
        cl.setVisible(true);
        cl.toFront();
        if (cl.okSelecionado == true) {
            if (cbNomedoLeitor.getModel().getSize() > 0) {
                txtCodLeitor.setText(cl.getCodigo());
                txtCodLeitor.requestFocus();
            }
            cl.setVisible(false);
            cl.dispose();
        }
}//GEN-LAST:event_btnConsultaLeitorActionPerformed

    private void btnConsultaItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaItemActionPerformed
        jdfrmConsultaAcervodeObrasReserva cl = new jdfrmConsultaAcervodeObrasReserva(null, closable);
        cl.setVisible(true);
        cl.toFront();
        if (cl.okSelecionado == true) {
            txtCodItem.setText(cl.getCodigo());
            txtCodItem.requestFocus();
            cl.setVisible(false);
            cl.dispose();
        }
    }//GEN-LAST:event_btnConsultaItemActionPerformed

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                txtConsulta.setEnabled(true);
                txtConsulta.setText("");
                txtConsultaDataIn.setEnabled(false);
                txtConsultaDataFin.setEnabled(false);
                btnConsultarData.setEnabled(false);
                //código do leitor somente números
                txtConsulta.setDocument(new DocSomenteNumeros());
                break;
            case 1:
                txtConsulta.setEnabled(true);
                txtConsulta.setText("");
                txtConsultaDataIn.setEnabled(false);
                txtConsultaDataFin.setEnabled(false);
                btnConsultarData.setEnabled(false);
                //Nome do leitor
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 2:
                //Data do empréstimo
                txtConsulta.setEnabled(false);
                txtConsulta.setText("");
                txtConsultaDataIn.setEnabled(true);
                txtConsultaDataFin.setEnabled(true);
                btnConsultarData.setEnabled(true);
                break;
            case 3:
                //Data de devolução
                txtConsulta.setEnabled(false);
                txtConsulta.setText("");
                txtConsultaDataIn.setEnabled(true);
                txtConsultaDataFin.setEnabled(true);
                btnConsultarData.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    private void tblLeitoresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLeitoresKeyReleased
        if (tblLeitores.getRowCount() > 0) {
            //Mostra as obras do leitor
            carregaObrasdoLeitor();
        }
}//GEN-LAST:event_tblLeitoresKeyReleased

    private void tblLeitoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLeitoresMouseClicked

        if (tblLeitores.getRowCount() > 0) {
            //Mostra as obras do leitor
            carregaObrasdoLeitor();
        }
        if (evt.getClickCount() == 2) {
            if (tblLeitores.getRowCount() > 0) {
                btnSelecionaRegistroActionPerformed(null);
            }
        }
}//GEN-LAST:event_tblLeitoresMouseClicked

    private void btnConsultaItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnConsultaItemFocusLost
//        java.awt.event.ActionEvent ev = null;
//        btnSalvarActionPerformed(ev);
    }//GEN-LAST:event_btnConsultaItemFocusLost

    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter(int coluna) {
        RowFilter<MkTableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            //(?i) para case insensitive
            rf = RowFilter.regexFilter("(?i)" + txtConsulta.getText(), coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased

        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código do Leitor
                newFilter(2);
                break;
            case 1:
                //Nome do leitor
                newFilter(3);
                break;
        }
        if (tblLeitores.getRowCount() == 0) {
            lblMensagem.setText("Nenhum leitor encontrado !");
        } else {
            lblMensagem.setText(tblLeitores.getRowCount() + " leitor(es) encontrado(s) !");
        }
    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnConsultarDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarDataActionPerformed
        if (txtConsultaDataIn.getText().length() == 10 && txtConsultaDataFin.getText().length() == 10) {
            String campo = null;
            //Converte para o formato do banco
            DateFormat dft = new SimpleDateFormat("dd/MM/yyyy");
            java.sql.Date dtIJDBC = null;
            java.sql.Date dtFJDBC = null;
            try {
                java.util.Date dtI = dft.parse(txtConsultaDataIn.getText().trim());
                java.util.Date dtF = dft.parse(txtConsultaDataFin.getText().trim());
                dtIJDBC = new java.sql.Date(dtI.getTime());
                dtFJDBC = new java.sql.Date(dtF.getTime());
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }

            switch (cbFiltro.getSelectedIndex()) {
                case 2:
                    //Data do empréstimo
                    campo = "m.data_2 BETWEEN '" + dtIJDBC
                            + "' AND '" + dtFJDBC + "'";
                    break;
//            case 5:
//                //Data da devolução
//                campo = "d.datareserva BETWEEN '" + txtConsultaDataIn.getText().trim()
//                        + "' AND '" + txtConsultaDataFin.getText().trim() + "'";
//                break;
            }
            banco2 = new DB();
            banco2.connect();
            Query query1 = new Query(banco2.conn);
            String sql = "SELECT r.data_2,r.hora,r.codleitor,l.nomedoleitor,r.codigo"
                    + " FROM cadleitores l,reservas r"
                    + " WHERE " + campo
                    + " r.codleitor=l.codigo"
                    + " ORDER BY l.nomedoleitor";
//         
            //Somente as obras emprestadas
            query1.open(sql);
            //------------------------------            
            String data;
            String hora;
            String codleitor;
            String nomedoleitor;
            String codigo;
            //------------------------------
            vetor = new ArrayList();

            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat dfH = new SimpleDateFormat("HH:mm:ss");
            //Pega a data no formato do banco e armazena na variável
            java.sql.Date data_2 = null;
            java.sql.Time hr = null;
            while (query1.next()) {

                codigo = query1.fieldbyname("codigo");
                data = query1.fieldbyname("data_2");
                hora = query1.fieldbyname("hora");
                codleitor = query1.fieldbyname("codleitor");
                nomedoleitor = query1.fieldbyname("nomedoleitor");
                //Converte a string em DataJDBC no formato do banco de dados
                data_2 = java.sql.Date.valueOf(data);
                //Transforma em String
                data = df.format(data_2);
                hr = java.sql.Time.valueOf(hora);
                //Transforma em String
                hora = dfH.format(hr);

                //Adiciona ao ArrayList os valores armazenados
                vetor.add(new String[]{
                            data,
                            hora,
                            new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(codleitor).doubleValue())),
                            nomedoleitor,
                            new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(codigo).doubleValue()))
                        });
            }
            //Desconecta
            banco2.disconnect();
            //=====================================================================
            String[] colunasLeitor = {"Data", "Hora", "Código", "Nome do Leitor"};
            boolean[] edicao = {false, false, false, false};
            modelLeitores = new MkTableModel(vetor, colunasLeitor, edicao);
            tblLeitores.setModel(modelLeitores);
            sorter = new TableRowSorter<MkTableModel>(modelLeitores);
            tblLeitores.setRowSorter(sorter);

            tblLeitores.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblLeitores.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblLeitores.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblLeitores.getColumnModel().getColumn(3).setPreferredWidth(350);

            if (tblLeitores.getRowCount() == 0) {
                lblMensagem.setText("Nenhum leitor encontrado !");
            } else {
                lblMensagem.setText(tblLeitores.getRowCount() + " leitores encontrados ! ");
                tblLeitores.requestFocus();
            }

        }
        if (tblObrasdoLeitor.getRowCount() > 0) {
            modelObrasdoLeitor.removeAllRows();
        }

    }//GEN-LAST:event_btnConsultarDataActionPerformed

    private void btnAddObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddObraActionPerformed
        if (!txtCodItem.getText().trim().equals("")
                && !txtDataEntrega.getText().trim().equals("") && cbTitulo.getModel().getSelectedItem() != null) {
            //------------------------------------------------------------------
            dadosObra.add(new String[]{
                        new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(txtCodItem.getText().trim()))),
                        cbTitulo.getModel().getSelectedItem().toString()
                    });
            boolean[] edicao = {false, false, false};
            modelObra = new MkTableModel(dadosObra, colunasObra, edicao);
            tblEmprestimos.setModel(modelObra);
            tblEmprestimos.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblEmprestimos.getColumnModel().getColumn(1).setPreferredWidth(350);
            //------------------------------------------------------------------
        }
        //----------------------VERIFICA SE É IGUAL-----------------------------
        //se tiver 2, remove uma linha
        int t = 0;
        for (int i = 0; i < tblEmprestimos.getRowCount(); i++) {
            if (Integer.parseInt(tblEmprestimos.getValueAt(i, 0).toString()) == ((Itens) cbTitulo.getSelectedItem()).getCodigo()) {
                t++;
            }
            if (t == 2) {
                modelObra.removeRow(i);
            }
        }

    }//GEN-LAST:event_btnAddObraActionPerformed

    private void btnExcluirObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirObraActionPerformed
        int row = tblEmprestimos.getSelectedRow();
        if (row > -1) {
            tblEmprestimos.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblEmprestimos.getColumnModel().getColumn(1).setPreferredWidth(350);
            // Excluir a linha selecionada
            MkTableModel model = (MkTableModel) tblEmprestimos.getModel();
            model.removeRow(row);
        }

    }//GEN-LAST:event_btnExcluirObraActionPerformed

    private void txtDataEntregaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataEntregaKeyReleased
        switch (txtDataEntrega.getText().trim().length()) {
            case 2:
                txtDataEntrega.setText(txtDataEntrega.getText().trim() + "/");
                break;
            case 5:
                txtDataEntrega.setText(txtDataEntrega.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtDataEntregaKeyReleased

    private void txtDataEntregaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataEntregaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDataEntregaKeyTyped

    private void txtCodLeitorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLeitorFocusLost

        if (!txtCodLeitor.getText().trim().equals("") && Integer.parseInt(txtCodLeitor.getText().trim()) > 0) {
            //Seleciona o nome do leitor
            if (cbNomedoLeitor.getModel().getSize() > 0) {
                for (Leitores leitor : new Leitores().carregar()) {
                    if (leitor.getCodigo() == Integer.parseInt(txtCodLeitor.getText().trim())) {
                        cbNomedoLeitor.getModel().setSelectedItem(leitor);
                    }
                }
            }
            txtCodLeitor.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(txtCodLeitor.getText().trim())));
        } else if (!txtCodLeitor.getText().trim().equals("") && Integer.parseInt(txtCodLeitor.getText().trim()) == 0) {
            txtCodLeitor.setText("");
        }

    }//GEN-LAST:event_txtCodLeitorFocusLost

    private void txtCodItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodItemFocusLost

        if (!txtCodItem.getText().trim().equals("")) {
            if (cbTitulo.getModel().getSize() > 0) {
                for (Itens item : new Itens().carregar()) {
                    if (item.getCodigo() == Integer.parseInt(txtCodItem.getText().trim())) {
                        cbTitulo.getModel().setSelectedItem(item);
                    }
                }
            }
            txtCodItem.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(txtCodItem.getText().trim())));
        } else if (!txtCodItem.getText().trim().equals("") && Integer.parseInt(txtCodItem.getText().trim()) == 0) {
            txtCodItem.setText("");
        }

    }//GEN-LAST:event_txtCodItemFocusLost

    private void cbNomedoLeitorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbNomedoLeitorFocusLost

        if (cbNomedoLeitor.getSelectedIndex() > -1) {
            txtCodLeitor.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(((Leitores) cbNomedoLeitor.getSelectedItem()).getCodigo())));
        }
    }//GEN-LAST:event_cbNomedoLeitorFocusLost

//==============================================================================
    private void carregaObrasdoLeitor() {
        banco2 = new DB();
        banco2.connect();
        Query query1 = new Query(banco2.conn);
        String sql = "SELECT dr.codlivro,c.titulo,r.codigo"
                + " FROM detalhesreservas dr,reservas r,cadlivros c,detalhesdolivro dl"
                + " WHERE dr.codreserva=r.codigo"
                + " AND dl.cadlivros_id=c.codigo"
                + " AND dr.codlivro=dl.iddetalhesdolivro"
                + " AND dr.codreserva=" + modelLeitores.getRow(tblLeitores.getSelectedRow(), 4);
        query1.open(sql);
        //----------------------------------------------------------------------
        String codigo;
        String titulo;
        String codlivro;
        //----------------------------------------------------------------------
        ArrayList vetor2 = new ArrayList();

        while (query1.next()) {
            titulo = query1.fieldbyname("titulo");
            codigo = query1.fieldbyname("codigo");
            codlivro = query1.fieldbyname("codlivro");

            //Adiciona ao ArrayList os valores armazenados
            vetor2.add(new String[]{
                        new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(codlivro).doubleValue())),
                        titulo,
                        codigo
                    });
        }
        //Desconecta
        banco2.disconnect();
        //=====================================================================
        String[] colunasObras = {"Código", "Título"};

        boolean[] edicao = {false, false, false};
        modelObrasdoLeitor = new MkTableModel(vetor2, colunasObras, edicao);
        tblObrasdoLeitor.setModel(modelObrasdoLeitor);
//        sorter = new TableRowSorter<MkTableModel>(modelObrasdoLeitor);
//        tblObrasdoLeitor.setRowSorter(sorter);

        //"Código da Obra","Título,Local"
        tblObrasdoLeitor.getColumnModel().getColumn(0).setPreferredWidth(100);
        tblObrasdoLeitor.getColumnModel().getColumn(1).setPreferredWidth(350);

        if (tblObrasdoLeitor.getRowCount() == 0) {
            lblMensagem.setText("Nenhuma obra encontrada !");
        } else {
            lblMensagem.setText(tblObrasdoLeitor.getRowCount() + " obras encontradas ! ");
            tblObrasdoLeitor.requestFocus();
        }
    }

    private void cbTituloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbTituloFocusLost
        if (cbTitulo.getSelectedIndex() > -1) {
            txtCodItem.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(((Itens) cbTitulo.getSelectedItem()).getCodigo())));
        }
    }//GEN-LAST:event_cbTituloFocusLost

    private void tblLeitoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblLeitoresKeyPressed
        //Mostra os dados
        if (tblLeitores.getRowCount() > 0) {
            carregaObrasdoLeitor();
        }
        //Se pressionar ENTER, mostra os dados
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            btnSelecionaRegistroActionPerformed(null);
        }
    }//GEN-LAST:event_tblLeitoresKeyPressed

    private void cbNomedoLeitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNomedoLeitorActionPerformed
        cbNomedoLeitorFocusLost(null);
    }//GEN-LAST:event_cbNomedoLeitorActionPerformed
    private void cbTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTituloActionPerformed
        cbTituloFocusLost(null);
    }//GEN-LAST:event_cbTituloActionPerformed

    private void txtConsultaDataInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaDataInKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtConsultaDataInKeyTyped

    private void txtConsultaDataInKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaDataInKeyReleased
        switch (txtConsultaDataIn.getText().trim().length()) {
            case 2:
                txtConsultaDataIn.setText(txtConsultaDataIn.getText().trim() + "/");
                break;
            case 5:
                txtConsultaDataIn.setText(txtConsultaDataIn.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtConsultaDataInKeyReleased

    private void txtConsultaDataFinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaDataFinKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtConsultaDataFinKeyTyped

    private void txtConsultaDataFinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaDataFinKeyReleased
        switch (txtConsultaDataFin.getText().trim().length()) {
            case 2:
                txtConsultaDataFin.setText(txtConsultaDataFin.getText().trim() + "/");
                break;
            case 5:
                txtConsultaDataFin.setText(txtConsultaDataFin.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtConsultaDataFinKeyReleased

    private void txtCodLeitorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodLeitorKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodLeitorKeyTyped

    private void txtCodItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodItemKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCodItemKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddObra;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnConsultaItem;
    private javax.swing.JButton btnConsultaLeitor;
    private javax.swing.JButton btnConsultarData;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluirObra;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JComboBox cbNomedoLeitor;
    private javax.swing.JComboBox cbTitulo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblMensagem;
    public static javax.swing.JTable tblEmprestimos;
    private javax.swing.JTable tblLeitores;
    private javax.swing.JTable tblObrasdoLeitor;
    private javax.swing.JTextField txtCodItem;
    private javax.swing.JTextField txtCodLeitor;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JTextField txtConsultaDataFin;
    private javax.swing.JTextField txtConsultaDataIn;
    private javax.swing.JTextField txtDataCadastro;
    private javax.swing.JTextField txtDataEntrega;
    private javax.swing.JTextField txtHoraCadastro;
    private javax.swing.JTextField txtHoraCadastro1;
    private javax.swing.JTextField txtLocal;
    // End of variables declaration//GEN-END:variables
}
