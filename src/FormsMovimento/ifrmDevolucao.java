/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadAutores.java
 *
 * Created on 16/09/2010, 22:49:54
 */
package FormsMovimento;

import FormsConsulta.MkTableModel;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Query;

/**
 *
 * @author MARK
 */
public class ifrmDevolucao extends javax.swing.JInternalFrame {

    private DB banco;
    //--------------------------------------------------------------------------
    //Modelo
    private TableRowSorter<MkTableModel> sorter;
    private MkTableModel modelo;
    private ArrayList dados;
    String[] colunas = {"Código", "Título", "Exemplar", "Cód. Leitor", "Nome do Leitor", "Devolução"};

    /** Creates new form ifrmCadAutores */
    public ifrmDevolucao() {

        initComponents();

        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        btnTodos = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txtDatadaDevolucao = new javax.swing.JTextField();
        lblMensagem = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Devoluções");
        setMinimumSize(new java.awt.Dimension(650, 550));
        setNormalBounds(new java.awt.Rectangle(0, 0, 690, 542));
        setPreferredSize(new java.awt.Dimension(800, 500));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnTodos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        txtConsulta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtConsultaFocusLost(evt);
            }
        });
        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setText("Devolver");
        btnSalvar.setToolTipText("");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalvar)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTodos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros"));
        jPanel6.setPreferredSize(new java.awt.Dimension(609, 227));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código da Obra", "Título da Obra", "Código do Leitor", "Nome do Leitor" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        jLabel1.setText("Devolvido em:");

        txtDatadaDevolucao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDatadaDevolucaoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDatadaDevolucaoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 314, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDatadaDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtDatadaDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-500)/2, 800, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        java.awt.event.ActionEvent evt2 = null;
        btnTodosActionPerformed(evt2);
        txtConsulta.setDocument(new DocSomenteNumeros());
        //MOSTRA A DATA ATUAL
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        txtDatadaDevolucao.setText(df.format(new java.util.Date()));

    }//GEN-LAST:event_formInternalFrameOpened

    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter(int coluna) {
        RowFilter<MkTableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            //(?i) para case insensitive
            rf = RowFilter.regexFilter("(?i)" + txtConsulta.getText(), coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            btnSalvarActionPerformed(null);
        }
}//GEN-LAST:event_jTable1MouseClicked

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        int ru = 0;
        banco = new DB();

        if (txtDatadaDevolucao.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite a data de Devolução !", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
            txtDatadaDevolucao.requestFocus();
        } else {
            //-----------------------------------------------------------------
            //Update===================================================
            //conecta ao banco
            banco.connect();
            //Begin Começa a transação
            PreparedStatement st = null;
            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//-----------------------------------------------------------------------------            
            //Primeiro verifica se foi lido no local situacao='L'
            boolean lido = true;
            if (modelo.getRow(jTable1.getSelectedRow(), 6).equals("L")) {
                //Lido no local
                lido = true;
            } else {
                lido = false;
            }

            //Atualiza usando formatacao JAVA
            //Primeiro atualiza a tabela pai
            //situacao=E(emprestado),R(renovado)
            //Se for lido no local, vai colocar C(consultado)
            PreparedStatement st1 = null;
            String sqlUpdate = "UPDATE detalhesmovimento dm"
                    + " SET datadevolvida=?,situacao=?"
                    + " WHERE dm.detalhesdolivro_id=?"
                    + " AND NOT dm.situacao='D'"
                    + " AND NOT dm.situacao='C'"
                    + " AND NOT dm.situacao='R'";
            try {
                st1 = banco.conn.prepareStatement(sqlUpdate);
                //Formata a data
                DateFormat dtF = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dtP = dtF.parse(txtDatadaDevolucao.getText().trim());
                java.sql.Date dataJDBC = new java.sql.Date(dtP.getTime());

                st1.setDate(1, dataJDBC);
                if (lido == true) {
                    //Lido no local e Cosultado quando devolvido(C),que é a mesma
                    //coisa que lido no local
                    st1.setString(2, "C");
                } else {
                    //Emprestado e foi devolvido(D)
                    st1.setString(2, "D");
                }
                //Código do livro
                st1.setInt(3, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
//                st1.setInt(4, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()));
                ru = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em detalhesmovimento \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
        }
        //=====================================================================
        //Verifica se foi executado e atualiza na tabela cadlivros
        //Se já estiver reservado, então não coloca como disponível
        int ruLivros = 0;
        if (ru > 0) {
            PreparedStatement st2 = null;
            String sqlUpdate = "UPDATE detalhesdolivro SET disponibilidade=?"
                    + " WHERE iddetalhesdolivro=? AND NOT disponibilidade='RS'";
            try {
                st2 = banco.conn.prepareStatement(sqlUpdate);
                //Disponível
                st2.setString(1, "D");
                //Código do livro
                st2.setInt(2, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
                ruLivros = st2.executeUpdate();
                st2.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em detalhesdolivro \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (ru > 0 && ruLivros > 0 || ru > 0) {
            // Se as query foram executas com sucesso,
            //executa o commit para efetivar as operações
            PreparedStatement stCommit = null;
            try {
                stCommit = banco.conn.prepareStatement("COMMIT");
                stCommit.execute();
                stCommit.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Devolução realizada"
                    + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            //Não pode recarregar porque se tiver mais registros, vai ter
            //que ficar pesquisando direto
            btnTodosActionPerformed(evt);
            //Continua com o filtro
            txtConsultaKeyReleased(null);
            banco.disconnect();
        } else {
            // Se as query retornaram falha,
            //executa o rollback para desfazer as operações
            PreparedStatement stRollback = null;
            try {
                stRollback = banco.conn.prepareStatement("ROLLBACK");
                stRollback.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Operação não realizada! "
                        + "Erro comando ROLLBACK \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed

        long time = System.currentTimeMillis();
        banco = new DB();
        banco.connect();
        Query carregaArray = new Query(banco.conn);

        //ILIKE é case insensitive para postgresql somente
        carregaArray.open("SELECT dm.detalhesdolivro_id,c.titulo,dl.exemplar,m.codleitor,"
                + "l.nomedoleitor,dm.datadaentrega,dm.situacao"
                + " FROM detalhesmovimento dm,cadleitores l,detalhesdolivro dl,cadlivros c,movimento m"
                + " WHERE dm.detalhesdolivro_id=dl.iddetalhesdolivro"
                + " AND c.codigo=dl.cadlivros_id"
                + " AND m.codleitor=l.codigo"
                + " AND dm.codmovimento=m.codigo"
                + " AND NOT dm.situacao='D'"
                + " AND NOT dm.situacao='C'"
                + " AND NOT dm.situacao='R'"
                + " ORDER BY m.codleitor ASC");

        dados = new ArrayList();
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        //Pega a data no formato do banco e armazena na variável
        java.sql.Date dtJDBC = null;

        String datadaentrega;
        String codleitor;
        String nomedoleitor;
        String codlivro;
        String titulo;
        String exemplar;
        String situacao;
        try {
            while (carregaArray.next()) {
                codlivro = carregaArray.fieldbyname("detalhesdolivro_id");
                titulo = carregaArray.fieldbyname("titulo");
                exemplar = carregaArray.fieldbyname("exemplar");
                codleitor = carregaArray.fieldbyname("codleitor");
                nomedoleitor = carregaArray.fieldbyname("nomedoleitor");
                datadaentrega = carregaArray.fieldbyname("datadaentrega");
                situacao = carregaArray.fieldbyname("situacao");

                //Converte a string em DataJDBC no formato do banco de dados
                dtJDBC = java.sql.Date.valueOf(datadaentrega);

                //Adiciona no ArrayList
                dados.add(new String[]{
                            codlivro,
                            titulo,
                            exemplar,
                            codleitor,
                            nomedoleitor,
                            df.format(dtJDBC),
                            situacao
                        });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
        }
        banco.disconnect();
//------------------------------------------------------------------------------
        boolean[] edicao1 = {false, false, false, false, false, false};
        modelo = new MkTableModel(dados, colunas, edicao1);
        jTable1.setModel(modelo);
        sorter = new TableRowSorter<MkTableModel>(modelo);
        jTable1.setRowSorter(sorter);
//==============================================================================
//------------------------------------------------------------------------------
        //REDIMENSIONA AS COLUNAS COM BASE NO TAMANHO MÁXIMO DE CADA CÉLULA
        //AQUI REDIMENSIONA SOMENTE A TERCEIRA
//        int maxWidth0 = 0;
        int maxWidth1 = 0;
//        int maxWidth2 = 0;
//        int maxWidth3 = 0;
        int maxWidth4 = 0;
//        int maxWidth5 = 0;
//        int maxWidth6 = 0;
//        int maxWidth7 = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
//            Object cellValue0 = jTable1.getValueAt(i, 0);
            Object cellValue1 = jTable1.getValueAt(i, 1);
//            Object cellValue2 = jTable1.getValueAt(i, 2);
//            Object cellValue3 = jTable1.getValueAt(i, 3);
            Object cellValue4 = jTable1.getValueAt(i, 4);
//            Object cellValue5 = jTable1.getValueAt(i, 5);
//            Object cellValue6 = jTable1.getValueAt(i, 6);
//            Object cellValue7 = jTable1.getValueAt(i, 7);

//            if (cellValue0 != null) {
//                maxWidth0 = Math.max(jTable1.getCellRenderer(i, 0).
//                        getTableCellRendererComponent(jTable1, cellValue0, false, false, i, 0).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth0);
//            }
            if (cellValue1 != null) {
                maxWidth1 = Math.max(jTable1.getCellRenderer(i, 1).
                        getTableCellRendererComponent(jTable1, cellValue1, false, false, i, 1).
                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth1);
            }
//            if (cellValue2 != null) {
//                maxWidth2 = Math.max(jTable1.getCellRenderer(i, 2).
//                        getTableCellRendererComponent(jTable1, cellValue2, false, false, i, 2).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth2);
//            }
//            if (cellValue3 != null) {
//                maxWidth3 = Math.max(jTable1.getCellRenderer(i, 3).
//                        getTableCellRendererComponent(jTable1, cellValue3, false, false, i, 3).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth3);
//            }
            if (cellValue4 != null) {
                maxWidth4 = Math.max(jTable1.getCellRenderer(i, 4).
                        getTableCellRendererComponent(jTable1, cellValue4, false, false, i, 4).
                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth4);
            }
//            if (cellValue5 != null) {
//                maxWidth5 = Math.max(jTable1.getCellRenderer(i, 5).
//                        getTableCellRendererComponent(jTable1, cellValue5, false, false, i, 5).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth5);
//            }
//            if (cellValue6 != null) {
//                maxWidth6 = Math.max(jTable1.getCellRenderer(i, 6).
//                        getTableCellRendererComponent(jTable1, cellValue6, false, false, i, 6).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth6);
//            }
//            if (cellValue7 != null) {
//                maxWidth7 = Math.max(jTable1.getCellRenderer(i, 7).
//                        getTableCellRendererComponent(jTable1, cellValue7, false, false, i, 7).
//                        getPreferredSize().width + jTable1.getIntercellSpacing().width, maxWidth7);
//            }
        }
//------------------------------------------------------------------------------
//          jTable1.getColumnModel().getColumn(0).setPreferredWidth(maxWidth0);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(maxWidth1);
//        jTable1.getColumnModel().getColumn(2).setPreferredWidth(maxWidth2);
//        jTable1.getColumnModel().getColumn(3).setPreferredWidth(maxWidth3);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(maxWidth4);
//        jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);

        //"Código", "Título", "Exemplar", "Cód. Leitor", "Nome do Leitor", "Data da Devolução"};
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
//        jTable1.getColumnModel().getColumn(1).setPreferredWidth(350);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
//        jTable1.getColumnModel().getColumn(4).setPreferredWidth(350);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
//        jTable1.getColumnModel().getColumn(6).setPreferredWidth(maxWidth6);
//------------------------------------------------------------------------------
        time = System.currentTimeMillis() - time;  // ms
        jTable1.getTableHeader().setReorderingAllowed(false);
        if (jTable1.getRowCount() == 0) {
            lblMensagem.setText("Nenhum empréstimo encontrado !");
        } else if (jTable1.getRowCount() == 1) {
            lblMensagem.setText(jTable1.getRowCount() + " empréstimo encontrado !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        } else if (jTable1.getRowCount() > 1) {
            lblMensagem.setText(jTable1.getRowCount() + " empréstimos encontrados !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        }

}//GEN-LAST:event_btnTodosActionPerformed

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased

        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código da Obra
                newFilter(0);
                break;
            case 1:
                //Título da Obra
                newFilter(1);
                break;
            case 2:
                //Código do Leitor
                newFilter(3);
                break;
            case 3:
                //Nome do Leitor
                newFilter(4);
                break;
        }

        if (jTable1.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(jTable1.getRowCount() + " registro(s) encontrado(s) !");
        }

    }//GEN-LAST:event_txtConsultaKeyReleased

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        if (cbFiltro.getSelectedIndex() == 0) {
            //Código da Obra
            txtConsulta.setDocument(new DocSomenteNumeros());
        } else if (cbFiltro.getSelectedIndex() == 1) {
            //Título da Obra
            txtConsulta.setDocument(new FixedLengthDocument(100));
        } else if (cbFiltro.getSelectedIndex() == 3) {
            //Código do leitor
            txtConsulta.setDocument(new FixedLengthDocument(100));
        } else if (cbFiltro.getSelectedIndex() == 4) {
            //Nome do Leitor
            txtConsulta.setDocument(new DocSomenteNumeros());
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            btnSalvarActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void txtConsultaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtConsultaFocusLost
        if (jTable1.getRowCount() > 0) {
            jTable1.requestFocus();
            jTable1.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_txtConsultaFocusLost

    private void txtDatadaDevolucaoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatadaDevolucaoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDatadaDevolucaoKeyTyped

    private void txtDatadaDevolucaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatadaDevolucaoKeyReleased
        switch (txtDatadaDevolucao.getText().trim().length()) {
            case 2:
                txtDatadaDevolucao.setText(txtDatadaDevolucao.getText().trim() + "/");
                break;
            case 5:
                txtDatadaDevolucao.setText(txtDatadaDevolucao.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtDatadaDevolucaoKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JTextField txtDatadaDevolucao;
    // End of variables declaration//GEN-END:variables
}
