/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadAutores.java
 *
 * Created on 16/09/2010, 22:49:54
 */
package login;

import Classes2.Autores;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Classes.DB;
import Classes.FixedLengthDocument;
import Classes.Funcoes;
import Classes.Query;
import java.sql.ResultSet;

/**
 *
 * @author MARK
 */
public class ifrmCadNiveis extends javax.swing.JInternalFrame {

    private boolean novoCadastro;
    private DB banco2;
    private DefaultTableModel modelo;
    private ArrayList vetor;
    private Autores autor;
    private Funcoes f;

    /** Creates new form ifrmCadAutores */
    public ifrmCadNiveis() {

        initComponents();
        txtNome.setDocument(new FixedLengthDocument(40));
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        bgPermissoesGerais = new javax.swing.ButtonGroup();
        bglogin = new javax.swing.ButtonGroup();
        bgcadastros = new javax.swing.ButtonGroup();
        bgrelatorios = new javax.swing.ButtonGroup();
        bgconfiguracoes = new javax.swing.ButtonGroup();
        bgMov = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jpPermissoes1 = new javax.swing.JPanel();
        jpLogin = new javax.swing.JPanel();
        chkLoginCadLogin = new javax.swing.JCheckBox();
        chkLoginCadNivel = new javax.swing.JCheckBox();
        rdLoginMarcarTodos = new javax.swing.JRadioButton();
        rdLoginDesmarcarTodos = new javax.swing.JRadioButton();
        jpCadastros = new javax.swing.JPanel();
        chkCadAcervo = new javax.swing.JCheckBox();
        chkCadAutores = new javax.swing.JCheckBox();
        chkCadBiblioteca = new javax.swing.JCheckBox();
        chkCadClasLiterarias = new javax.swing.JCheckBox();
        chkCadEditoras = new javax.swing.JCheckBox();
        chkCadGrupos = new javax.swing.JCheckBox();
        chkCadIdiomas = new javax.swing.JCheckBox();
        chkCadEstadodeConservacao = new javax.swing.JCheckBox();
        chkCadLeitores = new javax.swing.JCheckBox();
        chkCadFormacaoAcademica = new javax.swing.JCheckBox();
        chkCadNiveldeEscolaridade = new javax.swing.JCheckBox();
        chkCadTipodeFormacao = new javax.swing.JCheckBox();
        chkCadCidades = new javax.swing.JCheckBox();
        chkCadBairros = new javax.swing.JCheckBox();
        chkCadCategoriadoLeitor = new javax.swing.JCheckBox();
        rdCadastrosMarcarTodos = new javax.swing.JRadioButton();
        rdCadastrosDesmarcarTodos = new javax.swing.JRadioButton();
        jpPermissoes2 = new javax.swing.JPanel();
        jpMovimentacao = new javax.swing.JPanel();
        chkMovEmprestimos = new javax.swing.JCheckBox();
        chkMovDevolucoes = new javax.swing.JCheckBox();
        chkMovRenovacoes = new javax.swing.JCheckBox();
        chkMovReservas = new javax.swing.JCheckBox();
        rdMovMarcarTodos = new javax.swing.JRadioButton();
        rdMovDesmarcarTodos = new javax.swing.JRadioButton();
        jpRelatorios = new javax.swing.JPanel();
        chkRelAutores = new javax.swing.JCheckBox();
        chkRelClasLiterarias = new javax.swing.JCheckBox();
        chkRelEditoras = new javax.swing.JCheckBox();
        chkRelGrupos = new javax.swing.JCheckBox();
        chkRelLeitores = new javax.swing.JCheckBox();
        chkRelLeituras = new javax.swing.JCheckBox();
        chkRelEmprestimos = new javax.swing.JCheckBox();
        chkRelTitulosMaisLidos = new javax.swing.JCheckBox();
        chkRelCarteirinhadoLeitor = new javax.swing.JCheckBox();
        chkRelEtiquetasdasObras1 = new javax.swing.JCheckBox();
        chkRelObrasdoAcervo = new javax.swing.JCheckBox();
        chkRelTitulosMaisEmprestados = new javax.swing.JCheckBox();
        rdRelMarcarTodos = new javax.swing.JRadioButton();
        rdRelDesmarcarTodos = new javax.swing.JRadioButton();
        jpPermissoes3 = new javax.swing.JPanel();
        jpConfiguracoes = new javax.swing.JPanel();
        chkConfConfiguracoesGerais = new javax.swing.JCheckBox();
        chkConfBackup = new javax.swing.JCheckBox();
        chkConfRestaurarBackup = new javax.swing.JCheckBox();
        chkConfMudarAparencia = new javax.swing.JCheckBox();
        chkConfImagemdeFundo = new javax.swing.JCheckBox();
        rdConfMarcarTodos = new javax.swing.JRadioButton();
        rdConfDesmarcarTodos = new javax.swing.JRadioButton();
        jpAjuda = new javax.swing.JPanel();
        chkAjConteudo = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        rdAsc = new javax.swing.JRadioButton();
        rdDesc = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro de Níveis e Permissões");
        setMinimumSize(new java.awt.Dimension(650, 550));
        setNormalBounds(new java.awt.Rectangle(0, 0, 690, 542));
        setPreferredSize(new java.awt.Dimension(650, 550));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAdicionar.setToolTipText("Adicionar");
        btnAdicionar.setFocusable(false);
        btnAdicionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionar.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdicionar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Editar.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Cancelar.png"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCancelar);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setToolTipText("Salvar");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvar);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluir.setToolTipText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExcluir);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(675, 477));

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        jLabel2.setText("Nível");

        txtNome.setDisabledTextColor(java.awt.Color.black);

        jLabel1.setText("Código:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(258, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(391, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Principal", jPanel1);

        jpLogin.setBorder(javax.swing.BorderFactory.createTitledBorder("Login"));

        chkLoginCadLogin.setText("Cadastrar Login");

        chkLoginCadNivel.setText("Cadastrar Nível e Permissões do Usuário");

        bglogin.add(rdLoginMarcarTodos);
        rdLoginMarcarTodos.setText("Marcar Todos");
        rdLoginMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdLoginMarcarTodosActionPerformed(evt);
            }
        });

        bglogin.add(rdLoginDesmarcarTodos);
        rdLoginDesmarcarTodos.setText("Desmarcar Todos");
        rdLoginDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdLoginDesmarcarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpLoginLayout = new javax.swing.GroupLayout(jpLogin);
        jpLogin.setLayout(jpLoginLayout);
        jpLoginLayout.setHorizontalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkLoginCadLogin)
                    .addComponent(rdLoginMarcarTodos))
                .addGap(18, 18, 18)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdLoginDesmarcarTodos)
                    .addComponent(chkLoginCadNivel))
                .addContainerGap(313, Short.MAX_VALUE))
        );
        jpLoginLayout.setVerticalGroup(
            jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLoginCadLogin)
                    .addComponent(chkLoginCadNivel))
                .addGap(18, 18, 18)
                .addGroup(jpLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdLoginMarcarTodos)
                    .addComponent(rdLoginDesmarcarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpCadastros.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastros"));

        chkCadAcervo.setText("Acervo da Biblioteca");

        chkCadAutores.setText("Autores");

        chkCadBiblioteca.setText("Biblioteca");

        chkCadClasLiterarias.setText("Classificações Literárias");

        chkCadEditoras.setText("Editoras");

        chkCadGrupos.setText("Grupos");

        chkCadIdiomas.setText("Idiomas");

        chkCadEstadodeConservacao.setText("Estado de Conservação");

        chkCadLeitores.setText("Leitores");

        chkCadFormacaoAcademica.setText("Formação Acadêmica");

        chkCadNiveldeEscolaridade.setText("Nível de Escolaridade");

        chkCadTipodeFormacao.setText("Tipo de Formação");

        chkCadCidades.setText("Cidades");

        chkCadBairros.setText("Bairros");

        chkCadCategoriadoLeitor.setText("Categoria do Leitor");

        bgcadastros.add(rdCadastrosMarcarTodos);
        rdCadastrosMarcarTodos.setText("Marcar Todos");
        rdCadastrosMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCadastrosMarcarTodosActionPerformed(evt);
            }
        });

        bgcadastros.add(rdCadastrosDesmarcarTodos);
        rdCadastrosDesmarcarTodos.setText("Desmarcar Todos");
        rdCadastrosDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCadastrosDesmarcarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCadastrosLayout = new javax.swing.GroupLayout(jpCadastros);
        jpCadastros.setLayout(jpCadastrosLayout);
        jpCadastrosLayout.setHorizontalGroup(
            jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkCadAcervo)
                    .addComponent(chkCadEditoras)
                    .addComponent(chkCadLeitores)
                    .addComponent(chkCadCidades)
                    .addComponent(rdCadastrosMarcarTodos))
                .addGap(18, 18, 18)
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCadastrosLayout.createSequentialGroup()
                        .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCadAutores)
                            .addComponent(chkCadGrupos)
                            .addComponent(chkCadFormacaoAcademica)
                            .addComponent(chkCadBairros))
                        .addGap(18, 18, 18)
                        .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpCadastrosLayout.createSequentialGroup()
                                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkCadBiblioteca)
                                    .addComponent(chkCadIdiomas)
                                    .addComponent(chkCadNiveldeEscolaridade))
                                .addGap(18, 18, 18)
                                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkCadClasLiterarias)
                                    .addComponent(chkCadEstadodeConservacao)
                                    .addComponent(chkCadTipodeFormacao)))
                            .addComponent(chkCadCategoriadoLeitor)))
                    .addComponent(rdCadastrosDesmarcarTodos))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jpCadastrosLayout.setVerticalGroup(
            jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCadAcervo)
                    .addComponent(chkCadAutores)
                    .addComponent(chkCadBiblioteca)
                    .addComponent(chkCadClasLiterarias))
                .addGap(18, 18, 18)
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCadEditoras)
                    .addComponent(chkCadGrupos)
                    .addComponent(chkCadIdiomas)
                    .addComponent(chkCadEstadodeConservacao))
                .addGap(18, 18, 18)
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCadLeitores)
                    .addComponent(chkCadFormacaoAcademica)
                    .addComponent(chkCadNiveldeEscolaridade)
                    .addComponent(chkCadTipodeFormacao))
                .addGap(18, 18, 18)
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCadCidades)
                    .addComponent(chkCadBairros)
                    .addComponent(chkCadCategoriadoLeitor))
                .addGap(18, 18, 18)
                .addGroup(jpCadastrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdCadastrosMarcarTodos)
                    .addComponent(rdCadastrosDesmarcarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpPermissoes1Layout = new javax.swing.GroupLayout(jpPermissoes1);
        jpPermissoes1.setLayout(jpPermissoes1Layout);
        jpPermissoes1Layout.setHorizontalGroup(
            jpPermissoes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpPermissoes1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPermissoes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpCadastros, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpLogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpPermissoes1Layout.setVerticalGroup(
            jpPermissoes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPermissoes1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpCadastros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Permissões 1", jpPermissoes1);

        jpMovimentacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimentação"));

        chkMovEmprestimos.setText("Empréstimos");

        chkMovDevolucoes.setText("Devoluções");

        chkMovRenovacoes.setText("Renovações");

        chkMovReservas.setText("Reservas");

        bgMov.add(rdMovMarcarTodos);
        rdMovMarcarTodos.setText("Marcar Todos");
        rdMovMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMovMarcarTodosActionPerformed(evt);
            }
        });

        bgMov.add(rdMovDesmarcarTodos);
        rdMovDesmarcarTodos.setText("Desmarcar Todos");
        rdMovDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdMovDesmarcarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMovimentacaoLayout = new javax.swing.GroupLayout(jpMovimentacao);
        jpMovimentacao.setLayout(jpMovimentacaoLayout);
        jpMovimentacaoLayout.setHorizontalGroup(
            jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimentacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMovEmprestimos)
                    .addComponent(rdMovMarcarTodos))
                .addGap(18, 18, 18)
                .addGroup(jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMovDevolucoes)
                    .addComponent(rdMovDesmarcarTodos))
                .addGap(18, 18, 18)
                .addComponent(chkMovRenovacoes)
                .addGap(18, 18, 18)
                .addComponent(chkMovReservas)
                .addContainerGap(241, Short.MAX_VALUE))
        );
        jpMovimentacaoLayout.setVerticalGroup(
            jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimentacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMovEmprestimos)
                    .addComponent(chkMovDevolucoes)
                    .addComponent(chkMovRenovacoes)
                    .addComponent(chkMovReservas))
                .addGap(18, 18, 18)
                .addGroup(jpMovimentacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdMovMarcarTodos)
                    .addComponent(rdMovDesmarcarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpRelatorios.setBorder(javax.swing.BorderFactory.createTitledBorder("Relatórios"));

        chkRelAutores.setText("Autores");

        chkRelClasLiterarias.setText("Classificações Literárias");

        chkRelEditoras.setText("Editoras");

        chkRelGrupos.setText("Grupos");

        chkRelLeitores.setText("Leitores");

        chkRelLeituras.setText("Leituras");

        chkRelEmprestimos.setText("Empréstimos");

        chkRelTitulosMaisLidos.setText("Títulos Mais Lidos");

        chkRelCarteirinhadoLeitor.setText("Carteirinha do Leitor");

        chkRelEtiquetasdasObras1.setText("Etiquetas das Obras 1");

        chkRelObrasdoAcervo.setText("Obras do Acervo");

        chkRelTitulosMaisEmprestados.setText("Títulos Mais Emprestados");

        bgrelatorios.add(rdRelMarcarTodos);
        rdRelMarcarTodos.setText("Marcar Todos");
        rdRelMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdRelMarcarTodosActionPerformed(evt);
            }
        });

        bgrelatorios.add(rdRelDesmarcarTodos);
        rdRelDesmarcarTodos.setText("Desmarcar Todos");
        rdRelDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdRelDesmarcarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRelatoriosLayout = new javax.swing.GroupLayout(jpRelatorios);
        jpRelatorios.setLayout(jpRelatoriosLayout);
        jpRelatoriosLayout.setHorizontalGroup(
            jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRelatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkRelAutores)
                    .addComponent(chkRelLeitores)
                    .addComponent(chkRelTitulosMaisEmprestados)
                    .addComponent(rdRelMarcarTodos))
                .addGap(18, 18, 18)
                .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRelatoriosLayout.createSequentialGroup()
                        .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRelClasLiterarias)
                            .addComponent(chkRelLeituras)
                            .addComponent(chkRelCarteirinhadoLeitor))
                        .addGap(18, 18, 18)
                        .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRelEditoras)
                            .addComponent(chkRelEmprestimos)
                            .addComponent(chkRelEtiquetasdasObras1))
                        .addGap(18, 18, 18)
                        .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRelGrupos)
                            .addComponent(chkRelTitulosMaisLidos)
                            .addComponent(chkRelObrasdoAcervo)))
                    .addComponent(rdRelDesmarcarTodos))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jpRelatoriosLayout.setVerticalGroup(
            jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRelatoriosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jpRelatoriosLayout.createSequentialGroup()
                            .addComponent(chkRelGrupos)
                            .addGap(18, 18, 18)
                            .addComponent(chkRelTitulosMaisLidos)
                            .addGap(18, 18, 18)
                            .addComponent(chkRelObrasdoAcervo))
                        .addGroup(jpRelatoriosLayout.createSequentialGroup()
                            .addComponent(chkRelEditoras)
                            .addGap(18, 18, 18)
                            .addComponent(chkRelEmprestimos)
                            .addGap(18, 18, 18)
                            .addComponent(chkRelEtiquetasdasObras1)))
                    .addGroup(jpRelatoriosLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(chkRelTitulosMaisEmprestados))
                    .addGroup(jpRelatoriosLayout.createSequentialGroup()
                        .addComponent(chkRelAutores)
                        .addGap(18, 18, 18)
                        .addComponent(chkRelLeitores))
                    .addGroup(jpRelatoriosLayout.createSequentialGroup()
                        .addComponent(chkRelClasLiterarias)
                        .addGap(18, 18, 18)
                        .addComponent(chkRelLeituras)
                        .addGap(18, 18, 18)
                        .addComponent(chkRelCarteirinhadoLeitor)))
                .addGap(18, 18, 18)
                .addGroup(jpRelatoriosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdRelMarcarTodos)
                    .addComponent(rdRelDesmarcarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpPermissoes2Layout = new javax.swing.GroupLayout(jpPermissoes2);
        jpPermissoes2.setLayout(jpPermissoes2Layout);
        jpPermissoes2Layout.setHorizontalGroup(
            jpPermissoes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPermissoes2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPermissoes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpMovimentacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpRelatorios, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpPermissoes2Layout.setVerticalGroup(
            jpPermissoes2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPermissoes2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpMovimentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpRelatorios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Permissões 2", jpPermissoes2);

        jpConfiguracoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações"));

        chkConfConfiguracoesGerais.setText("Configurações Gerais");

        chkConfBackup.setText("Backup");

        chkConfRestaurarBackup.setText("Restaurar Backup");

        chkConfMudarAparencia.setText("Mudar Aparência");

        chkConfImagemdeFundo.setText("Imagem de Fundo");

        bgconfiguracoes.add(rdConfMarcarTodos);
        rdConfMarcarTodos.setText("Marcar Todos");
        rdConfMarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdConfMarcarTodosActionPerformed(evt);
            }
        });

        bgconfiguracoes.add(rdConfDesmarcarTodos);
        rdConfDesmarcarTodos.setText("Desmarcar Todos");
        rdConfDesmarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdConfDesmarcarTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpConfiguracoesLayout = new javax.swing.GroupLayout(jpConfiguracoes);
        jpConfiguracoes.setLayout(jpConfiguracoesLayout);
        jpConfiguracoesLayout.setHorizontalGroup(
            jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfiguracoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkConfConfiguracoesGerais)
                    .addComponent(chkConfImagemdeFundo)
                    .addComponent(rdConfMarcarTodos))
                .addGap(18, 18, 18)
                .addGroup(jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdConfDesmarcarTodos)
                    .addComponent(chkConfBackup))
                .addGap(18, 18, 18)
                .addComponent(chkConfRestaurarBackup)
                .addGap(18, 18, 18)
                .addComponent(chkConfMudarAparencia)
                .addContainerGap(143, Short.MAX_VALUE))
        );
        jpConfiguracoesLayout.setVerticalGroup(
            jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfiguracoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkConfConfiguracoesGerais)
                    .addComponent(chkConfBackup)
                    .addComponent(chkConfRestaurarBackup)
                    .addComponent(chkConfMudarAparencia))
                .addGap(18, 18, 18)
                .addComponent(chkConfImagemdeFundo)
                .addGap(18, 18, 18)
                .addGroup(jpConfiguracoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdConfMarcarTodos)
                    .addComponent(rdConfDesmarcarTodos))
                .addContainerGap())
        );

        jpAjuda.setBorder(javax.swing.BorderFactory.createTitledBorder("Ajuda"));

        chkAjConteudo.setText("Conteúdo da Ajuda");

        javax.swing.GroupLayout jpAjudaLayout = new javax.swing.GroupLayout(jpAjuda);
        jpAjuda.setLayout(jpAjudaLayout);
        jpAjudaLayout.setHorizontalGroup(
            jpAjudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAjudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAjConteudo)
                .addContainerGap(532, Short.MAX_VALUE))
        );
        jpAjudaLayout.setVerticalGroup(
            jpAjudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAjudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAjConteudo)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpPermissoes3Layout = new javax.swing.GroupLayout(jpPermissoes3);
        jpPermissoes3.setLayout(jpPermissoes3Layout);
        jpPermissoes3Layout.setHorizontalGroup(
            jpPermissoes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPermissoes3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPermissoes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpConfiguracoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpAjuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpPermissoes3Layout.setVerticalGroup(
            jpPermissoes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPermissoes3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpConfiguracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpAjuda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Permissões 3", jpPermissoes3);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta por nome"));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionaRegistro)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarConsulta)
                    .addComponent(btnTodos)
                    .addComponent(btnSelecionaRegistro))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ordem:"));
        jPanel5.setPreferredSize(new java.awt.Dimension(663, 66));

        buttonGroup1.add(rdAsc);
        rdAsc.setSelected(true);
        rdAsc.setText("Ordem ascendente");

        buttonGroup1.add(rdDesc);
        rdDesc.setText("Ordem descendente");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdAsc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdDesc)
                .addContainerGap(413, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdAsc)
                    .addComponent(rdDesc))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros"));
        jPanel6.setPreferredSize(new java.awt.Dimension(609, 227));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consulta", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-710)/2, (screenSize.height-550)/2, 710, 550);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Botões
        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        txtNome.setEnabled(true);
        txtNome.setText("");
        f = new Funcoes();
        f.limparCampos(jpLogin);
        f.limparCampos(jpCadastros);
        f.limparCampos(jpRelatorios);
        f.limparCampos(jpMovimentacao);
        f.limparCampos(jpConfiguracoes);
        f.limparCampos(jpAjuda);
        txtNome.requestFocus();//Põe o foco no controle nome
        //=================================================

//        //cria um objeto MysqlDB apontando para o banco especificado.
//        DB banco = new DB();
//        banco.connect();
//        int max1 = -1;
//
//        //conecta ao banco
//        Query query1 = new Query(banco.conn);
//        //Cria um objeto do tipo query chamado query1 que recebe
//        //como argumento o  objeto banco.
//
//        try {
//            String sql = " SELECT MAX(Codigo)As Codigo FROM cadautores";
//            query1.open(sql); //executa uma sentença sql.
//            query1.next();
////            int i;
////            int r;
////            String max = null;
//            max1 = query1.rs.getInt(1);
//
//            //txtCodigo.setText((query1.fieldbyname("Codigo")));
////            i = Integer.parseInt(max);
////            r = i + 1;
////            int n = r;
//
//            banco.disconnect();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro:" + e.getMessage());
////        } finally {
//            try {
//                query1.rs.close();
//            } catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Erro resultset: " + ex.getMessage());
//            }
//        }
//
//        //String zeros = "00000";
//        //String numero = zeros + n;
//        //numero = numero.substring(numero.length() - 5);
//        //System.out.println(numero.substring(numero.length() - 5));
//
//        txtCodigo.setText(String.valueOf(max1 + 1));
        txtNome.setText("");
        txtCodigo.setText("");
        novoCadastro = true;

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        txtNome.setEnabled(true);

        novoCadastro = false;
}//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        btnAdicionar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        f = new Funcoes();
        f.limparCampos(jpLogin);
        f.limparCampos(jpCadastros);
        f.limparCampos(jpRelatorios);
        f.limparCampos(jpMovimentacao);
        f.limparCampos(jpConfiguracoes);
        f.limparCampos(jpAjuda);

        txtNome.setEnabled(false);
        //Limpa os controles ao cancelar
        txtCodigo.setText("");
        txtNome.setText("");
        novoCadastro = false;
}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        if (txtNome.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Nível !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            txtNome.requestFocus();
        } //Insert
        else if (novoCadastro == true) {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();
//==============================================================================
            PreparedStatement st = null;

            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//==============================================================================
            int idNivel = 0;
            //Variavel para verificar se foi executado o comando
            int ri = 0;
            //Insere usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "INSERT INTO niveis(nivel)VALUES(?) returning idnivel";
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setString(1, txtNome.getText().trim());
                //ID do nivel
                ResultSet rs = st1.executeQuery();
                //Retorna o código da tabela niveis
                if (rs.next()) {
                    idNivel = st1.getResultSet().getInt("idnivel");
                }
                //ri = st1.executeUpdate();
                ri = 1;
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            int ri2 = 0;
            if (ri > 0) {
                //----Insere as permissões na tabela de permissões

                PreparedStatement st2 = null;
                String sqlInsert2 = "INSERT INTO permissoes(cadlogin1,cadniveis,cadacervo,"
                        + "cadautores,cadbiblioteca,cadclasliteraria,cadeditora,cadgrupo,cadidioma,"
                        + "cadestadodeconservacao,cadleitor,cadformacaoacademica,cadniveldeescolaridade,"
                        + "cadtipodeformacao,cadcidade,cadbairro,cadcategoriadoleitor,movemprestimo,movdevolucao,movrenovacao,"
                        + "movreserva,relautores,relclasliterarias,releditoras,relgrupos,relleitores,"
                        + "relleituras,relemprestimos,reltitulosmaislidos,reltitulosmaisemprestados,relcarteirinhadoleitor,"
                        + "reletiquetasdasobras1,relobrasdoacervo,confconfiguracoesgerais,confbackup,"
                        + "confrestaurarbackup,confmudaraparencia,confimagemdefundodomenu,ajconteudo,nivel_idnivel)"
                        + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                try {
                    st2 = banco.conn.prepareStatement(sqlInsert2);
                    //Login---------------------------------------------------------
                    if (chkLoginCadLogin.isSelected() == true) {
                        st2.setBoolean(1, true);
                    } else {
                        st2.setBoolean(1, false);
                    }
                    if (chkLoginCadNivel.isSelected() == true) {
                        st2.setBoolean(2, true);
                    } else {
                        st2.setBoolean(2, false);
                    }
                    //--Cadastros---------------------------------------------------
                    if (chkCadAcervo.isSelected() == true) {
                        st2.setBoolean(3, true);
                    } else {
                        st2.setBoolean(3, false);
                    }
                    if (chkCadAutores.isSelected() == true) {
                        st2.setBoolean(4, true);
                    } else {
                        st2.setBoolean(4, false);
                    }
                    if (chkCadBiblioteca.isSelected() == true) {
                        st2.setBoolean(5, true);
                    } else {
                        st2.setBoolean(5, false);
                    }
                    if (chkCadClasLiterarias.isSelected() == true) {
                        st2.setBoolean(6, true);
                    } else {
                        st2.setBoolean(6, false);
                    }
                    if (chkCadEditoras.isSelected() == true) {
                        st2.setBoolean(7, true);
                    } else {
                        st2.setBoolean(7, false);
                    }
                    if (chkCadGrupos.isSelected() == true) {
                        st2.setBoolean(8, true);
                    } else {
                        st2.setBoolean(8, false);
                    }
                    if (chkCadIdiomas.isSelected() == true) {
                        st2.setBoolean(9, true);
                    } else {
                        st2.setBoolean(9, false);
                    }
                    if (chkCadEstadodeConservacao.isSelected() == true) {
                        st2.setBoolean(10, true);
                    } else {
                        st2.setBoolean(10, false);
                    }
                    if (chkCadLeitores.isSelected() == true) {
                        st2.setBoolean(11, true);
                    } else {
                        st2.setBoolean(11, false);
                    }
                    if (chkCadFormacaoAcademica.isSelected() == true) {
                        st2.setBoolean(12, true);
                    } else {
                        st2.setBoolean(12, false);
                    }
                    if (chkCadNiveldeEscolaridade.isSelected() == true) {
                        st2.setBoolean(13, true);
                    } else {
                        st2.setBoolean(13, false);
                    }
                    if (chkCadTipodeFormacao.isSelected() == true) {
                        st2.setBoolean(14, true);
                    } else {
                        st2.setBoolean(14, false);
                    }
                    if (chkCadCidades.isSelected() == true) {
                        st2.setBoolean(15, true);
                    } else {
                        st2.setBoolean(15, false);
                    }
                    if (chkCadBairros.isSelected() == true) {
                        st2.setBoolean(16, true);
                    } else {
                        st2.setBoolean(16, false);
                    }
                    if (chkCadCategoriadoLeitor.isSelected() == true) {
                        st2.setBoolean(17, true);
                    } else {
                        st2.setBoolean(17, false);
                    }
                    //Movimentação--------------------------------------------------
                    if (chkMovEmprestimos.isSelected() == true) {
                        st2.setBoolean(18, true);
                    } else {
                        st2.setBoolean(18, false);
                    }
                    if (chkMovDevolucoes.isSelected() == true) {
                        st2.setBoolean(19, true);
                    } else {
                        st2.setBoolean(19, false);
                    }
                    if (chkMovRenovacoes.isSelected() == true) {
                        st2.setBoolean(20, true);
                    } else {
                        st2.setBoolean(20, false);
                    }
                    if (chkMovReservas.isSelected() == true) {
                        st2.setBoolean(21, true);
                    } else {
                        st2.setBoolean(21, false);
                    }
                    //Relatórios----------------------------------------------------
                    if (chkRelAutores.isSelected() == true) {
                        st2.setBoolean(22, true);
                    } else {
                        st2.setBoolean(22, false);
                    }
                    if (chkRelClasLiterarias.isSelected() == true) {
                        st2.setBoolean(23, true);
                    } else {
                        st2.setBoolean(23, false);
                    }
                    if (chkRelEditoras.isSelected() == true) {
                        st2.setBoolean(24, true);
                    } else {
                        st2.setBoolean(24, false);
                    }
                    if (chkRelGrupos.isSelected() == true) {
                        st2.setBoolean(25, true);
                    } else {
                        st2.setBoolean(25, false);
                    }
                    if (chkRelLeitores.isSelected() == true) {
                        st2.setBoolean(26, true);
                    } else {
                        st2.setBoolean(26, false);
                    }
                    if (chkRelLeituras.isSelected() == true) {
                        st2.setBoolean(27, true);
                    } else {
                        st2.setBoolean(27, false);
                    }
                    if (chkRelEmprestimos.isSelected() == true) {
                        st2.setBoolean(28, true);
                    } else {
                        st2.setBoolean(28, false);
                    }
                    if (chkRelTitulosMaisLidos.isSelected() == true) {
                        st2.setBoolean(29, true);
                    } else {
                        st2.setBoolean(29, false);
                    }
                    if (chkRelTitulosMaisEmprestados.isSelected() == true) {
                        st2.setBoolean(30, true);
                    } else {
                        st2.setBoolean(30, false);
                    }
                    if (chkRelCarteirinhadoLeitor.isSelected() == true) {
                        st2.setBoolean(31, true);
                    } else {
                        st2.setBoolean(31, false);
                    }
                    if (chkRelEtiquetasdasObras1.isSelected() == true) {
                        st2.setBoolean(32, true);
                    } else {
                        st2.setBoolean(32, false);
                    }
                    if (chkRelObrasdoAcervo.isSelected() == true) {
                        st2.setBoolean(33, true);
                    } else {
                        st2.setBoolean(33, false);
                    }
                    //----Configurações
                    if (chkConfConfiguracoesGerais.isSelected() == true) {
                        st2.setBoolean(34, true);
                    } else {
                        st2.setBoolean(34, false);
                    }
                    if (chkConfBackup.isSelected() == true) {
                        st2.setBoolean(35, true);
                    } else {
                        st2.setBoolean(35, false);
                    }
                    if (chkConfRestaurarBackup.isSelected() == true) {
                        st2.setBoolean(36, true);
                    } else {
                        st2.setBoolean(36, false);
                    }
                    if (chkConfMudarAparencia.isSelected() == true) {
                        st2.setBoolean(37, true);
                    } else {
                        st2.setBoolean(37, false);
                    }
                    if (chkConfImagemdeFundo.isSelected() == true) {
                        st2.setBoolean(38, true);
                    } else {
                        st2.setBoolean(38, false);
                    }
                    //---Ajuda
                    if (chkAjConteudo.isSelected() == true) {
                        st2.setBoolean(39, true);
                    } else {
                        st2.setBoolean(39, false);
                    }
                    //Código do nível retornado
                    st2.setInt(40, idNivel);
                    ri2 = st2.executeUpdate();
                    st2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }

            if (ri > 0 && ri2 > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, "Registro adicionado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                f = new Funcoes();
                f.limparCampos(jpLogin);
                f.limparCampos(jpCadastros);
                f.limparCampos(jpRelatorios);
                f.limparCampos(jpMovimentacao);
                f.limparCampos(jpConfiguracoes);
                f.limparCampos(jpAjuda);
                txtNome.setEnabled(false);
                txtCodigo.setText("");
                txtNome.setText("");
                btnTodosActionPerformed(evt);
            } else {
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Erro comando ROLLBACK \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            banco.disconnect();
        } //senão Update
        else if (novoCadastro == false) {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            banco.connect();
            //conecta ao banco
            int ru = 0;
            //Atualiza usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "UPDATE niveis SET nivel=? WHERE idnivel=?";
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setString(1, txtNome.getText().trim());
                st1.setInt(2, Integer.parseInt(txtCodigo.getText().trim()));
                ru = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            int ru2 = 0;
            //Atualiza a tabela de permissões
            if (ru2 > 0) {
                PreparedStatement st2 = null;
                String sqlInsert2 = "UPDATE permissoes SET cadlogin1=?,cadniveis=?,cadacervo=?,"
                        + "cadautores=?,cadbiblioteca=?,cadclasliteraria=?,cadeditora=?,cadgrupo=?,cadidioma=?,"
                        + "cadestadodeconservacao=?,cadleitor=?,cadformacaoacademica=?,cadniveldeescolaridade=?,"
                        + "cadtipodeformacao=?,cadcidade=?,cadbairro=?,cadcategoriadoleitor=?,movemprestimo=?,movdevolucao=?,movrenovacao=?,"
                        + "movreserva=?,relautores=?,relclasliterarias=?,releditoras=?,relgrupos=?,relleitores=?,"
                        + "relleituras=?,relemprestimos=?,reltitulosmaislidos=?,reltitulosmaisemprestados=?,relcarteirinhadoleitor=?,"
                        + "reletiquetasdasobras1=?,relobrasdoacervo=?,confconfiguracoesgerais=?,confbackup=?,"
                        + "confrestaurarbackup=?,confmudaraparencia=?,confimagemdefundodomenu=?,ajconteudo=?"
                        + " WHERE nivel_idnivel=" + Integer.parseInt(txtCodigo.getText().trim());
                try {
                    st2 = banco.conn.prepareStatement(sqlInsert2);
                    //Login---------------------------------------------------------
                    if (chkLoginCadLogin.isSelected() == true) {
                        st2.setBoolean(1, true);
                    } else {
                        st2.setBoolean(1, false);
                    }
                    if (chkLoginCadNivel.isSelected() == true) {
                        st2.setBoolean(2, true);
                    } else {
                        st2.setBoolean(2, false);
                    }
                    //--Cadastros---------------------------------------------------
                    if (chkCadAcervo.isSelected() == true) {
                        st2.setBoolean(3, true);
                    } else {
                        st2.setBoolean(3, false);
                    }
                    if (chkCadAutores.isSelected() == true) {
                        st2.setBoolean(4, true);
                    } else {
                        st2.setBoolean(4, false);
                    }
                    if (chkCadBiblioteca.isSelected() == true) {
                        st2.setBoolean(5, true);
                    } else {
                        st2.setBoolean(5, false);
                    }
                    if (chkCadClasLiterarias.isSelected() == true) {
                        st2.setBoolean(6, true);
                    } else {
                        st2.setBoolean(6, false);
                    }
                    if (chkCadEditoras.isSelected() == true) {
                        st2.setBoolean(7, true);
                    } else {
                        st2.setBoolean(7, false);
                    }
                    if (chkCadGrupos.isSelected() == true) {
                        st2.setBoolean(8, true);
                    } else {
                        st2.setBoolean(8, false);
                    }
                    if (chkCadIdiomas.isSelected() == true) {
                        st2.setBoolean(9, true);
                    } else {
                        st2.setBoolean(9, false);
                    }
                    if (chkCadEstadodeConservacao.isSelected() == true) {
                        st2.setBoolean(10, true);
                    } else {
                        st2.setBoolean(10, false);
                    }
                    if (chkCadLeitores.isSelected() == true) {
                        st2.setBoolean(11, true);
                    } else {
                        st2.setBoolean(11, false);
                    }
                    if (chkCadFormacaoAcademica.isSelected() == true) {
                        st2.setBoolean(12, true);
                    } else {
                        st2.setBoolean(12, false);
                    }
                    if (chkCadNiveldeEscolaridade.isSelected() == true) {
                        st2.setBoolean(13, true);
                    } else {
                        st2.setBoolean(13, false);
                    }
                    if (chkCadTipodeFormacao.isSelected() == true) {
                        st2.setBoolean(14, true);
                    } else {
                        st2.setBoolean(14, false);
                    }
                    if (chkCadCidades.isSelected() == true) {
                        st2.setBoolean(15, true);
                    } else {
                        st2.setBoolean(15, false);
                    }
                    if (chkCadBairros.isSelected() == true) {
                        st2.setBoolean(16, true);
                    } else {
                        st2.setBoolean(16, false);
                    }
                    if (chkCadCategoriadoLeitor.isSelected() == true) {
                        st2.setBoolean(17, true);
                    } else {
                        st2.setBoolean(17, false);
                    }
                    //Movimentação--------------------------------------------------
                    if (chkMovEmprestimos.isSelected() == true) {
                        st2.setBoolean(18, true);
                    } else {
                        st2.setBoolean(18, false);
                    }
                    if (chkMovDevolucoes.isSelected() == true) {
                        st2.setBoolean(19, true);
                    } else {
                        st2.setBoolean(19, false);
                    }
                    if (chkMovRenovacoes.isSelected() == true) {
                        st2.setBoolean(20, true);
                    } else {
                        st2.setBoolean(20, false);
                    }
                    if (chkMovReservas.isSelected() == true) {
                        st2.setBoolean(21, true);
                    } else {
                        st2.setBoolean(21, false);
                    }
                    //Relatórios----------------------------------------------------
                    if (chkRelAutores.isSelected() == true) {
                        st2.setBoolean(22, true);
                    } else {
                        st2.setBoolean(22, false);
                    }
                    if (chkRelClasLiterarias.isSelected() == true) {
                        st2.setBoolean(23, true);
                    } else {
                        st2.setBoolean(23, false);
                    }
                    if (chkRelEditoras.isSelected() == true) {
                        st2.setBoolean(24, true);
                    } else {
                        st2.setBoolean(24, false);
                    }
                    if (chkRelGrupos.isSelected() == true) {
                        st2.setBoolean(25, true);
                    } else {
                        st2.setBoolean(25, false);
                    }
                    if (chkRelLeitores.isSelected() == true) {
                        st2.setBoolean(26, true);
                    } else {
                        st2.setBoolean(26, false);
                    }
                    if (chkRelLeituras.isSelected() == true) {
                        st2.setBoolean(27, true);
                    } else {
                        st2.setBoolean(27, false);
                    }
                    if (chkRelEmprestimos.isSelected() == true) {
                        st2.setBoolean(28, true);
                    } else {
                        st2.setBoolean(28, false);
                    }
                    if (chkRelTitulosMaisLidos.isSelected() == true) {
                        st2.setBoolean(29, true);
                    } else {
                        st2.setBoolean(29, false);
                    }
                    if (chkRelTitulosMaisEmprestados.isSelected() == true) {
                        st2.setBoolean(30, true);
                    } else {
                        st2.setBoolean(30, false);
                    }
                    if (chkRelCarteirinhadoLeitor.isSelected() == true) {
                        st2.setBoolean(31, true);
                    } else {
                        st2.setBoolean(31, false);
                    }
                    if (chkRelEtiquetasdasObras1.isSelected() == true) {
                        st2.setBoolean(32, true);
                    } else {
                        st2.setBoolean(32, false);
                    }
                    if (chkRelObrasdoAcervo.isSelected() == true) {
                        st2.setBoolean(33, true);
                    } else {
                        st2.setBoolean(33, false);
                    }
                    //----Configurações
                    if (chkConfConfiguracoesGerais.isSelected() == true) {
                        st2.setBoolean(34, true);
                    } else {
                        st2.setBoolean(34, false);
                    }
                    if (chkConfBackup.isSelected() == true) {
                        st2.setBoolean(35, true);
                    } else {
                        st2.setBoolean(35, false);
                    }
                    if (chkConfRestaurarBackup.isSelected() == true) {
                        st2.setBoolean(36, true);
                    } else {
                        st2.setBoolean(36, false);
                    }
                    if (chkConfMudarAparencia.isSelected() == true) {
                        st2.setBoolean(37, true);
                    } else {
                        st2.setBoolean(37, false);
                    }
                    if (chkConfImagemdeFundo.isSelected() == true) {
                        st2.setBoolean(38, true);
                    } else {
                        st2.setBoolean(38, false);
                    }
                    //---Ajuda
                    if (chkAjConteudo.isSelected() == true) {
                        st2.setBoolean(39, true);
                    } else {
                        st2.setBoolean(39, false);
                    }

                    ru2 = st2.executeUpdate();
                    st2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
            if (ru > 0 && ru2 > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                    banco.disconnect();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, "Registro atualizado "
                        + "com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                f = new Funcoes();
                f.limparCampos(jpLogin);
                f.limparCampos(jpCadastros);
                f.limparCampos(jpRelatorios);
                f.limparCampos(jpMovimentacao);
                f.limparCampos(jpConfiguracoes);
                f.limparCampos(jpAjuda);

                txtNome.setEnabled(false);
                txtCodigo.setText("");
                txtNome.setText("");
                btnTodosActionPerformed(evt);
            } else {
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();
                    banco.disconnect();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Erro comando ROLLBACK \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
        }


}//GEN-LAST:event_btnSalvarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);

        txtNome.setEnabled(false);
        txtCodigo.setVisible(false);
        jLabel1.setVisible(false);
        jpPermissoes1.setEnabled(false);
        jpPermissoes2.setEnabled(false);

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (txtNome.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nenhum registro a ser excluído !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            txtNome.requestFocus();
        } //Insert
        else {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            int ri = 0;
            //Insere usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "DELETE FROM niveis WHERE idnivel=? ";
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                //st1.setString(2, txtNome.getText().trim());
                ri = st1.executeUpdate();
                st1.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            banco.disconnect();
            if (ri > 0) {
                JOptionPane.showMessageDialog(null, "Registro excluído"
                        + " com sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                txtNome.setEnabled(false);
                txtCodigo.setText("");
                txtNome.setText("");
                btnTodosActionPerformed(evt);
                f = new Funcoes();
                f.limparCampos(jpLogin);
                f.limparCampos(jpCadastros);
                f.limparCampos(jpRelatorios);
                f.limparCampos(jpMovimentacao);
                f.limparCampos(jpConfiguracoes);
                f.limparCampos(jpAjuda);
            }
        }

    }//GEN-LAST:event_btnExcluirActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            btnSelecionaRegistroActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed
        int i;
        if (jTable1.getRowCount() > 0 && jTable1.getSelectedRow() > -1) {
            for (i = 0; i < vetor.size(); i++) {
                if (((Autores) vetor.get(i)).getAutor().equals(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0))) {
                    txtCodigo.setText(String.valueOf(((Autores) vetor.get(i)).getCodigo()));
                }
            }

            DB banco = new DB();
            banco.connect();
            Query query2 = new Query(banco.conn);
            query2.open("SELECT * FROM permissoes WHERE nivel_idnivel=" + Integer.parseInt(txtCodigo.getText().trim()));
            boolean cadlogin1 = false,
                    cadniveis = false,
                    cadcategoriadoleitor = false,
                    cadacervo = false,
                    cadautores = false,
                    cadbiblioteca = false,
                    cadclasliteraria = false,
                    cadeditora = false,
                    cadgrupo = false,
                    cadidioma = false,
                    cadestadodeconservacao = false,
                    cadleitor = false,
                    cadformacaoacademica = false,
                    cadniveldeescolaridade = false,
                    cadtipodeformacao = false,
                    cadcidade = false,
                    cadbairro = false,
                    movemprestimo = false,
                    movdevolucao = false,
                    movrenovacao = false,
                    movreserva = false,
                    relautores = false,
                    relclasliterarias = false,
                    releditoras = false,
                    relgrupos = false,
                    relleitores = false,
                    relleituras = false,
                    relemprestimos = false,
                    reltitulosmaislidos = false,
                    reltitulosmaisemprestados = false,
                    relcarteirinhadoleitor = false,
                    reletiquetasdasobras1 = false,
                    relobrasdoacervo = false,
                    confconfiguracoesgerais = false,
                    confbackup = false,
                    confrestaurarbackup = false,
                    confmudaraparencia = false,
                    confimagemdefundodomenu = false,
                    ajconteudo = false;
            while (query2.next()) {
                try {
                    cadlogin1 = query2.rs.getBoolean("cadlogin1");
                    cadniveis = query2.rs.getBoolean("cadniveis");
                    cadacervo = query2.rs.getBoolean("cadacervo");
                    cadautores = query2.rs.getBoolean("cadautores");
                    cadbiblioteca = query2.rs.getBoolean("cadbiblioteca");
                    cadclasliteraria = query2.rs.getBoolean("cadclasliteraria");
                    cadeditora = query2.rs.getBoolean("cadeditora");
                    cadgrupo = query2.rs.getBoolean("cadgrupo");
                    cadidioma = query2.rs.getBoolean("cadidioma");
                    cadestadodeconservacao = query2.rs.getBoolean("cadestadodeconservacao");
                    cadleitor = query2.rs.getBoolean("cadleitor");
                    cadformacaoacademica = query2.rs.getBoolean("cadformacaoacademica");
                    cadniveldeescolaridade = query2.rs.getBoolean("cadniveldeescolaridade");
                    cadtipodeformacao = query2.rs.getBoolean("cadtipodeformacao");
                    cadcidade = query2.rs.getBoolean("cadcidade");
                    cadbairro = query2.rs.getBoolean("cadbairro");
                    cadcategoriadoleitor = query2.rs.getBoolean("cadcategoriadoleitor");
                    movemprestimo = query2.rs.getBoolean("movemprestimo");
                    movdevolucao = query2.rs.getBoolean("movdevolucao");
                    movrenovacao = query2.rs.getBoolean("movrenovacao");
                    movreserva = query2.rs.getBoolean("movreserva");
                    relautores = query2.rs.getBoolean("relautores");
                    relclasliterarias = query2.rs.getBoolean("relclasliterarias");
                    releditoras = query2.rs.getBoolean("releditoras");
                    relgrupos = query2.rs.getBoolean("relgrupos");
                    relleitores = query2.rs.getBoolean("relleitores");
                    relleituras = query2.rs.getBoolean("relleituras");
                    relemprestimos = query2.rs.getBoolean("relemprestimos");
                    reltitulosmaislidos = query2.rs.getBoolean("reltitulosmaislidos");
                    reltitulosmaisemprestados = query2.rs.getBoolean("reltitulosmaisemprestados");
                    relcarteirinhadoleitor = query2.rs.getBoolean("relcarteirinhadoleitor");
                    reletiquetasdasobras1 = query2.rs.getBoolean("reletiquetasdasobras1");
                    relobrasdoacervo = query2.rs.getBoolean("relobrasdoacervo");
                    confconfiguracoesgerais = query2.rs.getBoolean("confconfiguracoesgerais");
                    confbackup = query2.rs.getBoolean("confbackup");
                    confrestaurarbackup = query2.rs.getBoolean("confrestaurarbackup");
                    confmudaraparencia = query2.rs.getBoolean("confmudaraparencia");
                    confimagemdefundodomenu = query2.rs.getBoolean("confimagemdefundodomenu");
                    ajconteudo = query2.rs.getBoolean("ajconteudo");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
            banco.disconnect();
            txtNome.setText(String.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0)));
            //---Marca os checkbox----------------------------------------------
            chkLoginCadLogin.setSelected(cadlogin1);
            chkLoginCadNivel.setSelected(cadniveis);
            chkCadAcervo.setSelected(cadacervo);
            chkCadAutores.setSelected(cadautores);
            chkCadBiblioteca.setSelected(cadbiblioteca);
            chkCadClasLiterarias.setSelected(cadclasliteraria);
            chkCadEditoras.setSelected(cadeditora);
            chkCadGrupos.setSelected(cadgrupo);
            chkCadIdiomas.setSelected(cadidioma);
            chkCadEstadodeConservacao.setSelected(cadestadodeconservacao);
            chkCadLeitores.setSelected(cadleitor);
            chkCadFormacaoAcademica.setSelected(cadformacaoacademica);
            chkCadNiveldeEscolaridade.setSelected(cadniveldeescolaridade);
            chkCadTipodeFormacao.setSelected(cadtipodeformacao);
            chkCadCidades.setSelected(cadcidade);
            chkCadBairros.setSelected(cadbairro);
            chkCadCategoriadoLeitor.setSelected(cadcategoriadoleitor);
            chkMovEmprestimos.setSelected(movemprestimo);
            chkMovDevolucoes.setSelected(movdevolucao);
            chkMovRenovacoes.setSelected(movrenovacao);
            chkMovReservas.setSelected(movreserva);
            chkRelAutores.setSelected(relautores);
            chkRelClasLiterarias.setSelected(relclasliterarias);
            chkRelEditoras.setSelected(releditoras);
            chkRelGrupos.setSelected(relgrupos);
            chkRelLeitores.setSelected(relleitores);
            chkRelLeituras.setSelected(relleituras);
            chkRelEmprestimos.setSelected(relemprestimos);
            chkRelTitulosMaisLidos.setSelected(reltitulosmaislidos);
            chkRelTitulosMaisEmprestados.setSelected(reltitulosmaisemprestados);
            chkRelCarteirinhadoLeitor.setSelected(relcarteirinhadoleitor);
            chkRelEtiquetasdasObras1.setSelected(reletiquetasdasobras1);
            chkRelObrasdoAcervo.setSelected(relobrasdoacervo);
            chkConfConfiguracoesGerais.setSelected(confconfiguracoesgerais);
            chkConfBackup.setSelected(confbackup);
            chkConfRestaurarBackup.setSelected(confrestaurarbackup);
            chkConfMudarAparencia.setSelected(confmudaraparencia);
            chkConfImagemdeFundo.setSelected(confimagemdefundodomenu);
            chkAjConteudo.setSelected(ajconteudo);
            //------------------------------------------------------------------
            btnEditar.setEnabled(true);
            btnExcluir.setEnabled(true);
            btnAdicionar.setEnabled(true);
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            jTabbedPane1.setSelectedIndex(0);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o registro que deseja editar ou excluir!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        }
}//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed

        long time = System.currentTimeMillis();

        banco2 = new DB();
        banco2.connect();
        Query carregaArray = new Query(banco2.conn);

        if (rdAsc.isSelected() == true) {
            //ILIKE é case insensitive para postgresql somente
            carregaArray.open("SELECT idnivel,nivel FROM niveis "
                    + " ORDER BY nivel ASC");
        } else {
            //ILIKE é case insensitive para postgresql somente
            carregaArray.open("SELECT idnivel,nivel FROM niveis "
                    + " ORDER BY nivel DESC");
        }
        String cod, gp;
        vetor = new ArrayList();
        autor = new Autores();

        while (carregaArray.next()) {
            cod = carregaArray.fieldbyname("idnivel");
            gp = carregaArray.fieldbyname("nivel");

            autor.setCodigo(Integer.parseInt(cod));
            autor.setAutor(gp);
            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Autores(autor.getCodigo(), autor.getAutor()));

        }

        String[] colunas = {"Nível"};
        //Deixa nulo o vetor de dados
        modelo = new DefaultTableModel(null, colunas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};

        for (int x = 0; x < vetor.size(); x++) {
            modelo.addRow(dados);
            //modelo.setValueAt(((Grupos) vetor.get(x)).getCodigo(), x, 0);
            modelo.setValueAt(((Autores) vetor.get(x)).getAutor(), x, 0);
        }
        jTable1.setModel(modelo);
        banco2.disconnect();
        //=============================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
}//GEN-LAST:event_btnTodosActionPerformed

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased

        long time = System.currentTimeMillis();
        banco2 = new DB();
        banco2.connect();
        Query carregaArray = new Query(banco2.conn);

        if (rdAsc.isSelected() == true) {
            //ILIKE é case insensitive para postgresql somente
            carregaArray.open("SELECT idnivel,nivel FROM niveis WHERE sem_acento(nivel) ILIKE'" + txtConsulta.getText().trim() + "%'"
                    + " ORDER BY nivel ASC");
        } else {
            //ILIKE é case insensitive para postgresql somente
            carregaArray.open("SELECT idnivel,nivel FROM niveis WHERE sem_acento(nivel) ILIKE'" + txtConsulta.getText().trim() + "%'"
                    + " ORDER BY nivel DESC");
        }
        String cod, gp;
        vetor = new ArrayList();
        autor = new Autores();

        while (carregaArray.next()) {
            cod = carregaArray.fieldbyname("idnivel");
            gp = carregaArray.fieldbyname("nivel");


            autor.setCodigo(Integer.parseInt(cod));
            autor.setAutor(gp);
            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Autores(autor.getCodigo(), autor.getAutor()));

        }

        String[] colunas = {"Nível"};
        //Deixa nulo o vetor de dados
        modelo = new DefaultTableModel(null, colunas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};

        for (int x = 0; x < vetor.size(); x++) {

            modelo.addRow(dados);
            //modelo.setValueAt(((Grupos) vetor.get(x)).getCodigo(), x, 0);
            modelo.setValueAt(((Autores) vetor.get(x)).getAutor(), x, 0);

        }

        jTable1.setModel(modelo);
        banco2.disconnect();

        //=============================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
        }

    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
        //txtCodigo.setText("");
        //Volta para a tab principal
        jTabbedPane1.setSelectedIndex(0);
}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    private void rdLoginMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdLoginMarcarTodosActionPerformed
        chkLoginCadLogin.setSelected(true);
        chkLoginCadNivel.setSelected(true);
    }//GEN-LAST:event_rdLoginMarcarTodosActionPerformed

    private void rdLoginDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdLoginDesmarcarTodosActionPerformed
        chkLoginCadLogin.setSelected(false);
        chkLoginCadNivel.setSelected(false);
    }//GEN-LAST:event_rdLoginDesmarcarTodosActionPerformed

    private void rdCadastrosMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCadastrosMarcarTodosActionPerformed
        chkCadAcervo.setSelected(true);
        chkCadAutores.setSelected(true);
        chkCadBiblioteca.setSelected(true);
        chkCadClasLiterarias.setSelected(true);
        chkCadEditoras.setSelected(true);
        chkCadGrupos.setSelected(true);
        chkCadIdiomas.setSelected(true);
        chkCadEstadodeConservacao.setSelected(true);
        chkCadLeitores.setSelected(true);
        chkCadFormacaoAcademica.setSelected(true);
        chkCadNiveldeEscolaridade.setSelected(true);
        chkCadTipodeFormacao.setSelected(true);
        chkCadCidades.setSelected(true);
        chkCadBairros.setSelected(true);
        chkCadCategoriadoLeitor.setSelected(true);
    }//GEN-LAST:event_rdCadastrosMarcarTodosActionPerformed

    private void rdCadastrosDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCadastrosDesmarcarTodosActionPerformed
        chkCadAcervo.setSelected(false);
        chkCadAutores.setSelected(false);
        chkCadBiblioteca.setSelected(false);
        chkCadClasLiterarias.setSelected(false);
        chkCadEditoras.setSelected(false);
        chkCadGrupos.setSelected(false);
        chkCadIdiomas.setSelected(false);
        chkCadEstadodeConservacao.setSelected(false);
        chkCadLeitores.setSelected(false);
        chkCadFormacaoAcademica.setSelected(false);
        chkCadNiveldeEscolaridade.setSelected(false);
        chkCadTipodeFormacao.setSelected(false);
        chkCadCidades.setSelected(false);
        chkCadBairros.setSelected(false);
        chkCadCategoriadoLeitor.setSelected(false);
    }//GEN-LAST:event_rdCadastrosDesmarcarTodosActionPerformed

    private void rdMovMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMovMarcarTodosActionPerformed
        chkMovEmprestimos.setSelected(true);
        chkMovDevolucoes.setSelected(true);
        chkMovRenovacoes.setSelected(true);
        chkMovReservas.setSelected(true);
    }//GEN-LAST:event_rdMovMarcarTodosActionPerformed

    private void rdMovDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdMovDesmarcarTodosActionPerformed
        chkMovEmprestimos.setSelected(false);
        chkMovDevolucoes.setSelected(false);
        chkMovRenovacoes.setSelected(false);
        chkMovReservas.setSelected(false);
    }//GEN-LAST:event_rdMovDesmarcarTodosActionPerformed

    private void rdRelMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdRelMarcarTodosActionPerformed
        chkRelAutores.setSelected(true);
        chkRelClasLiterarias.setSelected(true);
        chkRelEditoras.setSelected(true);
        chkRelGrupos.setSelected(true);
        chkRelLeitores.setSelected(true);
        chkRelLeituras.setSelected(true);
        chkRelEmprestimos.setSelected(true);
        chkRelTitulosMaisLidos.setSelected(true);
        chkRelTitulosMaisEmprestados.setSelected(true);
        chkRelCarteirinhadoLeitor.setSelected(true);
        chkRelEtiquetasdasObras1.setSelected(true);
        chkRelObrasdoAcervo.setSelected(true);
    }//GEN-LAST:event_rdRelMarcarTodosActionPerformed

    private void rdRelDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdRelDesmarcarTodosActionPerformed
        chkRelAutores.setSelected(false);
        chkRelClasLiterarias.setSelected(false);
        chkRelEditoras.setSelected(false);
        chkRelGrupos.setSelected(false);
        chkRelLeitores.setSelected(false);
        chkRelLeituras.setSelected(false);
        chkRelEmprestimos.setSelected(false);
        chkRelTitulosMaisLidos.setSelected(false);
        chkRelTitulosMaisEmprestados.setSelected(false);
        chkRelCarteirinhadoLeitor.setSelected(false);
        chkRelEtiquetasdasObras1.setSelected(false);
        chkRelObrasdoAcervo.setSelected(false);
    }//GEN-LAST:event_rdRelDesmarcarTodosActionPerformed

    private void rdConfMarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdConfMarcarTodosActionPerformed
        chkConfConfiguracoesGerais.setSelected(true);
        chkConfBackup.setSelected(true);
        chkConfRestaurarBackup.setSelected(true);
        chkConfMudarAparencia.setSelected(true);
        chkConfImagemdeFundo.setSelected(true);
    }//GEN-LAST:event_rdConfMarcarTodosActionPerformed

    private void rdConfDesmarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdConfDesmarcarTodosActionPerformed
        chkConfConfiguracoesGerais.setSelected(false);
        chkConfBackup.setSelected(false);
        chkConfRestaurarBackup.setSelected(false);
        chkConfMudarAparencia.setSelected(false);
        chkConfImagemdeFundo.setSelected(false);
    }//GEN-LAST:event_rdConfDesmarcarTodosActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        btnSelecionaRegistroActionPerformed(null);
        evt.consume();
    }//GEN-LAST:event_jTable1KeyPressed
// Check for key codes. if (evt.getKeyCode() == KeyEvent.VK_HOME) { process(evt.getKeyCode()); }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMov;
    private javax.swing.ButtonGroup bgPermissoesGerais;
    private javax.swing.ButtonGroup bgcadastros;
    private javax.swing.ButtonGroup bgconfiguracoes;
    private javax.swing.ButtonGroup bglogin;
    private javax.swing.ButtonGroup bgrelatorios;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAjConteudo;
    private javax.swing.JCheckBox chkCadAcervo;
    private javax.swing.JCheckBox chkCadAutores;
    private javax.swing.JCheckBox chkCadBairros;
    private javax.swing.JCheckBox chkCadBiblioteca;
    private javax.swing.JCheckBox chkCadCategoriadoLeitor;
    private javax.swing.JCheckBox chkCadCidades;
    private javax.swing.JCheckBox chkCadClasLiterarias;
    private javax.swing.JCheckBox chkCadEditoras;
    private javax.swing.JCheckBox chkCadEstadodeConservacao;
    private javax.swing.JCheckBox chkCadFormacaoAcademica;
    private javax.swing.JCheckBox chkCadGrupos;
    private javax.swing.JCheckBox chkCadIdiomas;
    private javax.swing.JCheckBox chkCadLeitores;
    private javax.swing.JCheckBox chkCadNiveldeEscolaridade;
    private javax.swing.JCheckBox chkCadTipodeFormacao;
    private javax.swing.JCheckBox chkConfBackup;
    private javax.swing.JCheckBox chkConfConfiguracoesGerais;
    private javax.swing.JCheckBox chkConfImagemdeFundo;
    private javax.swing.JCheckBox chkConfMudarAparencia;
    private javax.swing.JCheckBox chkConfRestaurarBackup;
    private javax.swing.JCheckBox chkLoginCadLogin;
    private javax.swing.JCheckBox chkLoginCadNivel;
    private javax.swing.JCheckBox chkMovDevolucoes;
    private javax.swing.JCheckBox chkMovEmprestimos;
    private javax.swing.JCheckBox chkMovRenovacoes;
    private javax.swing.JCheckBox chkMovReservas;
    private javax.swing.JCheckBox chkRelAutores;
    private javax.swing.JCheckBox chkRelCarteirinhadoLeitor;
    private javax.swing.JCheckBox chkRelClasLiterarias;
    private javax.swing.JCheckBox chkRelEditoras;
    private javax.swing.JCheckBox chkRelEmprestimos;
    private javax.swing.JCheckBox chkRelEtiquetasdasObras1;
    private javax.swing.JCheckBox chkRelGrupos;
    private javax.swing.JCheckBox chkRelLeitores;
    private javax.swing.JCheckBox chkRelLeituras;
    private javax.swing.JCheckBox chkRelObrasdoAcervo;
    private javax.swing.JCheckBox chkRelTitulosMaisEmprestados;
    private javax.swing.JCheckBox chkRelTitulosMaisLidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel jpAjuda;
    private javax.swing.JPanel jpCadastros;
    private javax.swing.JPanel jpConfiguracoes;
    private javax.swing.JPanel jpLogin;
    private javax.swing.JPanel jpMovimentacao;
    private javax.swing.JPanel jpPermissoes1;
    private javax.swing.JPanel jpPermissoes2;
    private javax.swing.JPanel jpPermissoes3;
    private javax.swing.JPanel jpRelatorios;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JRadioButton rdAsc;
    private javax.swing.JRadioButton rdCadastrosDesmarcarTodos;
    private javax.swing.JRadioButton rdCadastrosMarcarTodos;
    private javax.swing.JRadioButton rdConfDesmarcarTodos;
    private javax.swing.JRadioButton rdConfMarcarTodos;
    private javax.swing.JRadioButton rdDesc;
    private javax.swing.JRadioButton rdLoginDesmarcarTodos;
    private javax.swing.JRadioButton rdLoginMarcarTodos;
    private javax.swing.JRadioButton rdMovDesmarcarTodos;
    private javax.swing.JRadioButton rdMovMarcarTodos;
    private javax.swing.JRadioButton rdRelDesmarcarTodos;
    private javax.swing.JRadioButton rdRelMarcarTodos;
    public javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtConsulta;
    public javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
