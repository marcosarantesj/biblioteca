/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TesteCalculoDataRenovacao.java
 *
 * Created on 25/01/2011, 15:29:12
 */
package Testes;

import Classes2.Renovacoes;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Query;

/**
 *
 * @author MARK
 */
public class TesteCalculoDataRenovacao extends javax.swing.JFrame {

    private DB banco2;
    private ArrayList vetor;
    private Renovacoes renovacao;

    /** Creates new form TesteCalculoDataRenovacao */
    public TesteCalculoDataRenovacao() {
        initComponents();
        jTable1.setAutoCreateRowSorter(true);

        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnTodos = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        txtDatadaDevolucao = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnTodos.setFont(new java.awt.Font("Tahoma", 0, 12));
        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setText("Renovar");
        btnSalvar.setToolTipText("Realizar Renovação");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtConsulta, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(btnTodos)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSalvar)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(txtConsulta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(btnTodos, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(btnSalvar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros"));
        jPanel6.setPreferredSize(new java.awt.Dimension(609, 227));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código / Código de Barras do Leitor", "Nome do Leitor", "Título do Ítem", "Código de Barras do Ítem", "Código do Ítem" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        try {
            txtDatadaDevolucao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDatadaDevolucao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDatadaDevolucaoKeyReleased(evt);
            }
        });

        jLabel1.setText("Data da Devolução:");

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(cbFiltro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 210, Short.MAX_VALUE)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtDatadaDevolucao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbFiltro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtDatadaDevolucao, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblMensagem, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblMensagem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(2, 2, 2)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed

        long time = System.currentTimeMillis();

        banco2 = new DB();
        banco2.connect();
        Query carregaArray = new Query(banco2.conn);


        //ILIKE é case insensitive para postgresql somente
        carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor,"
                + " l.nomedoleitor,e.datadaentrega FROM emprestimos e,"
                + " cadleitores l,cadlivros c"
                + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo"
                + " ORDER BY e.codleitor ASC");


        String codlivro, codigodebarras, titulo, codleitor, nomedoleitor, datadaentrega;
        vetor = new ArrayList();
        renovacao = new Renovacoes();

        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        //Pega a data no formato do banco e armazena na variável
        java.sql.Date dtJDBC = null;

        while (carregaArray.next()) {
            codlivro = carregaArray.fieldbyname("codlivro");
            codigodebarras = carregaArray.fieldbyname("codigodebarras");
            titulo = carregaArray.fieldbyname("titulo");
            codleitor = carregaArray.fieldbyname("codleitor");
            nomedoleitor = carregaArray.fieldbyname("nomedoleitor");
            datadaentrega = carregaArray.fieldbyname("datadaentrega");

            //Converte a string em DataJDBC no formato do banco de dados
            dtJDBC = java.sql.Date.valueOf(datadaentrega);

            renovacao.setCodlivro(Integer.parseInt(codlivro));
            renovacao.setCodigodebarras(codigodebarras);
            renovacao.setTitulo(titulo);
            renovacao.setCodleitor(Integer.parseInt(codleitor));
            renovacao.setNomedoleitor(nomedoleitor);
            renovacao.setDatadaentrega(df.format(dtJDBC));

            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Renovacoes(renovacao.getCodlivro(), renovacao.getCodigodebarras(),
                    renovacao.getTitulo(), renovacao.getCodleitor(), renovacao.getNomedoleitor(),
                    renovacao.getDatadaentrega()));
        }



        String[] coluna = {"Cod.Ítem", "Código de Barras", "Título", "Cód. Leitor", "Nome do Leitor", "Data da Devolução"};
        DefaultTableModel modelo = new DefaultTableModel(null, coluna) {
            //Não permitir a edição das células

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};

        for (int x = 0; x < vetor.size(); x++) {

            modelo.addRow(dados);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodlivro(), x, 0);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodigodebarras(), x, 1);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getTitulo(), x, 2);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodleitor(), x, 3);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getNomedoleitor(), x, 4);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getDatadaentrega(), x, 5);
        }

        jTable1.setModel(modelo);
        banco2.disconnect();


        //=============================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
            btnSalvar.setEnabled(false);
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
            jTable1.setRowSelectionInterval(0, 0);
            btnSalvar.setEnabled(true);
        }
}//GEN-LAST:event_btnTodosActionPerformed

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased
        long time = System.currentTimeMillis();

        banco2 = new DB();
        banco2.connect();
        Query carregaArray = new Query(banco2.conn);


        switch (cbFiltro.getSelectedIndex()) {
            case 0: //ILIKE é case insensitive para postgresql somente
                if (!txtConsulta.getText().trim().equals("")) {
                    carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor,"
                            + " l.nomedoleitor,e.datadaentrega FROM emprestimos e,"
                            + " cadleitores l,cadlivros c"
                            + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo"
                            + " AND e.codleitor=" + Integer.parseInt(txtConsulta.getText().trim())
                            + " ORDER BY l.nomedoleitor ASC");
                    break;
                }

            case 1: //ILIKE é case insensitive para postgresql somente
                carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor, "
                        + " l.nomedoleitor,e.datadaentrega FROM emprestimos e, "
                        + " cadleitores l,cadlivros c "
                        + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo "
                        + " AND sem_acento(l.nomedoleitor) ILIKE'" + txtConsulta.getText() + "%'"
                        + " ORDER BY l.nomedoleitor ASC");
                break;
            case 2: //ILIKE é case insensitive para postgresql somente
                carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor,"
                        + " l.nomedoleitor,e.datadaentrega FROM emprestimos e,"
                        + " cadleitores l,cadlivros c"
                        + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo "
                        + " AND sem_acento(c.titulo) ILIKE'" + txtConsulta.getText() + "%'"
                        + " ORDER BY l.nomedoleitor ASC");
                break;
            case 3: //ILIKE é case insensitive para postgresql somente
                carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor,"
                        + " l.nomedoleitor,e.datadaentrega FROM emprestimos e,"
                        + " cadleitores l,cadlivros c"
                        + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo "
                        + " AND sem_acento(c.codigodebarras) ILIKE'" + txtConsulta.getText() + "%'"
                        + " ORDER BY l.nomedoleitor ASC");
                break;
            case 4: //ILIKE é case insensitive para postgresql somente
                if (!txtConsulta.getText().trim().equals("")) {
                    carregaArray.open("SELECT e.codlivro,c.codigodebarras,c.titulo,e.codleitor,"
                            + " l.nomedoleitor,e.datadaentrega FROM emprestimos e,"
                            + " cadleitores l,cadlivros c"
                            + " WHERE e.codleitor=l.codigo AND e.codlivro=c.codigo "
                            + " AND c.codigo=" + Integer.parseInt(txtConsulta.getText().trim())
                            + " ORDER BY l.nomedoleitor ASC");
                    break;
                }

        }

        String codlivro, codigodebarras, titulo, codleitor, nomedoleitor, datadaentrega;
        vetor = new ArrayList();
        renovacao = new Renovacoes();

        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        //Pega a data no formato do banco e armazena na variável
        java.sql.Date dtJDBC = null;

        while (carregaArray.next()) {
            codlivro = carregaArray.fieldbyname("codlivro");
            codigodebarras = carregaArray.fieldbyname("codigodebarras");
            titulo = carregaArray.fieldbyname("titulo");
            codleitor = carregaArray.fieldbyname("codleitor");
            nomedoleitor = carregaArray.fieldbyname("nomedoleitor");
            datadaentrega = carregaArray.fieldbyname("datadaentrega");

            //Converte a string em DataJDBC no formato do banco de dados
            dtJDBC = java.sql.Date.valueOf(datadaentrega);

            renovacao.setCodlivro(Integer.parseInt(codlivro));
            renovacao.setCodigodebarras(codigodebarras);
            renovacao.setTitulo(titulo);
            renovacao.setCodleitor(Integer.parseInt(codleitor));
            renovacao.setNomedoleitor(nomedoleitor);
            renovacao.setDatadaentrega(df.format(dtJDBC));

            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Renovacoes(renovacao.getCodlivro(), renovacao.getCodigodebarras(),
                    renovacao.getTitulo(), renovacao.getCodleitor(), renovacao.getNomedoleitor(),
                    renovacao.getDatadaentrega()));
        }



        String[] coluna = {"Cod.Ítem", "Código de Barras", "Título", "Cód. Leitor", "Nome do Leitor", "Data da Devolução"};
        DefaultTableModel modelo = new DefaultTableModel(null, coluna) {
            //Não permitir a edição das células

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};

        for (int x = 0; x < vetor.size(); x++) {

            modelo.addRow(dados);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodlivro(), x, 0);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodigodebarras(), x, 1);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getTitulo(), x, 2);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getCodleitor(), x, 3);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getNomedoleitor(), x, 4);
            modelo.setValueAt(((Renovacoes) vetor.get(x)).getDatadaentrega(), x, 5);

        }

        jTable1.setModel(modelo);
        banco2.disconnect();


        //=============================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
            btnSalvar.setEnabled(false);
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
            jTable1.setRowSelectionInterval(0, 0);
            btnSalvar.setEnabled(true);
        }
}//GEN-LAST:event_txtConsultaKeyReleased

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        int ru = 0;
        DB banco = new DB();
        if (txtDatadaDevolucao.getValue() == null || txtDatadaDevolucao.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite a data de Devolução !", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
            txtDatadaDevolucao.requestFocus();
        } else if ((txtDatadaDevolucao.getValue() != null)) {
            //-------------------------------------------------------------------------
            //Update===================================================

            //cria um objeto DB apontando para o banco especificado.

            banco.connect();
            //conecta ao banco

            //Atualiza usando formatacao JAVA
            //Primeiro atualiza a tabela pai
            //situacao=E(emprestado),L(lido no local),R(renovado)
            PreparedStatement st1 = null;
            String sqlUpdate = "UPDATE emprestimos SET datadaentrega=? "
                    + " WHERE codlivro=?";
            try {
                st1 = banco.conn.prepareStatement(sqlUpdate);
                //Formata a data
                DateFormat dtF = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dtP = dtF.parse(txtDatadaDevolucao.getText().trim());
                java.sql.Date dataJDBC = new java.sql.Date(dtP.getTime());

                st1.setDate(1, dataJDBC);
                st1.setInt(2, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
                ru = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }

        //Verifica se foi executado e atualiza na tabela cadlivros
        int ruLivros = 0;
        if (ru > 0) {
            PreparedStatement st2 = null;
            String sqlUpdate = "UPDATE cadlivros SET disponibilidade=? "
                    + " WHERE codigo=?";
            try {
                st2 = banco.conn.prepareStatement(sqlUpdate);

                //Renovado
                st2.setString(1, "RN");
                st2.setInt(2, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()));
                ruLivros = st2.executeUpdate();
                st2.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
        if (ruLivros > 0) {
            JOptionPane.showMessageDialog(null, "Renovação realizada"
                    + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            btnTodosActionPerformed(evt);
            banco.disconnect();
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (jTable1.isRowSelected(jTable1.getSelectedRow())) {
            DB banco = new DB();
            banco.connect();
            Query query1 = new Query(banco.conn);
            query1.open("SELECT diasdarenovacao FROM configuracoes");
            String d = null;
            while (query1.next()) {
                d = query1.fieldbyname("diasdarenovacao");
            }
            int dias = Integer.parseInt(d);
            System.out.println(dias);
            String dataSTR = jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString();

            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            java.util.Date data = null;
            try {
                data = df.parse(dataSTR);
            } catch (ParseException ex) {
                Logger.getLogger(TesteCalculoDataRenovacao.class.getName()).log(Level.SEVERE, null, ex);
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(data);
            cal.add(Calendar.DATE, dias);
//            Date c=cal.getTime();

            txtDatadaDevolucao.setText(df.format(cal.getTime()));
           
        }
        if (evt.getClickCount() == 2) {
            java.awt.event.ActionEvent evt2 = null;
            btnSalvarActionPerformed(evt2);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            java.awt.event.ActionEvent evt2 = null;
            btnSalvarActionPerformed(evt2);

        }
}//GEN-LAST:event_jTable1KeyPressed

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        if (cbFiltro.getSelectedIndex() == 0) {
            txtConsulta.setDocument(new DocSomenteNumeros());
        } else if (cbFiltro.getSelectedIndex() == 1) {
            txtConsulta.setDocument(new FixedLengthDocument(100));
        } else if (cbFiltro.getSelectedIndex() == 2) {
            txtConsulta.setDocument(new FixedLengthDocument(100));
        } else if (cbFiltro.getSelectedIndex() == 3) {
            txtConsulta.setDocument(new FixedLengthDocument(100));
        } else if (cbFiltro.getSelectedIndex() == 4) {
            txtConsulta.setDocument(new DocSomenteNumeros());
        }
}//GEN-LAST:event_cbFiltroActionPerformed

    private void txtDatadaDevolucaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatadaDevolucaoKeyReleased
        if (txtDatadaDevolucao.getText().trim().length() == 10) {
            //           btnSalvar.requestFocus();
            jTable1.requestFocus();
        }
        //        System.out.println(txtDatadaDevolucao.getText().trim().length());
}//GEN-LAST:event_txtDatadaDevolucaoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TesteCalculoDataRenovacao().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnTodos;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JFormattedTextField txtDatadaDevolucao;
    // End of variables declaration//GEN-END:variables
}
