/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jdfrmConsultaAutores.java
 *
 * Created on 14/01/2011, 18:09:07
 */
package FormsConsulta;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Funcoes;
import Classes.Query;

/**
 *
 * @author MARK
 */
public class jdfrmConsultaAcervodeObrasReserva extends javax.swing.JDialog {

    private String coditem;
    public boolean okSelecionado;
    //Se n receber verdadeiro, então o campo será alterado de acordo com o
    //form emprestimos e reservas
    //o codigo sql
    public boolean emp;
    //--------------------------------------------------------------------------
    //tabela pai
    private TableRowSorter<MkTableModel> sorter;
    private MkTableModel modelObra;
    private ArrayList dados;
    private String[] colunas = new String[]{"###","Título", "Classificação Literária",
        "Grupo", "Editora", "Local"};
    private Query q;
    //--------------------------------------------------------------------------
    //tabela filho
    private TableRowSorter<MkTableModel2> sorter2;
    private MkTableModel2 modelExemplares;
    private ArrayList dadosdaObra;
    private String[] colunas2 = new String[]{"Código","Exemplar", "Estado", "Status", "Disponibilidade"};
    //--------------------------------------------------------------------------
    private DB banco;

    /** Creates new form jdfrmConsultaAutores */
    public jdfrmConsultaAcervodeObrasReserva(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblObras = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        btnMaxJanela = new javax.swing.JButton();
        btnRestaurarJanela = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblExemplares = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta Acervo de Obras-Reservas");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        jLabel1.setText("DISPONÍVEL");

        jPanel1.setBackground(new java.awt.Color(255, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );

        jLabel2.setText("EMPRESTADO/LENDO");

        jLabel3.setText("RESERVADO");

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 23, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtConsulta, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(btnTodos)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnCancelarConsulta)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSelecionaRegistro)
                        .add(170, 170, 170)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(txtConsulta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnCancelarConsulta)
                        .add(btnTodos)
                        .add(btnSelecionaRegistro)
                        .add(jLabel1)
                        .add(jLabel2)
                        .add(jLabel3))
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Obras"));
        jPanel8.setPreferredSize(new java.awt.Dimension(609, 227));

        jScrollPane3.setAutoscrolls(true);

        tblObras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblObras.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblObras.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblObras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblObrasMouseClicked(evt);
            }
        });
        tblObras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblObrasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblObrasKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblObras);

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro:"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código", "Título", "Classificação Literária", "Grupo", "Editora" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(cbFiltro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(419, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(cbFiltro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Janela"));

        btnMaxJanela.setText("Maximizar");
        btnMaxJanela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaxJanelaActionPerformed(evt);
            }
        });

        btnRestaurarJanela.setText("Restaurar");
        btnRestaurarJanela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarJanelaActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(btnMaxJanela)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnRestaurarJanela)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .add(5, 5, 5)
                .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnMaxJanela)
                    .add(btnRestaurarJanela))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Exemplares da Obra"));
        jPanel11.setPreferredSize(new java.awt.Dimension(609, 227));

        jScrollPane4.setAutoscrolls(true);

        tblExemplares.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblExemplares.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblExemplares.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblExemplares.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblExemplaresMouseClicked(evt);
            }
        });
        tblExemplares.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblExemplaresKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tblExemplares);

        org.jdesktop.layout.GroupLayout jPanel11Layout = new org.jdesktop.layout.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(lblMensagem, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblMensagem, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
        okSelecionado = false;
        this.dispose();

}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter(int coluna, String texto) {
        RowFilter<MkTableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter("(?i)" + texto, coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    //Filtra os exemplares
    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter2(int coluna, String texto) {
        RowFilter<MkTableModel2, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter(texto, coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter2.setRowFilter(rf);
    }

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased
        long time = System.currentTimeMillis();
//------------------------------------------------------------------------------
//        if (tblExemplares.getRowCount() > 0) {
//            modelExemplares.removeAllRows();
//        }
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
        //Se for verdadeiro,então vai receber mais um criterio no sql
        //por causa dos forms de empréstimos e reservas
//        String campo = null;
//        if (n == true) {
            switch (cbFiltro.getSelectedIndex()) {
                case 0:
                    //Código do exemplar
                    newFilter2(0, txtConsulta.getText());
                    break;
                case 1:
                    //Título
                    newFilter(1, txtConsulta.getText());
                    break;
                case 2:
                    //Clas.Literária
                    newFilter(2, txtConsulta.getText());
                    break;
                case 3:
                    //Grupo
                    newFilter(3, txtConsulta.getText());
                    break;
                case 4:
                    //Editora
                    newFilter(4, txtConsulta.getText());
                    break;
            }
//        } else {
//            switch (cbFiltro.getSelectedIndex()) {
//                case 0:
//                    //Código do exemplar
//                    newFilter2(0, txtConsulta.getText().trim());
//                    break;
//                case 1:
//                    //Título
//                    newFilter(1, txtConsulta.getText());
//                    break;
//                case 2:
//                    //Clas.Literária
//                    newFilter(2, txtConsulta.getText());
//                    break;
//                case 3:
//                    //Grupo
//                    newFilter(3, txtConsulta.getText());
//                    break;
//                case 4:
//                    //Editora
//                    newFilter(4, txtConsulta.getText());
//                    break;
//            }
//        }
//------------------------------------------------------------------------------
        time = System.currentTimeMillis() - time;  // ms

        if (tblObras.getRowCount() == 0) {
            lblMensagem.setText("Nenhuma obra encontrada !");
        } else if (tblObras.getRowCount() == 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obra encontrada !"
                    + " Consulta em tempo real");
        } else if (tblObras.getRowCount() > 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obras encontradas !"
                    + " Consulta em tempo real");
        }


    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed

        long time = System.currentTimeMillis();
//------------------------------------------------------------------------------
        if (tblExemplares.getRowCount() > 0) {
            modelExemplares.removeAllRows();
        }
//------------------------------------------------------------------------------
        dados = new ArrayList();
        banco = new DB();
        banco.connect();
        q = new Query(banco.conn);
        String sql = "SELECT c.codigo,c.data_2,c.hora,"
                + "cl.clasliteraria,e.editora,g.grupo,c.titulo,c.subtitulo,"
                + "c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,c.local_2,"
                + "i.idioma,cdd,cutter,cdu,tombo,resumo"
                + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,"
                + "cadgrupos g,cadidiomas i"
                + " WHERE"
                + " c.codclas_literaria=cl.codigo AND"
                + " c.codeditora=e.codigo AND"
                + " c.codgrupo=g.codigo AND"
                + " c.codidioma=i.codigo"
                + " ORDER BY c.titulo ASC;";

        q.open(sql);
        String codigo, data_2, hora, titulo, clasliteraria, grupo, editora,
                subtitulo, edicao, volume, datapublic = null, mes, ano, npaginas,
                local_2, idioma, cdd, cutter, cdu, tombo, resumo;
        //Inicializa as variáveis para conversão
        java.sql.Date data_2JDBC = null;
//        java.sql.Time hr = null;
        java.sql.Date datapublicJDBC = null;
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat dfH = new SimpleDateFormat("HH:mm:ss");
        try {
            while (q.next()) {
                codigo = q.fieldbyname("codigo");
                data_2 = q.fieldbyname("data_2");
                hora = q.fieldbyname("hora");
                titulo = q.fieldbyname("titulo");
                clasliteraria = q.fieldbyname("clasliteraria");
                grupo = q.fieldbyname("grupo");
                editora = q.fieldbyname("editora");
                subtitulo = q.fieldbyname("subtitulo");
                edicao = q.fieldbyname("edicao");
                volume = q.fieldbyname("volume");
                datapublicJDBC = q.rs.getDate("datapublic");
                mes = q.fieldbyname("mes");
                ano = q.fieldbyname("ano");
                npaginas = q.fieldbyname("npaginas");
                local_2 = q.fieldbyname("local_2");
                idioma = q.fieldbyname("idioma");
                cdd = q.fieldbyname("cdd");
                cutter = q.fieldbyname("cutter");
                cdu = q.fieldbyname("cdu");
                tombo = q.fieldbyname("tombo");
                resumo = q.fieldbyname("resumo");

                //Converte as datas e hora
                data_2JDBC = java.sql.Date.valueOf(data_2);
                data_2 = df.format(data_2JDBC);
//                hr = java.sql.Time.valueOf(hora);
//                hora = dfH.format(hr);
                if (datapublicJDBC != null) {
                    datapublic = df.format(datapublicJDBC);
                } else {
                    datapublic = "";
                }
                dados.add(new String[]{
                            codigo,titulo, clasliteraria, grupo, editora,
                            local_2, 
                            data_2, hora, subtitulo, edicao, volume, datapublic, mes,
                            ano, npaginas, idioma, cdd, cutter, cdu, tombo, resumo
                        });

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar em livros \n"
                    + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
        banco.disconnect();

        boolean[] edicao1 = {false, false, false, false, false,false};
        modelObra = new MkTableModel(dados, colunas, edicao1);
        tblObras.setModel(modelObra);
        sorter = new TableRowSorter<MkTableModel>(modelObra);
        tblObras.setRowSorter(sorter);
        //"Codigo", "Data" ,"Hora", "Título", "Classificação Literária",
        //"Grupo", "Editora", "Local", "Subtítulo", "Edição", "Volume", "Dt.Public."
        //"Mês","Ano","Pág.","Idioma","CDD","Cutter","CDU","Tombo","Resumo"
//------------------------------------------------------------------------------
        //REDIMENSIONA AS COLUNAS COM BASE NO TAMANHO MÁXIMO DE CADA CÉLULA
        //AQUI REDIMENSIONA SOMENTE A TERCEIRA
        int maxWidth0 = 0;
        int maxWidth1 = 0;
        int maxWidth2 = 0;
        int maxWidth3 = 0;
        int maxWidth4 = 0;
        int maxWidth5 = 0;
//        int maxWidth6 = 0;
//        int maxWidth7 = 0;
        for (int i = 0; i < tblObras.getRowCount(); i++) {
            Object cellValue0 = tblObras.getValueAt(i, 0);
            Object cellValue1 = tblObras.getValueAt(i, 1);
            Object cellValue2 = tblObras.getValueAt(i, 2);
            Object cellValue3 = tblObras.getValueAt(i, 3);
            Object cellValue4 = tblObras.getValueAt(i, 4);
            Object cellValue5 = tblObras.getValueAt(i, 5);
//            Object cellValue6 = tblObras.getValueAt(i, 6);
//            Object cellValue7 = tblObras.getValueAt(i, 7);

            if (cellValue0 != null) {
                maxWidth0 = Math.max(tblObras.getCellRenderer(i, 0).
                        getTableCellRendererComponent(tblObras, cellValue0, false, false, i, 0).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth0);
            }
            if (cellValue1 != null) {
                maxWidth1 = Math.max(tblObras.getCellRenderer(i, 1).
                        getTableCellRendererComponent(tblObras, cellValue1, false, false, i, 1).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth1);
            }
            if (cellValue2 != null) {
                maxWidth2 = Math.max(tblObras.getCellRenderer(i, 2).
                        getTableCellRendererComponent(tblObras, cellValue2, false, false, i, 2).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth2);
            }
            if (cellValue3 != null) {
                maxWidth3 = Math.max(tblObras.getCellRenderer(i, 3).
                        getTableCellRendererComponent(tblObras, cellValue3, false, false, i, 3).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth3);
            }
            if (cellValue4 != null) {
                maxWidth4 = Math.max(tblObras.getCellRenderer(i, 4).
                        getTableCellRendererComponent(tblObras, cellValue4, false, false, i, 4).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth4);
            }
            if (cellValue5 != null) {
                maxWidth5 = Math.max(tblObras.getCellRenderer(i, 5).
                        getTableCellRendererComponent(tblObras, cellValue5, false, false, i, 5).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth5);
            }
//            if (cellValue6 != null) {
//                maxWidth6 = Math.max(tblObras.getCellRenderer(i, 6).
//                        getTableCellRendererComponent(tblObras, cellValue6, false, false, i, 6).
//                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth6);
//            }
//            if (cellValue7 != null) {
//                maxWidth7 = Math.max(tblObras.getCellRenderer(i, 7).
//                        getTableCellRendererComponent(tblObras, cellValue7, false, false, i, 7).
//                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth7);
//            }
        }
//------------------------------------------------------------------------------
        tblObras.getColumnModel().getColumn(0).setPreferredWidth(maxWidth0);
        tblObras.getColumnModel().getColumn(1).setPreferredWidth(maxWidth1);
        tblObras.getColumnModel().getColumn(2).setPreferredWidth(maxWidth2);
        tblObras.getColumnModel().getColumn(3).setPreferredWidth(maxWidth3);
        tblObras.getColumnModel().getColumn(4).setPreferredWidth(maxWidth4);
        tblObras.getColumnModel().getColumn(5).setPreferredWidth(maxWidth5);
//        tblObras.getColumnModel().getColumn(6).setPreferredWidth(maxWidth6);
//        tblObras.getColumnModel().getColumn(7).setPreferredWidth(maxWidth7);

        time = System.currentTimeMillis() - time;  // ms
        if (tblObras.getRowCount() == 0) {
            lblMensagem.setText("Nenhuma obra encontrada !");
        } else if (tblObras.getRowCount() == 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obra encontrada !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        } else if (tblObras.getRowCount() > 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obras encontradas !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
    }//GEN-LAST:event_btnTodosActionPerformed

    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed
        if (tblObras.isRowSelected(tblObras.getSelectedRow()) && okSelecionado == true) {
            this.dispose();
        }
    }//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void tblObrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblObrasMouseClicked
        ExemplaresdaObra();
    }//GEN-LAST:event_tblObrasMouseClicked

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código
                txtConsulta.setDocument(new DocSomenteNumeros());
                break;
            case 1:
                //Título
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 2:
                //Clas. Literária
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 3:
                //Grupo
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 4:
                //Editora
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    private void btnRestaurarJanelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarJanelaActionPerformed
        java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
        java.awt.Dimension screenSize = tk.getScreenSize();
        this.setSize(800, 600);
        this.setLocation((screenSize.width - this.getWidth()) / 2, (screenSize.height - this.getHeight()) / 2);
    }//GEN-LAST:event_btnRestaurarJanelaActionPerformed

    private void btnMaxJanelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaxJanelaActionPerformed
        Funcoes f = new Funcoes();
        f.MaximizarForm(this);
    }//GEN-LAST:event_btnMaxJanelaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//      java.awt.event.ActionEvent ev = null;     
        btnTodosActionPerformed(null);
//        ExemplaresdaObra();
        cbFiltro.setSelectedIndex(1);
    }//GEN-LAST:event_formWindowOpened

    private void tblObrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblObrasKeyPressed
        ExemplaresdaObra();
    }//GEN-LAST:event_tblObrasKeyPressed

    private void tblObrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblObrasKeyReleased
        ExemplaresdaObra();
    }//GEN-LAST:event_tblObrasKeyReleased

    private void tblExemplaresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblExemplaresKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            this.dispose();
        }
    }//GEN-LAST:event_tblExemplaresKeyPressed

    private void tblExemplaresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblExemplaresMouseClicked
        int row = tblExemplares.getSelectedRow();
        if (tblExemplares.isRowSelected(row)) {
            okSelecionado = true;
        } else {
            okSelecionado = false;
        }
        if (evt.getClickCount() == 2) {
            if (tblExemplares.isRowSelected(row) && okSelecionado == true) {
               this.dispose();
           }
        }
    }//GEN-LAST:event_tblExemplaresMouseClicked

    //Pega o código selecionado
    public String getCodigo() {
        coditem = tblExemplares.getModel().getValueAt(tblExemplares.getSelectedRow(), 0).toString();
        return coditem;
    }

    public void ExemplaresdaObra() {
        long time = System.currentTimeMillis();
//------------------------------------------------------------------------------
        dadosdaObra = new ArrayList();
        banco = new DB();
        banco.connect();
        Query q2 = new Query(banco.conn);
        String sql = null;       
            sql="SELECT d.iddetalhesdolivro,d.exemplar,e.descricao,d.status,d.disponibilidade,d.cadlivros_id"
                + " FROM detalhesdolivro d,cadestadodolivro e "
                + " WHERE d.estadodolivro_id=e.codigo"
                + " AND d.cadlivros_id=" + tblObras.getValueAt(tblObras.getSelectedRow(), 0).toString()
                + " AND NOT d.disponibilidade='R'"
                + " ORDER BY d.iddetalhesdolivro,d.exemplar";        

        q2.open(sql);
        String iddetalhesdolivro,exemplar, descricao, status, disponibilidade, cadlivros_id;
        try {
            while (q2.next()) {
                iddetalhesdolivro=q2.fieldbyname("iddetalhesdolivro");
                exemplar = q2.fieldbyname("exemplar");
                descricao = q2.fieldbyname("descricao");
                status = q2.fieldbyname("status");
                disponibilidade = q2.fieldbyname("disponibilidade");
                cadlivros_id = q2.fieldbyname("cadlivros_id");
                //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,LENDO NO LOCAL LL, ou
                //DISPONÍVEL DI
                if (disponibilidade.equals("D")) {
                    disponibilidade = "DISPONÍVEL";
                } else if (disponibilidade.equals("L")) {
                    disponibilidade = "LENDO";
                } else if (disponibilidade.equals("E")) {
                    disponibilidade = "EMPRESTADO";
                } else if (disponibilidade.equals("R")) {
                    disponibilidade = "RESERVADO";
                }
                //STATUS DA OBRA V,F
                if (status.equals("F")) {
                    status = "EMPRESTAR";
                } else if (status.equals("V")) {
                    status = "NÃO EMPRESTAR";
                }
                //--------------------------------------------------------------
                dadosdaObra.add(new String[]{
                            iddetalhesdolivro,                            
                            exemplar,
                            descricao,
                            status,
                            disponibilidade,
                            cadlivros_id
                        });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar em detalhesdolivro \n"
                    + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
        banco.disconnect();

        boolean[] edicao1 = {false, false, false, false,false};
        modelExemplares = new MkTableModel2(dadosdaObra, colunas2, edicao1);
        tblExemplares.setModel(modelExemplares);
        sorter2 = new TableRowSorter<MkTableModel2>(modelExemplares);
        tblExemplares.setRowSorter(sorter2);
        //exemplar,estado,status,disponibilidade
        tblExemplares.getColumnModel().getColumn(0).setPreferredWidth(100);
        tblExemplares.getColumnModel().getColumn(1).setPreferredWidth(80);
        tblExemplares.getColumnModel().getColumn(2).setPreferredWidth(100);
        tblExemplares.getColumnModel().getColumn(3).setPreferredWidth(150);
        tblExemplares.getColumnModel().getColumn(4).setPreferredWidth(150);

//------------------------------------------------------------------------------
        tblExemplares.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {

                this.setHorizontalAlignment(CENTER);
                Object ref = modelExemplares.getValueAt(row, 4);

                if (ref != null && ref.equals("DISPONÍVEL")) {
                    setBackground(new Color(204, 204, 255));
                    setForeground(Color.blue);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 12));

                } else if (ref != null && ref.equals("EMPRESTADO") || ref.equals("LENDO")) {
                    setBackground(new Color(255, 51, 51));
                    setForeground(Color.black);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 14));
                    tblExemplares.setSelectionBackground(Color.cyan);

                } else if (ref != null && ref.equals("RESERVADO")) {
                    setBackground(new Color(255, 255, 102));
                    setForeground(Color.black);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 12));
                    tblExemplares.setSelectionBackground(Color.cyan);
                }              
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
//------------------------------------------------------------------------------
        time = System.currentTimeMillis() - time;  // ms

        if (tblExemplares.getRowCount() == 0) {
            lblMensagem.setText("Nenhum exemplar encontrado !");
        } else if (tblExemplares.getRowCount() == 1) {
            lblMensagem.setText(tblExemplares.getRowCount() + " exemplar encontrado !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        } else if (tblExemplares.getRowCount() > 1) {
            lblMensagem.setText(tblExemplares.getRowCount() + " exemplares encontrados !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                jdfrmConsultaAcervodeObrasReserva dialog = new jdfrmConsultaAcervodeObrasReserva(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnMaxJanela;
    private javax.swing.JButton btnRestaurarJanela;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JTable tblExemplares;
    private javax.swing.JTable tblObras;
    private javax.swing.JTextField txtConsulta;
    // End of variables declaration//GEN-END:variables
}
