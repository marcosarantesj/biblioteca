/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadItensOLD.java
 *
 * Created on 18/09/2010, 10:36:03
 */
package Forms;

import Classes2.Autores;
import Classes2.ClassificacoesLiterarias;
import Classes2.Editoras;
import Classes2.EstadoDoLivro;
import Classes2.Grupos;
import Classes2.Idiomas;
import Classes2.Itens;
import FormsConsulta.jdfrmConsultaAutores;
import FormsConsulta.jdfrmConsultaClasLiteraria;
import FormsConsulta.jdfrmConsultaEditora;
import FormsConsulta.jdfrmConsultaGrupo;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Funcoes;
import Classes.Query;

/**
 *
 * @author MARK
 */
public class ifrmCadItensOLD extends javax.swing.JInternalFrame {

    Funcoes f = new Funcoes();
    private boolean novoCadastro;
    private DB banco2;
    private DefaultTableModel modelo;
    private ArrayList vClasLit;
    private ArrayList vEditora;
    private ArrayList vGrupo;
    private ArrayList vIdioma;
    private ArrayList vAutor;
    private ArrayList vEstadodolivro;
    private ArrayList vetor;
    private Itens item;
    //Modelo2 para adicionar e excluir os Autores
    //Foi declarado como publico para poder sempre adicionar mais 1
    String[] coluna = {"Autor"};
    DefaultTableModel modelo2 = new DefaultTableModel(null, coluna) {
        //Não permitir a edição das células

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    /** Creates new form ifrmCadItensOLD */
    public ifrmCadItensOLD() {
        initComponents();
        txtTitulo.setDocument(new FixedLengthDocument(40));
        txtSubtitulo.setDocument(new FixedLengthDocument(40));
        txtEdicao.setDocument(new FixedLengthDocument(30));
        txtVolume.setDocument(new FixedLengthDocument(20));
        txtDataPublicacao.setDocument(new FixedLengthDocument(10));
        txtMes.setDocument(new FixedLengthDocument(2));
        txtAno.setDocument(new FixedLengthDocument(2));
        txtNPag.setDocument(new FixedLengthDocument(5));
        txtLocal.setDocument(new FixedLengthDocument(20));
        txtCodigodeBarras.setDocument(new FixedLengthDocument(20));
        txtExemplar.setDocument(new FixedLengthDocument(5));
        txtCDD.setDocument(new FixedLengthDocument(20));
        txtCutter.setDocument(new FixedLengthDocument(10));
        txtCDU.setDocument(new FixedLengthDocument(10));
        txtTombo.setDocument(new FixedLengthDocument(20));
        txtResumo.setDocument(new FixedLengthDocument(1000));
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

        jTable2.setAutoCreateRowSorter(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        painel3 = new javax.swing.JPanel();
        cbClasLiteraria = new javax.swing.JComboBox();
        cbEditora = new javax.swing.JComboBox();
        cbGrupo = new javax.swing.JComboBox();
        btnConsultaClasLiteraria = new javax.swing.JButton();
        btnConsultaEditora = new javax.swing.JButton();
        btnConsultaGrupo = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblDisponibilidade = new javax.swing.JLabel();
        painel1 = new javax.swing.JPanel();
        txtCodigo = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        painel2 = new javax.swing.JPanel();
        txtTitulo = new javax.swing.JTextField();
        txtSubtitulo = new javax.swing.JTextField();
        txtEdicao = new javax.swing.JTextField();
        txtVolume = new javax.swing.JTextField();
        txtDataPublicacao = new javax.swing.JTextField();
        txtMes = new javax.swing.JTextField();
        txtAno = new javax.swing.JTextField();
        txtNPag = new javax.swing.JTextField();
        txtLocal = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtCodigodeBarras = new javax.swing.JTextField();
        chkStatus = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        painel4 = new javax.swing.JPanel();
        txtExemplar = new javax.swing.JTextField();
        txtCDD = new javax.swing.JTextField();
        txtCutter = new javax.swing.JTextField();
        txtCDU = new javax.swing.JTextField();
        txtTombo = new javax.swing.JTextField();
        cbIdioma = new javax.swing.JComboBox();
        cbEstadodeConservacao = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        painel5 = new javax.swing.JPanel();
        cbAutor = new javax.swing.JComboBox();
        btnAddAutor = new javax.swing.JButton();
        btnExcluiAutor = new javax.swing.JButton();
        btnConsultaAutor = new javax.swing.JButton();
        painel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        painel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResumo = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        rdDisponivel = new javax.swing.JRadioButton();
        rdNaoDisponivel = new javax.swing.JRadioButton();
        rdTodos = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnSalvarVariosExemplares = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro de Obras do Acervo");
        setPreferredSize(new java.awt.Dimension(785, 545));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        painel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        btnConsultaClasLiteraria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaClasLiteraria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaClasLiterariaActionPerformed(evt);
            }
        });

        btnConsultaEditora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaEditora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaEditoraActionPerformed(evt);
            }
        });

        btnConsultaGrupo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaGrupoActionPerformed(evt);
            }
        });

        jLabel5.setText("Classificação Literária");

        jLabel7.setText("Editora");

        jLabel6.setText("Grupo");

        lblDisponibilidade.setFont(new java.awt.Font("Tahoma", 1, 14));

        javax.swing.GroupLayout painel3Layout = new javax.swing.GroupLayout(painel3);
        painel3.setLayout(painel3Layout);
        painel3Layout.setHorizontalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel3Layout.createSequentialGroup()
                .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addGroup(painel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7))
                    .addGroup(painel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5))
                    .addGroup(painel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbClasLiteraria, 0, 300, Short.MAX_VALUE)
                            .addComponent(lblDisponibilidade, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(cbEditora, 0, 300, Short.MAX_VALUE)
                            .addComponent(cbGrupo, 0, 300, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConsultaClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnConsultaEditora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnConsultaGrupo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(14, 14, 14))
        );
        painel3Layout.setVerticalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnConsultaClasLiteraria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbClasLiteraria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultaEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultaGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDisponibilidade, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        txtData.setEditable(false);
        txtData.setEnabled(false);

        txtHora.setEditable(false);
        txtHora.setEnabled(false);

        jLabel4.setText("Hora");

        jLabel3.setText("Data");

        jLabel1.setText("Código");

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtDataPublicacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataPublicacaoKeyReleased(evt);
            }
        });

        txtMes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMesFocusLost(evt);
            }
        });

        txtAno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAnoFocusLost(evt);
            }
        });

        jLabel2.setText("Título");

        jLabel8.setText("Subtítulo");

        jLabel9.setText("Edição");

        jLabel10.setText("Volume");

        jLabel11.setText("Dt Publicação");

        jLabel12.setText("Mês/Ano Edição");

        jLabel16.setText("/");

        jLabel13.setText("Nº de Pag.");

        jLabel14.setText("Local");

        jLabel23.setText("Cod. de Barras:");

        chkStatus.setText("Não emprestar");

        javax.swing.GroupLayout painel2Layout = new javax.swing.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEdicao, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(txtVolume, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataPublicacao, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(painel2Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(txtSubtitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel13)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNPag))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(116, 116, 116))
                            .addComponent(txtLocal, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(txtCodigodeBarras, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(chkStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))))
                .addContainerGap())
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)))
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataPublicacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNPag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtCodigodeBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkStatus)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(painel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dados Principais 1", jPanel1);

        painel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jLabel15.setText("Exemplar Nº");

        jLabel19.setText("CDD");

        jLabel20.setText("Cutter");

        jLabel21.setText("CDU");

        jLabel22.setText("Idioma");

        jLabel17.setText("Estado de Conservação");

        jLabel18.setText("Tombo");

        javax.swing.GroupLayout painel4Layout = new javax.swing.GroupLayout(painel4);
        painel4.setLayout(painel4Layout);
        painel4Layout.setHorizontalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel4Layout.createSequentialGroup()
                        .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel4Layout.createSequentialGroup()
                                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtExemplar, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19)))
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCutter, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)))
                    .addComponent(cbIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbEstadodeConservacao, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(painel4Layout.createSequentialGroup()
                            .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCDU, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel21))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel18)
                                .addComponent(txtTombo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel17))
                .addGap(238, 238, 238))
        );
        painel4Layout.setVerticalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(painel4Layout.createSequentialGroup()
                            .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20)
                                .addComponent(jLabel21)
                                .addComponent(jLabel18))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCutter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCDU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtTombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel15)))
                    .addComponent(txtExemplar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbEstadodeConservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(246, 246, 246))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel4, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dados Principais 2", jPanel3);

        painel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Autor(es)"));

        btnAddAutor.setText("Adicionar");
        btnAddAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAutorActionPerformed(evt);
            }
        });

        btnExcluiAutor.setText("Excluir");
        btnExcluiAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluiAutorActionPerformed(evt);
            }
        });

        btnConsultaAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaAutor.setBorder(null);
        btnConsultaAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaAutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel5Layout = new javax.swing.GroupLayout(painel5);
        painel5.setLayout(painel5Layout);
        painel5Layout.setHorizontalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addComponent(cbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConsultaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addComponent(btnAddAutor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluiAutor)))
                .addContainerGap(354, Short.MAX_VALUE))
        );
        painel5Layout.setVerticalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConsultaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAutor)
                    .addComponent(btnExcluiAutor))
                .addContainerGap())
        );

        painel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout painel6Layout = new javax.swing.GroupLayout(painel6);
        painel6.setLayout(painel6Layout);
        painel6Layout.setHorizontalGroup(
            painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel6Layout.setVerticalGroup(
            painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Autores", jPanel6);

        painel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Resumo"));

        txtResumo.setColumns(20);
        txtResumo.setLineWrap(true);
        txtResumo.setRows(5);
        txtResumo.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtResumo);

        javax.swing.GroupLayout painel7Layout = new javax.swing.GroupLayout(painel7);
        painel7.setLayout(painel7Layout);
        painel7Layout.setHorizontalGroup(
            painel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel7Layout.setVerticalGroup(
            painel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Resumo", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionaRegistro)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarConsulta)
                    .addComponent(btnTodos)
                    .addComponent(btnSelecionaRegistro))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Critérios:"));
        jPanel5.setPreferredSize(new java.awt.Dimension(663, 66));

        buttonGroup2.add(rdDisponivel);
        rdDisponivel.setText("Disponível para Empréstimo");

        buttonGroup2.add(rdNaoDisponivel);
        rdNaoDisponivel.setText("Não Disponível para Empréstimo");

        buttonGroup2.add(rdTodos);
        rdTodos.setSelected(true);
        rdTodos.setText("Todos");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdDisponivel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdNaoDisponivel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdTodos)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdDisponivel)
                    .addComponent(rdNaoDisponivel)
                    .addComponent(rdTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros"));
        jPanel8.setPreferredSize(new java.awt.Dimension(609, 227));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro:"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código", "Código de barras", "Título", "Classificação Literária", "Grupo", "Editora" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consulta", jPanel4);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAdicionar.setToolTipText("Adicionar");
        btnAdicionar.setFocusable(false);
        btnAdicionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionar.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdicionar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Editar.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Cancelar.png"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCancelar);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setToolTipText("Salvar");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvar);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluir.setToolTipText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExcluir);

        btnSalvarVariosExemplares.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar_Varios.png"))); // NOI18N
        btnSalvarVariosExemplares.setToolTipText("Salvar vários exemplares iguais");
        btnSalvarVariosExemplares.setFocusable(false);
        btnSalvarVariosExemplares.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvarVariosExemplares.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvarVariosExemplares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarVariosExemplaresActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvarVariosExemplares);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-841)/2, (screenSize.height-479)/2, 841, 479);
    }// </editor-fold>//GEN-END:initComponents

    private void MostraAutoresDoItem(String linha) {
        //Apaga todos os registros da tabela
        //Limpa a tabela para preencher novamente
        if (modelo2.getRowCount() > 0) {
//                        int x = -1;
            int j = modelo2.getRowCount();
            do {
                modelo2.removeRow(0);
                --j;
            } while (j > 0);
        }

        DB banco = new DB();
        banco.connect();
        Query query1 = new Query(banco.conn);
        String sql = "SELECT a.autor AS autor FROM cadautores a,cadlivros c,autoresdoitem ai"
                + " WHERE ai.codlivro=c.codigo AND ai.codautor=a.codigo"
                + " AND ai.codlivro=" + linha;
        query1.open(sql);
        String nome;
        while (query1.next()) {
            nome = query1.fieldbyname("autor");
            modelo2.insertRow(modelo2.getRowCount(), new String[]{nome});

        }
        jTable1.setModel(modelo2);
        banco.disconnect();
    }

    //Para abrir somente uma vez
    //Abrir tela InternalFrame getDesktopPane pega o desktopPane atual
    public void abrirTela(Class classe) {

        //Verificando se o usuário tem permissão para abrir esta tela.
        /*if (!AlgumaCoisa.isAutorizado(nomeClasse)) {
        return;
        }*/

        //Verificando se a janela está aberta.
        for (int i = 0; i < this.getDesktopPane().getAllFrames().length; i++) {
            if (this.getDesktopPane().getAllFrames()[i].getClass().getName().equals(
                    classe.getName())) {
                this.getDesktopPane().getAllFrames()[i].toFront();
                return;
            }
        }
        JInternalFrame iFrame;
        try {
            iFrame = ((JInternalFrame) classe.newInstance());
            this.getDesktopPane().add(iFrame);
            iFrame.show();
            iFrame.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Livro24x24.png")));
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        }
//        //Seta o Look And Feel padrão
//        try {
//            try {
//                javax.swing.UIManager.setLookAndFeel(LF());
//            } catch (Exception ex) {
//                JOptionPane.showMessageDialog(null, "Aviso", ex.getMessage(), JOptionPane.WARNING_MESSAGE);
//            }
//            javax.swing.SwingUtilities.updateComponentTreeUI(this);
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, "Aviso", ex.getMessage(), JOptionPane.WARNING_MESSAGE);
//        }
    }

    private void txtMesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMesFocusLost
      
        if (txtMes.getText().length() == 1) {
            txtMes.setText("0" + txtMes.getText());
        }
}//GEN-LAST:event_txtMesFocusLost

    private void txtAnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAnoFocusLost
      
        if (txtAno.getText().length() == 1) {
            txtAno.setText("0" + txtAno.getText());
        }
}//GEN-LAST:event_txtAnoFocusLost

    private void txtDataPublicacaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataPublicacaoKeyReleased
   
        switch (txtDataPublicacao.getText().trim().length()) {
            case 2:
                txtDataPublicacao.setText(txtDataPublicacao.getText() + "/");
                break;
            case 5:
                txtDataPublicacao.setText(txtDataPublicacao.getText() + "/");
                break;
        }
}//GEN-LAST:event_txtDataPublicacaoKeyReleased

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        DB banco = new DB();
        banco.connect();
        Query ClasLit = new Query(banco.conn);
        Query Edit = new Query(banco.conn);
        Query Grup = new Query(banco.conn);
        Query Idiom = new Query(banco.conn);
        Query Aut = new Query(banco.conn);
        Query Est = new Query(banco.conn);

        ClasLit.open("SELECT codigo,clasliteraria FROM cadclasliteraria ORDER BY clasliteraria ASC");
        Edit.open("SELECT codigo,editora FROM cadeditoras ORDER BY editora ASC");
        Grup.open("SELECT codigo,grupo FROM cadgrupos ORDER BY grupo ASC");
        Idiom.open("SELECT codigo,idioma FROM cadidiomas ORDER BY idioma ASC");
        Aut.open("SELECT codigo,autor FROM cadautores ORDER BY autor ASC");
        Est.open("SELECT codigo,descricao FROM cadestadodolivro ORDER BY descricao ASC");

        String codcl, cl, codeditora, editora, codgrupo, grupo, codidioma,
                idioma, codautor, autor, codestado, estado;
        //Classes instanciadas==============================
        ClassificacoesLiterarias ClasL = new ClassificacoesLiterarias();
        Editoras Editora = new Editoras();
        Grupos Grupo = new Grupos();
        Idiomas Idioma = new Idiomas();
        Autores Autor = new Autores();
        EstadoDoLivro Estado = new EstadoDoLivro();
        //===================================================
        //Arraylist
        vClasLit = new ArrayList();
        vEditora = new ArrayList();
        vGrupo = new ArrayList();
        vIdioma = new ArrayList();
        vAutor = new ArrayList();
        vEstadodolivro = new ArrayList();
        //===================================================


        while (ClasLit.next()) {
            codcl = ClasLit.fieldbyname("codigo");
            cl = ClasLit.fieldbyname("clasliteraria");

            ClasL.setCodigo(Integer.parseInt(codcl));
            ClasL.setClasliterarias(cl);

            //Carrega os dados no Arraylist
            vClasLit.add(new ClassificacoesLiterarias(ClasL.getCodigo(), ClasL.getClasliterarias()));
//            cbClasLiteraria.addItem(cl);
        }
        while (Edit.next()) {
            codeditora = Edit.fieldbyname("codigo");
            editora = Edit.fieldbyname("editora");

            Editora.setCodigo(Integer.parseInt(codeditora));
            Editora.setEditora(editora);

            //Carrega os dados no Arraylist
            vEditora.add(new Editoras(Editora.getCodigo(), Editora.getEditora()));
//            cbEditora.addItem(editora);
        }
        while (Grup.next()) {
            codgrupo = Grup.fieldbyname("codigo");
            grupo = Grup.fieldbyname("grupo");

            Grupo.setCodigo(Integer.parseInt(codgrupo));
            Grupo.setGrupo(grupo);

            vGrupo.add(new Grupos(Grupo.getCodigo(), Grupo.getGrupo()));
//            cbGrupo.addItem(grupo);
        }
        while (Idiom.next()) {
            codidioma = Idiom.fieldbyname("codigo");
            idioma = Idiom.fieldbyname("idioma");

            Idioma.setCodigo(Integer.parseInt(codidioma));
            Idioma.setIdioma(idioma);

            vIdioma.add(new Idiomas(Idioma.getCodigo(), Idioma.getIdioma()));
//            cbIdioma.addItem(idioma);
        }
        while (Aut.next()) {
            codautor = Aut.fieldbyname("codigo");
            autor = Aut.fieldbyname("autor");

            Autor.setCodigo(Integer.parseInt(codautor));
            Autor.setAutor(autor);

            vAutor.add(new Autores(Autor.getCodigo(), Autor.getAutor()));
//            cbAutor.addItem(autor);
        }
        while (Est.next()) {
            codestado = Est.fieldbyname("codigo");
            estado = Est.fieldbyname("descricao");

            Estado.setCodigo(Integer.parseInt(codestado));
            Estado.setDescricao(estado);

            vEstadodolivro.add(new EstadoDoLivro(Estado.getCodigo(), Estado.getDescricao()));


        }
        //Carrega os dados nas jCombos

        for (int x1 = 0; x1 < vClasLit.size(); x1++) {
            if (vClasLit.size() > 0) {
                cbClasLiteraria.addItem(((ClassificacoesLiterarias) vClasLit.get(x1)).getClasliterarias());
            }
        }

        for (int x2 = 0; x2 < vEditora.size(); x2++) {
            if (vEditora.size() > 0) {
                cbEditora.addItem(((Editoras) vEditora.get(x2)).getEditora());
            }
        }
        for (int x3 = 0; x3 < vGrupo.size(); x3++) {
            if (vGrupo.size() > 0) {
                cbGrupo.addItem(((Grupos) vGrupo.get(x3)).getGrupo());
            }
        }
        for (int x4 = 0; x4 < vIdioma.size(); x4++) {
            if (vIdioma.size() > 0) {
                cbIdioma.addItem(((Idiomas) vIdioma.get(x4)).getIdioma());
            }
        }
        for (int x5 = 0; x5 < vAutor.size(); x5++) {
            if (vAutor.size() > 0) {
                cbAutor.addItem(((Autores) vAutor.get(x5)).getAutor());
            }
        }
        for (int x6 = 0; x6 < vEstadodolivro.size(); x6++) {
            if (vEstadodolivro.size() > 0) {
                cbEstadodeConservacao.addItem(((EstadoDoLivro) vEstadodolivro.get(x6)).getDescricao());
            }
        }
//=========================================================================
        banco.disconnect();

        f.ativarCampos(painel2, false);
        f.ativarCampos(painel3, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        f.ativarCampos(painel7, false);

        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);
        cbFiltro.setSelectedIndex(2);

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Botões
        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(true);

        f.ativarCampos(painel2, true);
        f.ativarCampos(painel3, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);
        f.ativarCampos(painel7, true);
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel3);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        f.limparCampos(painel7);
         //Apaga todos os registros da tabela
                    //Limpa a tabela para preencher novamente
                    if (modelo2.getRowCount() > 0) {
//                        int x = -1;
                        int j = modelo2.getRowCount();
                        do {
                            modelo2.removeRow(0);
                            --j;
                        } while (j > 0);
                    }

        jTabbedPane1.setSelectedIndex(0);
        txtTitulo.requestFocus();//Põe o foco no controle nome
        //=================================================

        //cria um objeto MysqlDB apontando para o banco especificado.
        DB banco = new DB();
        banco.connect();
        int max1 = -1;

        //conecta ao banco
        Query query1 = new Query(banco.conn);
        //Cria um objeto do tipo query chamado query1 que recebe
        //como argumento o  objeto banco.

        try {
            String sql = " SELECT MAX(Codigo)As Codigo FROM cadlivros";
            query1.open(sql); //executa uma sentença sql.
            query1.next();

            max1 = query1.rs.getInt(1);

            banco.disconnect();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro:" + e.getMessage());
            //        } finally {
            try {
                query1.rs.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro resultset: " + ex.getMessage());
            }
        }

        //String zeros = "00000";
        //String numero = zeros + n;
        //numero = numero.substring(numero.length() - 5);
        //System.out.println(numero.substring(numero.length() - 5));

        txtCodigo.setText(String.valueOf(max1 + 1));


        novoCadastro = true;
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);

        f.ativarCampos(painel2, true);
        f.ativarCampos(painel3, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);
        f.ativarCampos(painel7, true);

        novoCadastro = false;
        txtTitulo.requestFocus();
        jTabbedPane1.setSelectedIndex(0);
}//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        btnAdicionar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);

        f.ativarCampos(painel2, false);
        f.ativarCampos(painel3, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        f.ativarCampos(painel7, false);


        //Limpa os controles ao cancelar
        txtCodigo.setText("");
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel3);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        f.limparCampos(painel7);
        novoCadastro = false;
}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        if (txtTitulo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Título da Obra !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            txtTitulo.requestFocus();
        } else if (cbClasLiteraria.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione a Classificação Literária !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbClasLiteraria.requestFocus();
        } else if (cbEditora.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione a Editora !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbEditora.requestFocus();
        } else if (cbGrupo.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o Grupo !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbGrupo.requestFocus();
        } else if (txtExemplar.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Digite o número do exemplar !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            txtExemplar.requestFocus();
        } else if (cbIdioma.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o idioma !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            cbIdioma.requestFocus();
        } else if (cbEstadodeConservacao.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o estado de conservação !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            cbEstadodeConservacao.requestFocus();
        } //Insert
        else if (novoCadastro == true) {

            //Pega o código dos ítens no ArrayList
            int codClas = 0, codEditora = 0, codGrupo = 0, codIdioma = 0, codEstado = 0;
            for (int x1 = 0; x1 < vClasLit.size(); x1++) {
                if (vClasLit.size() > 0) {
                    for (int i1 = 0; i1 < vClasLit.size(); i1++) {
                        if (((ClassificacoesLiterarias) vClasLit.get(i1)).getClasliterarias().equals(cbClasLiteraria.getSelectedItem().toString())) {
                            codClas = ((ClassificacoesLiterarias) vClasLit.get(i1)).getCodigo();
                        }
                    }
                }
            }

            for (int x2 = 0; x2 < vEditora.size(); x2++) {
                if (vEditora.size() > 0) {
                    for (int i2 = 0; i2 < vEditora.size(); i2++) {
                        if (((Editoras) vEditora.get(i2)).getEditora().equals(cbEditora.getSelectedItem().toString())) {
                            codEditora = ((Editoras) vEditora.get(i2)).getCodigo();
                        }
                    }
                }
            }
            for (int x3 = 0; x3 < vGrupo.size(); x3++) {
                if (vGrupo.size() > 0) {
                    for (int i3 = 0; i3 < vGrupo.size(); i3++) {
                        if (((Grupos) vGrupo.get(i3)).getGrupo().equals(cbGrupo.getSelectedItem().toString())) {
                            codGrupo = ((Grupos) vGrupo.get(i3)).getCodigo();
                        }
                    }
                }
            }
            for (int x4 = 0; x4 < vIdioma.size(); x4++) {
                if (vIdioma.size() > 0) {
                    for (int i4 = 0; i4 < vIdioma.size(); i4++) {
                        if (((Idiomas) vIdioma.get(i4)).getIdioma().equals(cbIdioma.getSelectedItem().toString())) {
                            codIdioma = ((Idiomas) vIdioma.get(i4)).getCodigo();
                        }
                    }
                }
            }

            for (int x6 = 0; x6 < vEstadodolivro.size(); x6++) {
                if (vEstadodolivro.size() > 0) {
                    for (int i5 = 0; i5 < vEstadodolivro.size(); i5++) {
                        if (((EstadoDoLivro) vEstadodolivro.get(i5)).getDescricao().equals(cbEstadodeConservacao.getSelectedItem().toString())) {
                            codEstado = ((EstadoDoLivro) vEstadodolivro.get(i5)).getCodigo();
                        }
                    }
                }
            }
            //==============================================================================

            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();


            //Insere primeiro na tabela cadlivros
            //Foi executado o insert acima
            //Insere usando formatacao JAVA(evita injecao SQL)
            PreparedStatement st1 = null;
            String sqlInsert = "INSERT INTO cadlivros(codigo,data_2,hora,titulo,"
                    + "subtitulo,edicao,volume,datapublic,mes,ano,npaginas,local_2,"
                    + "codclas_literaria,codeditora,codgrupo,exemplar,cutter,cdd,cdu,"
                    + "tombo,codidioma,estadodolivro_id,status,disponibilidade,resumo,codigodebarras)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            int ri = 0;
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = new Date();
                java.sql.Date dataJDBC = new java.sql.Date(dt.getTime());
                DateFormat h = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hr = new Date();
                java.sql.Time horaJDBC = new java.sql.Time(hr.getTime());

                txtData.setText(df.format(new Date()));
                txtHora.setText(h.format(new Date()));
                st1.setDate(2, dataJDBC);
                st1.setTime(3, horaJDBC);

                st1.setString(4, txtTitulo.getText().trim());
                st1.setString(5, txtSubtitulo.getText().trim());
                st1.setString(6, txtEdicao.getText().trim());
                st1.setString(7, txtVolume.getText().trim());

                //Converte para data a data de publicação=====================
                if (txtDataPublicacao.getText().trim().equals("")) {
                    st1.setDate(8, null);
                } else if (!txtDataPublicacao.getText().trim().equals("")) {
                    DateFormat dtFPublic = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtP = dtFPublic.parse(txtDataPublicacao.getText().trim());
                    java.sql.Date dataPublicJDBC = new java.sql.Date(dtP.getTime());
                    st1.setDate(8, dataPublicJDBC);
                }
//==============================================================================
                //Inserindo valores nulos em campos inteiros
                if (txtMes.getText().trim().equals("")) {
                    st1.setNull(9, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(9, Integer.parseInt(txtMes.getText().trim()));
                }
                if (txtAno.getText().trim().equals("")) {
                    st1.setNull(10, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(10, Integer.parseInt(txtAno.getText().trim()));
                }
                if (txtNPag.getText().trim().equals("")) {
                    st1.setNull(11, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(11, Integer.parseInt(txtNPag.getText().trim()));
                }
                //=========================================================================

                st1.setString(12, txtLocal.getText().trim());
                //Código da jCombo (Clas.Literária,Editora,Grupo
                st1.setInt(13, codClas);
                st1.setInt(14, codEditora);
                st1.setInt(15, codGrupo);

                //Número do exemplar
                st1.setInt(16, Integer.parseInt(txtExemplar.getText().trim()));

                st1.setString(17, txtCutter.getText().trim());
                st1.setString(18, txtCDD.getText().trim());
                st1.setString(19, txtCDU.getText().trim());
                st1.setString(20, txtTombo.getText().trim());

                //Idioma e estadodolivro
                //Código da jCombo
                st1.setInt(21, codIdioma);
                st1.setInt(22, codEstado);

                //Status(F-V) Emprestar ou não F-se pode emprestar V-não pode
                if (chkStatus.isSelected() == false) {
                    st1.setString(23, "F");
                } else if (chkStatus.isSelected() == true) {
                    st1.setString(23, "V");
                }
                //Disponibilidade(Disponível(D),Emprestado(E),Reservado(RS),renovado(RN)
                st1.setString(24, "DI");
                st1.setString(25, txtResumo.getText().trim());
                //Se nao tiver codigo de barras, coloca o codigo automaticamente
                if (txtCodigodeBarras.getText().trim().equals("")) {
                    String formato = new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(txtCodigo.getText())));
                    txtCodigodeBarras.setText(formato);
                }
                st1.setString(26, txtCodigodeBarras.getText().trim());

                ri = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
            //Se inseriu na tabela pai (cadlivros) e não foi adicionado autor
            if (ri > 0 && jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Registro adicionado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);


                txtCodigo.setText("");
                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel7, false);
//                btnTodosActionPerformed(evt);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel7);
            }

            if (ri > 0) {
                int riAutor = 0;
                PreparedStatement stInsertAutor = null;
                try {
                    String sqlInsertA = "INSERT INTO autoresdoitem(codlivro,codautor)VALUES("
                            + "?,?)";
                    stInsertAutor = banco.conn.prepareStatement(sqlInsertA);

                    //======Verifica se e igual e retorna o codigo
                    for (int row = 0; row < modelo2.getRowCount(); row++) {
                        for (int z = 0; z < vAutor.size(); z++) {
                            if (((Autores) vAutor.get(z)).getAutor().equals(jTable1.getModel().getValueAt(row, 0).toString())) {
//                                System.out.println("Codigos: " + ((Autores) vAutor.get(z)).getCodigo());
                                stInsertAutor.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                                //Pega o código de cada autor
                                stInsertAutor.setInt(2, ((Autores) vAutor.get(z)).getCodigo());
                                riAutor = stInsertAutor.executeUpdate();
                            }
                        }
                    }


                    stInsertAutor.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                }
                if (riAutor > 0) {
                    JOptionPane.showMessageDialog(null, "Registro adicionado"
                            + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                    btnAdicionar.setEnabled(true);
                    btnEditar.setEnabled(false);
                    btnCancelar.setEnabled(false);
                    btnSalvar.setEnabled(false);
                    btnExcluir.setEnabled(false);
                    btnSalvarVariosExemplares.setEnabled(false);

                    f.ativarCampos(painel2, false);
                    f.ativarCampos(painel3, false);
                    f.ativarCampos(painel4, false);
                    f.ativarCampos(painel5, false);
                    f.ativarCampos(painel7, false);

                    txtCodigo.setText("");

                    btnTodosActionPerformed(evt);
                    f.limparCampos(painel1);
                    f.limparCampos(painel2);
                    f.limparCampos(painel3);
                    f.limparCampos(painel4);
                    f.limparCampos(painel5);
                    f.limparCampos(painel7);
                    //Apaga todos os registros da tabela
                    //Limpa a tabela para preencher novamente
                    if (modelo.getRowCount() > 0) {
//                        int x = -1;
                        int j = modelo.getRowCount();
                        do {
                            modelo.removeRow(0);
                            --j;
                        } while (j > 0);
                    }


                }
            }

        } //=======================UPDATE======================================
        //senão Update
        else if (novoCadastro == false) {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();
            //=========================================================
            //Apaga e insere novamente na tabela autoresdoitem
            int rd = 0;
            PreparedStatement stDeleteAutor = null;

            try {
                String sqlDelete = "DELETE FROM autoresdoitem WHERE codlivro=?";
                stDeleteAutor = banco.conn.prepareStatement(sqlDelete);
                stDeleteAutor.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                rd = stDeleteAutor.executeUpdate();
                stDeleteAutor.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao deletar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

            }
            //=========================================================================================
            //Verifica se foi executado e passa para o próximo
            int ri = 0;
            if (jTable1.getRowCount() > 0) {

                PreparedStatement stInsertAutor = null;
                try {
                    String sqlInsert = "INSERT INTO autoresdoitem(codlivro,codautor)VALUES("
                            + "?,?)";
                    stInsertAutor = banco.conn.prepareStatement(sqlInsert);

                    //======Verifica se e igual e retorna o codigo
                    for (int row = 0; row < modelo2.getRowCount(); row++) {
                        for (int z = 0; z < vAutor.size(); z++) {
                            if (((Autores) vAutor.get(z)).getAutor().equals(jTable1.getModel().getValueAt(row, 0).toString())) {
//                                System.out.println("Codigos: " + ((Autores) vAutor.get(z)).getCodigo());
                                stInsertAutor.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                                //Pega o código de cada autor
                                stInsertAutor.setInt(2, ((Autores) vAutor.get(z)).getCodigo());
                                ri = stInsertAutor.executeUpdate();
                            }
                        }
                    }
                     //Apaga todos os registros da tabela
                    //Limpa a tabela para preencher novamente
                    if (modelo2.getRowCount() > 0) {
//                        int x = -1;
                        int j = modelo2.getRowCount();
                        do {
                            modelo2.removeRow(0);
                            --j;
                        } while (j > 0);
                    }


                    stInsertAutor.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                }
            }
            //Pega o código dos ítens no ArrayList
            int codClas = 0, codEditora = 0, codGrupo = 0, codIdioma = 0, codEstado = 0;
            for (int x1 = 0; x1 < vClasLit.size(); x1++) {
                if (vClasLit.size() > 0) {
                    for (int i1 = 0; i1 < vClasLit.size(); i1++) {
                        if (((ClassificacoesLiterarias) vClasLit.get(i1)).getClasliterarias().equals(cbClasLiteraria.getSelectedItem().toString())) {
                            codClas = ((ClassificacoesLiterarias) vClasLit.get(i1)).getCodigo();
                        }
                    }
                }
            }

            for (int x2 = 0; x2 < vEditora.size(); x2++) {
                if (vEditora.size() > 0) {
                    for (int i2 = 0; i2 < vEditora.size(); i2++) {
                        if (((Editoras) vEditora.get(i2)).getEditora().equals(cbEditora.getSelectedItem().toString())) {
                            codEditora = ((Editoras) vEditora.get(i2)).getCodigo();
                        }
                    }
                }
            }
            for (int x3 = 0; x3 < vGrupo.size(); x3++) {
                if (vGrupo.size() > 0) {
                    for (int i3 = 0; i3 < vGrupo.size(); i3++) {
                        if (((Grupos) vGrupo.get(i3)).getGrupo().equals(cbGrupo.getSelectedItem().toString())) {
                            codGrupo = ((Grupos) vGrupo.get(i3)).getCodigo();
                        }
                    }
                }
            }
            for (int x4 = 0; x4 < vIdioma.size(); x4++) {
                if (vIdioma.size() > 0) {
                    for (int i4 = 0; i4 < vIdioma.size(); i4++) {
                        if (((Idiomas) vIdioma.get(i4)).getIdioma().equals(cbIdioma.getSelectedItem().toString())) {
                            codIdioma = ((Idiomas) vIdioma.get(i4)).getCodigo();
                        }
                    }
                }
            }

            for (int x6 = 0; x6 < vEstadodolivro.size(); x6++) {
                if (vEstadodolivro.size() > 0) {
                    for (int i5 = 0; i5 < vEstadodolivro.size(); i5++) {
                        if (((EstadoDoLivro) vEstadodolivro.get(i5)).getDescricao().equals(cbEstadodeConservacao.getSelectedItem().toString())) {
                            codEstado = ((EstadoDoLivro) vEstadodolivro.get(i5)).getCodigo();
                        }
                    }
                }
            }

            //==========================================================================
            int ru = 0;
            if (ri > 0 || jTable1.getRowCount() == 0) {

                //Variavel para verificar se foi executado o comando

                //Insere usando formatacao JAVA(evita injecao SQL)
                //insere na tabela cadlivros
                PreparedStatement st1 = null;
                String sqlUpdate = "UPDATE cadlivros SET data_2=?,hora=?,titulo=?,"
                        + "subtitulo=?,edicao=?,volume=?,datapublic=?,mes=?,ano=?,npaginas=?,local_2=?,"
                        + "codclas_literaria=?,codeditora=?,codgrupo=?,exemplar=?,cutter=?,cdd=?,cdu=?,"
                        + "tombo=?,codidioma=?,estadodolivro_id=?,status=?,disponibilidade=?,resumo=?,codigodebarras=? "
                        + "WHERE codigo=?";
//===============================================================================
                try {
                    st1 = banco.conn.prepareStatement(sqlUpdate);

                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dt = new Date();
                    java.sql.Date dataJDBC = new java.sql.Date(dt.getTime());
                    DateFormat h = new SimpleDateFormat("HH:mm:ss");
                    java.util.Date hr = new Date();
                    java.sql.Time horaJDBC = new java.sql.Time(hr.getTime());

                    txtData.setText(df.format(new Date()));
                    txtHora.setText(h.format(new Date()));
                    st1.setDate(1, dataJDBC);
                    st1.setTime(2, horaJDBC);

                    st1.setString(3, txtTitulo.getText().trim());
                    st1.setString(4, txtSubtitulo.getText().trim());
                    st1.setString(5, txtEdicao.getText().trim());
                    st1.setString(6, txtVolume.getText().trim());

                    //Converte para data a data de publicação=====================
                    if (txtDataPublicacao.getText().trim().equals("")) {
                        st1.setDate(7, null);
                    } else if (!txtDataPublicacao.getText().trim().equals("")) {
                        DateFormat dtFPublic = new SimpleDateFormat("dd/MM/yyyy");
                        java.util.Date dtP = dtFPublic.parse(txtDataPublicacao.getText().trim());
                        java.sql.Date dataPublicJDBC = new java.sql.Date(dtP.getTime());
                        st1.setDate(7, dataPublicJDBC);
                    }
//==============================================================================
                    //Inserindo valores nulos em campos inteiros
                    if (txtMes.getText().trim().equals("")) {
                        st1.setNull(8, java.sql.Types.INTEGER);
                    } else {
                        st1.setInt(8, Integer.parseInt(txtMes.getText().trim()));
                    }
                    if (txtAno.getText().trim().equals("")) {
                        st1.setNull(9, java.sql.Types.INTEGER);
                    } else {
                        st1.setInt(9, Integer.parseInt(txtAno.getText().trim()));
                    }
                    if (txtNPag.getText().trim().equals("")) {
                        st1.setNull(10, java.sql.Types.INTEGER);
                    } else {
                        st1.setInt(10, Integer.parseInt(txtNPag.getText().trim()));
                    }
                    //=========================================================================

                    st1.setString(11, txtLocal.getText().trim());
                    //Código da jCombo (Clas.Literária,Editora,Grupo
                    st1.setInt(12, codClas);
                    st1.setInt(13, codEditora);
                    st1.setInt(14, codGrupo);

                    //Número do exemplar
                    st1.setInt(15, Integer.parseInt(txtExemplar.getText().trim()));

                    st1.setString(16, txtCutter.getText().trim());
                    st1.setString(17, txtCDD.getText().trim());
                    st1.setString(18, txtCDU.getText().trim());
                    st1.setString(19, txtTombo.getText().trim());

                    //Idioma e estadodolivro
                    //Código da jCombo
                    st1.setInt(20, codIdioma);
                    st1.setInt(21, codEstado);

                    //Status(F-V) Emprestar ou não F-se pode emprestar V-não pode
                    if (chkStatus.isSelected() == false) {
                        st1.setString(22, "F");
                    } else if (chkStatus.isSelected() == true) {
                        st1.setString(22, "V");
                    }
                    //Disponibilidade(Disponível(DI),Emprestado(EM),Reservado(RS),renovado(RN)
                    if (lblDisponibilidade.getText().equals("DISPONÍVEL")) {
                        st1.setString(23, "DI");
                    } else if (lblDisponibilidade.getText().equals("EMPRESTADO")) {
                        st1.setString(23, "EM");
                    } else if (lblDisponibilidade.getText().equals("RESERVADO")) {
                        st1.setString(23, "RS");
                    } else if (lblDisponibilidade.getText().equals("RENOVADO")) {
                        st1.setString(23, "RN");
                    }


                    st1.setString(24, txtResumo.getText().trim());
                    //Se nao tiver codigo de barras, coloca o codigo automaticamente
                    if (txtCodigodeBarras.getText().trim().equals("")) {
                        String formato = new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(txtCodigo.getText())));
                        txtCodigodeBarras.setText(formato);
                    }
                    st1.setString(25, txtCodigodeBarras.getText().trim());
                    st1.setInt(26, Integer.parseInt(txtCodigo.getText().trim()));

                    ru = st1.executeUpdate();
                    st1.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar na tabela cadlivros \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                }

            }

            if (ru > 0) {
                JOptionPane.showMessageDialog(null, "Registro atualizado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                txtCodigo.setText("");
                btnTodosActionPerformed(evt);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel7, false);
                lblDisponibilidade.setVisible(false);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel7);
                //Apaga todos os registros da tabela
                //Limpa a tabela para preencher novamente
                if (modelo2.getRowCount() > 0) {
//                        int x = -1;
                    int j = modelo2.getRowCount();
                    do {
                        modelo2.removeRow(0);
                        --j;
                    } while (j > 0);
                }
            }
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (txtTitulo.getText().equals("") && txtCodigo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nenhum registro a ser excluído !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            txtTitulo.requestFocus();


        } //Insert
        else {
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando


            int ri = 0;
            //Insere usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "DELETE FROM cadlivros WHERE codigo=? ";


            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                //st1.setString(2, txtNome.getText().trim());
                ri = st1.executeUpdate();
                st1.close();


            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao deletar \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);


            }

            if (ri > 0) {
                JOptionPane.showMessageDialog(null, "Registro excluído"
                        + " com sucesso", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel7);

                 //Apaga todos os registros da tabela
                    //Limpa a tabela para preencher novamente
                    if (modelo2.getRowCount() > 0) {
//                        int x = -1;
                        int j = modelo2.getRowCount();
                        do {
                            modelo2.removeRow(0);
                            --j;
                        } while (j > 0);
                    }

            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAddAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAutorActionPerformed

        //=================================================================
//     String[] coluna = {"Autor"};
//       modelo2 = new DefaultTableModel(null, coluna) {
//            //Não permitir a edição das células
//
//            @Override
//            public boolean isCellEditable(int row, int column) {
//                return false;
//            }
//        };
//        String[][] dados = {null};
//=====================================================================
        modelo2.insertRow(modelo2.getRowCount(), new Object[]{cbAutor.getSelectedItem()});
        jTable1.setModel(modelo2);

    }//GEN-LAST:event_btnAddAutorActionPerformed
    private void btnExcluiAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluiAutorActionPerformed
        if (jTable1.isCellSelected(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) && jTable1.getRowCount() > 0) {
            modelo2.removeRow(jTable1.getSelectedRow());
        }
    }//GEN-LAST:event_btnExcluiAutorActionPerformed

    private void btnSalvarVariosExemplaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarVariosExemplaresActionPerformed
        if (txtTitulo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Título !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            txtTitulo.requestFocus();
        } else if (cbClasLiteraria.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione a Classificação Literária !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbClasLiteraria.requestFocus();
        } else if (cbEditora.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione a Editora !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbEditora.requestFocus();
        } else if (cbGrupo.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o Grupo !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbGrupo.requestFocus();
        } else if (cbIdioma.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o idioma !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            cbIdioma.requestFocus();
        } else if (cbEstadodeConservacao.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o estado de conservação !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            cbEstadodeConservacao.requestFocus();
        } //Insert
        else if (novoCadastro == true) {

            //Pega o código dos ítens no ArrayList
            int codClas = 0, codEditora = 0, codGrupo = 0, codIdioma = 0, codEstado = 0;
            for (int x1 = 0; x1 < vClasLit.size(); x1++) {
                if (vClasLit.size() > 0) {
                    for (int i1 = 0; i1 < vClasLit.size(); i1++) {
                        if (((ClassificacoesLiterarias) vClasLit.get(i1)).getClasliterarias().equals(cbClasLiteraria.getSelectedItem().toString())) {
                            codClas = ((ClassificacoesLiterarias) vClasLit.get(i1)).getCodigo();
                        }
                    }
                }
            }

            for (int x2 = 0; x2 < vEditora.size(); x2++) {
                if (vEditora.size() > 0) {
                    for (int i2 = 0; i2 < vEditora.size(); i2++) {
                        if (((Editoras) vEditora.get(i2)).getEditora().equals(cbEditora.getSelectedItem().toString())) {
                            codEditora = ((Editoras) vEditora.get(i2)).getCodigo();
                        }
                    }
                }
            }
            for (int x3 = 0; x3 < vGrupo.size(); x3++) {
                if (vGrupo.size() > 0) {
                    for (int i3 = 0; i3 < vGrupo.size(); i3++) {
                        if (((Grupos) vGrupo.get(i3)).getGrupo().equals(cbGrupo.getSelectedItem().toString())) {
                            codGrupo = ((Grupos) vGrupo.get(i3)).getCodigo();
                        }
                    }
                }
            }
            for (int x4 = 0; x4 < vIdioma.size(); x4++) {
                if (vIdioma.size() > 0) {
                    for (int i4 = 0; i4 < vIdioma.size(); i4++) {
                        if (((Idiomas) vIdioma.get(i4)).getIdioma().equals(cbIdioma.getSelectedItem().toString())) {
                            codIdioma = ((Idiomas) vIdioma.get(i4)).getCodigo();
                        }
                    }
                }
            }

            for (int x6 = 0; x6 < vEstadodolivro.size(); x6++) {
                if (vEstadodolivro.size() > 0) {
                    for (int i5 = 0; i5 < vEstadodolivro.size(); i5++) {
                        if (((EstadoDoLivro) vEstadodolivro.get(i5)).getDescricao().equals(cbEstadodeConservacao.getSelectedItem().toString())) {
                            codEstado = ((EstadoDoLivro) vEstadodolivro.get(i5)).getCodigo();
                        }
                    }
                }
            }
            //==============================================================================
            //cria um objeto DB apontando para o banco especificado.
            DB banco = new DB();
            //conecta ao banco
            banco.connect();

            Query cMax = new Query(banco.conn);
            String sqlMax = "SELECT MAX(codigo) AS codigo FROM cadlivros ";
            cMax.open(sqlMax);
            int max = 0;
            if (cMax.next()) {
                try {
                    max = cMax.rs.getInt("codigo");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao pegar o valor máximo \n"
                            + ex.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
                }
            }

            max = max + 1;
            int max2 = max;
            //Mostra uma caixa de entrada para digitar a qtd de exemplares
            int qtd = Integer.parseInt(JOptionPane.showInputDialog("Digite a quantidade de exemplares iguais", JOptionPane.INFORMATION_MESSAGE));
            int ri = 0;
            if (qtd > 0) {
                //Insere primeiro na tabela cadlivros
                //Foi executado o insert acima
                //Insere usando formatacao JAVA(evita a injeção SQL)
                PreparedStatement st1 = null;
                String sqlInsert = "INSERT INTO cadlivros(codigo,data_2,hora,titulo,"
                        + "subtitulo,edicao,volume,datapublic,mes,ano,npaginas,local_2,"
                        + "codclas_literaria,codeditora,codgrupo,exemplar,cutter,cdd,cdu,"
                        + "tombo,codidioma,estadodolivro_id,status,disponibilidade,resumo,codigodebarras)"
                        + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                //=========================================
                //LOOP=====================================
                for (int z = 1; z <= qtd; z++) {

                    try {
                        st1 = banco.conn.prepareStatement(sqlInsert);
                        st1.setInt(1, max);

                        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                        java.util.Date dt = new Date();
                        java.sql.Date dataJDBC = new java.sql.Date(dt.getTime());
                        DateFormat h = new SimpleDateFormat("HH:mm:ss");
                        java.util.Date hr = new Date();
                        java.sql.Time horaJDBC = new java.sql.Time(hr.getTime());

                        txtData.setText(df.format(new Date()));
                        txtHora.setText(h.format(new Date()));
                        st1.setDate(2, dataJDBC);
                        st1.setTime(3, horaJDBC);

                        st1.setString(4, txtTitulo.getText().trim());
                        st1.setString(5, txtSubtitulo.getText().trim());
                        st1.setString(6, txtEdicao.getText().trim());
                        st1.setString(7, txtVolume.getText().trim());

                        //Converte para data a data de publicação=====================
                        if (txtDataPublicacao.getText().trim().equals("")) {
                            st1.setDate(8, null);
                        } else if (!txtDataPublicacao.getText().trim().equals("")) {
                            DateFormat dtFPublic = new SimpleDateFormat("dd/MM/yyyy");
                            java.util.Date dtP = dtFPublic.parse(txtDataPublicacao.getText().trim());
                            java.sql.Date dataPublicJDBC = new java.sql.Date(dtP.getTime());
                            st1.setDate(8, dataPublicJDBC);
                        }
//==============================================================================
                        //Inserindo valores nulos em campos inteiros
                        if (txtMes.getText().trim().equals("")) {
                            st1.setNull(9, java.sql.Types.INTEGER);
                        } else {
                            st1.setInt(9, Integer.parseInt(txtMes.getText().trim()));
                        }
                        if (txtAno.getText().trim().equals("")) {
                            st1.setNull(10, java.sql.Types.INTEGER);
                        } else {
                            st1.setInt(10, Integer.parseInt(txtAno.getText().trim()));
                        }
                        if (txtNPag.getText().trim().equals("")) {
                            st1.setNull(11, java.sql.Types.INTEGER);
                        } else {
                            st1.setInt(11, Integer.parseInt(txtNPag.getText().trim()));
                        }
                        //=========================================================================

                        st1.setString(12, txtLocal.getText().trim());
                        //Código da jCombo (Clas.Literária,Editora,Grupo
                        st1.setInt(13, codClas);
                        st1.setInt(14, codEditora);
                        st1.setInt(15, codGrupo);

                        //Número do exemplar
                        st1.setInt(16, z);

                        st1.setString(17, txtCutter.getText().trim());
                        st1.setString(18, txtCDD.getText().trim());
                        st1.setString(19, txtCDU.getText().trim());
                        st1.setString(20, txtTombo.getText().trim());

                        //Idioma e estadodolivro
                        //Código da jCombo
                        st1.setInt(21, codIdioma);
                        st1.setInt(22, codEstado);

                        //Status(F-V) Emprestar ou não F-se pode emprestar V-não pode
                        if (chkStatus.isSelected() == false) {
                            st1.setString(23, "F");
                        } else if (chkStatus.isSelected() == true) {
                            st1.setString(23, "V");
                        }
                        //Disponibilidade(Disponível(D),Emprestado(E),Reservado(RS),renovado(RN)
                        st1.setString(24, "DI");
                        st1.setString(25, txtResumo.getText().trim());
                        //Se nao tiver codigo de barras, coloca o codigo automaticamente
//                if (txtCodigodeBarras.getText().trim().equals("")) {
                        String formato = new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(max)));
//                    txtCodigodeBarras.setText(formato);
                        st1.setString(26, formato);
//                }
                        max++;

                        ri = st1.executeUpdate();
                        st1.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                    }

                }
            }

            //=============================TERMINADO LOOP======================                             
            //Se inseriu na tabela pai (cadlivros) e não foi adicionado autor
            if (ri > 0 && modelo2.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Registro adicionado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel7, false);
//                btnTodosActionPerformed(evt);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel7);
            }

            int riAutor = 0;
            if (ri > 0 && modelo2.getRowCount() > 0) {

                for (int z = 1; z <= qtd; z++) {
                    PreparedStatement stInsertAutor = null;
                    try {
                        String sqlInsertA = "INSERT INTO autoresdoitem(codlivro,codautor)VALUES("
                                + "?,?)";
                        stInsertAutor = banco.conn.prepareStatement(sqlInsertA);

                        //======Verifica se e igual e retorna o codigo
                        for (int row = 0; row < modelo2.getRowCount(); row++) {
                            for (int x = 0; x < vAutor.size(); x++) {
                                if (((Autores) vAutor.get(x)).getAutor().equals(jTable1.getModel().getValueAt(row, 0).toString())) {
                                    //Aumenta o código automaticamente
                                    stInsertAutor.setInt(1, max2);
                                    //Pega o código de cada autor
                                    stInsertAutor.setInt(2, ((Autores) vAutor.get(x)).getCodigo());
                                    riAutor = stInsertAutor.executeUpdate();
                                }
                            }
                        }
                        max2++;

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                    }
                    try {
                        stInsertAutor.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Erro ao fechar conexão (autoresdoitem). \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                    }

                }

            }

            //SE FOI EXECUTADO
            if (riAutor > 0) {
                JOptionPane.showMessageDialog(null, "Registro adicionado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel7, false);

                btnTodosActionPerformed(evt);
                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel7);
                //Apaga todos os registros da tabela
                //Limpa a tabela para preencher novamente
                if (modelo.getRowCount() > 0) {
//                        int x = -1;
                    int j = modelo.getRowCount();
                    do {
                        modelo.removeRow(0);
                        --j;
                    } while (j > 0);
                }
            }
        }

    }//GEN-LAST:event_btnSalvarVariosExemplaresActionPerformed

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
        //txtCodigo.setText("");
        //Volta para a tab principal
        jTabbedPane1.setSelectedIndex(0);
}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased

        long time = System.currentTimeMillis();

        banco2 = new DB();
        banco2.connect();
        Query consulta = new Query(banco2.conn);
        String campo = null;
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                campo = "c.codigo =" + Integer.parseInt(txtConsulta.getText().trim());
                break;
            case 1:
                campo = "sem_acento(c.codigodebarras) ILIKE '" + txtConsulta.getText().trim() + "%'";
                break;
            case 2:
                campo = "sem_acento(c.titulo) ILIKE '" + txtConsulta.getText().trim() + "%'";
                break;
            case 3:
                campo = "sem_acento(cl.clasliteraria) ILIKE '" + txtConsulta.getText().trim() + "%'";
                break;
            case 4:
                campo = "sem_acento(g.grupo) ILIKE '" + txtConsulta.getText().trim() + "%'";
                break;
            case 5:
                campo = "sem_acento(e.editora) ILIKE '" + txtConsulta.getText().trim() + "%'";
                break;
        }

        if (rdDisponivel.isSelected() == true) {
            //ILIKE é case insensitive para postgresql somente
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est"
                    + " WHERE c.codclas_literaria=cl.codigo AND"
                    + " c.codeditora=e.codigo AND"
                    + " c.codgrupo=g.codigo AND"
                    + " c.codidioma=i.codigo AND"
                    + " c.estadodolivro_id=est.codigo AND "
                    + campo
                    + " AND c.status='F'"
                    + " ORDER BY c.titulo ASC");
        } else if (rdNaoDisponivel.isSelected() == true) {
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est "
                    + "WHERE c.codclas_literaria=cl.codigo AND "
                    + "c.codeditora=e.codigo AND "
                    + "c.codgrupo=g.codigo AND "
                    + "c.codidioma=i.codigo AND "
                    + "c.estadodolivro_id=est.codigo AND "
                    + campo
                    + " AND c.status='V'"
                    + " ORDER BY c.titulo ASC");
        } else if (rdTodos.isSelected() == true) {
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est "
                    + "WHERE c.codclas_literaria=cl.codigo AND "
                    + "c.codeditora=e.codigo AND "
                    + "c.codgrupo=g.codigo AND "
                    + "c.codidioma=i.codigo AND "
                    + "c.estadodolivro_id=est.codigo AND "
                    + campo
                    + " ORDER BY c.titulo ASC");
        }

        vetor = new ArrayList();
        item = new Itens();

        int codigo;
        Date data;
        Time hora;
        String titulo, subtitulo, edicao, volume;
        Date datapublic;
        int mes, ano, npaginas;
        String local_2, codigodebarras, clasliteraria, editora, grupo;
        String disponibilidade;
        int exemplar;
        String cdd, cutter, cdu, tombo, idioma, estadodolivro,
                status, resumo;

        while (consulta.next()) {
            try {
                codigo = consulta.rs.getInt("codigo");
                data = consulta.rs.getDate("data_2");
                hora = consulta.rs.getTime("hora");
                titulo = consulta.rs.getString("titulo");
                subtitulo = consulta.rs.getString("subtitulo");
                edicao = consulta.rs.getString("edicao");
                volume = consulta.rs.getString("volume");
                datapublic = consulta.rs.getDate("datapublic");
                mes = consulta.rs.getInt("mes");
                ano = consulta.rs.getInt("ano");
                npaginas = consulta.rs.getInt("npaginas");
                local_2 = consulta.rs.getString("local_2");
                codigodebarras = consulta.rs.getString("codigodebarras");
                clasliteraria = consulta.rs.getString("clasliteraria");
                editora = consulta.rs.getString("editora");
                grupo = consulta.rs.getString("grupo");
                disponibilidade = consulta.rs.getString("disponibilidade");
                exemplar = consulta.rs.getInt("exemplar");
                cdd = consulta.rs.getString("cdd");
                cutter = consulta.rs.getString("cutter");
                cdu = consulta.rs.getString("cdu");
                tombo = consulta.rs.getString("tombo");
                idioma = consulta.rs.getString("idioma");
                estadodolivro = consulta.rs.getString("estadodolivro");
                status = consulta.rs.getString("status");
                resumo = consulta.rs.getString("resumo");

                item.setCodigo(codigo);
                item.setData_2(data);
                item.setHora(hora);
                item.setTitulo(titulo);
                item.setSubtitulo(subtitulo);
                item.setEdicao(edicao);
                item.setVolume(volume);
                item.setDatapublic(datapublic);
                item.setMes(mes);
                item.setAno(ano);
                item.setNpaginas(npaginas);
                item.setLocal_2(local_2);
                item.setCodigodebarras(codigodebarras);
                item.setClasliteraria(clasliteraria);
                item.setEditora(editora);
                item.setGrupo(grupo);
                item.setDisponibilidade(disponibilidade);
                item.setExemplar(exemplar);
                item.setCdd(cdd);
                item.setCutter(cutter);
                item.setCdu(cdu);
                item.setTombo(tombo);
                item.setIdioma(idioma);
                item.setEstadodolivro(estadodolivro);
                item.setStatus(status);
                item.setResumo(resumo);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }

            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Itens(item.getCodigo(), item.getData_2(),
                    item.getHora(), item.getTitulo(), item.getSubtitulo(),
                    item.getEdicao(), item.getVolume(), item.getDatapublic(),
                    item.getMes(), item.getAno(), item.getNpaginas(), item.getLocal_2(),
                    item.getCodigodebarras(), item.getClasliteraria(),
                    item.getEditora(), item.getGrupo(), item.getDisponibilidade(),
                    item.getExemplar(), item.getCdd(), item.getCutter(), item.getCdu(),
                    item.getTombo(), item.getIdioma(), item.getEstadodolivro(),
                    item.getStatus(), item.getResumo()));

        }
        banco2.disconnect();

        String[] colunas = {"Codigo", "Código de Barras", "Título", "Disponibilidade",
            "Status", "Classificação Literaria", "Grupo", "Editora"};
        //Deixa nulo o vetor de dados
        modelo = new DefaultTableModel(null, colunas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};


        for (int x = 0; x < vetor.size(); x++) {

            //DISPONÍVEL PARA EMPRÉSTIMO
            modelo.addRow(dados);
            modelo.setValueAt(((Itens) vetor.get(x)).getCodigo(), x, 0);
            modelo.setValueAt(((Itens) vetor.get(x)).getCodigodebarras(), x, 1);
            modelo.setValueAt(((Itens) vetor.get(x)).getTitulo(), x, 2);

            //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,ou DISPONÍVEL DI
            if (((Itens) vetor.get(x)).getDisponibilidade().equals("EM")) {
                modelo.setValueAt("EMPRESTADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("RS")) {
                modelo.setValueAt("RESERVADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("RN")) {
                modelo.setValueAt("RENOVADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("DI")) {
                modelo.setValueAt("DISPONÍVEL", x, 3);
            }
            if (((Itens) vetor.get(x)).getStatus().equals("F")) {
                modelo.setValueAt("EMPRESTAR", x, 4);
            } else if (((Itens) vetor.get(x)).getStatus().equals("V")) {
                modelo.setValueAt("NÃO EMPRESTAR", x, 4);
            }

            modelo.setValueAt(((Itens) vetor.get(x)).getClasliteraria(), x, 5);
            modelo.setValueAt(((Itens) vetor.get(x)).getGrupo(), x, 6);
            modelo.setValueAt(((Itens) vetor.get(x)).getEditora(), x, 7);

        }

        jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                this.setHorizontalAlignment(CENTER);
                Object ref = modelo.getValueAt(row, 3);
                if (ref != null && ref.equals("DISPONÍVEL")) {
//                    setBackground(Color.red);
                    setForeground(Color.blue);
                    setFont(new Font("Tahoma", Font.BOLD, 12));
                } else {
//                    setBackground(Color.cyan);
                    setForeground(Color.black);
                    setFont(new Font("Tahoma", 0, 12));

                }
                return this;
            }
        });
        jTable2.setModel(modelo);
        //=====================================================================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
         //"Codigo", "Código de Barras", "Título", "Disponibilidade",
//        "Status", "Classificação Literaria", "Grupo", "Editora"
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(80);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(350);
        jTable2.getColumnModel().getColumn(3).setPreferredWidth(100);
        jTable2.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTable2.getColumnModel().getColumn(5).setPreferredWidth(350);
        jTable2.getColumnModel().getColumn(6).setPreferredWidth(350);
        jTable2.getColumnModel().getColumn(7).setPreferredWidth(350);
        


    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
       
        long time = System.currentTimeMillis();

        banco2 = new DB();
        banco2.connect();
        Query consulta = new Query(banco2.conn);

        if (rdDisponivel.isSelected() == true) {
            //ILIKE é case insensitive para postgresql somente
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est "
                    + "WHERE c.codclas_literaria=cl.codigo AND "
                    + "c.codeditora=e.codigo AND "
                    + "c.codgrupo=g.codigo AND "
                    + "c.codidioma=i.codigo AND "
                    + "c.estadodolivro_id=est.codigo AND "
                    + "c.status='F'"
                    + " ORDER BY titulo ASC");

        } else if (rdNaoDisponivel.isSelected() == true) {
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est "
                    + "WHERE c.codclas_literaria=cl.codigo AND "
                    + "c.codeditora=e.codigo AND "
                    + "c.codgrupo=g.codigo AND "
                    + "c.codidioma=i.codigo AND "
                    + "c.estadodolivro_id=est.codigo AND "
                    + "c.status='V'"
                    + " ORDER BY titulo ASC");
        } else if (rdTodos.isSelected() == true) {
            consulta.open("SELECT c.codigo,c.data_2,c.hora,c.titulo,"
                    + "c.subtitulo,c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,"
                    + "c.local_2,c.codigodebarras,cl.clasliteraria,e.editora,g.grupo,"
                    + "c.disponibilidade,c.exemplar,c.cdd,c.cutter,c.cdu,c.tombo,"
                    + "i.idioma,est.descricao AS estadodolivro,c.status,c.resumo"
                    + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,cadgrupos g,"
                    + "cadidiomas i,cadestadodolivro est "
                    + "WHERE c.codclas_literaria=cl.codigo AND "
                    + "c.codeditora=e.codigo AND "
                    + "c.codgrupo=g.codigo AND "
                    + "c.codidioma=i.codigo AND "
                    + "c.estadodolivro_id=est.codigo"
                    + " ORDER BY titulo ASC");
        }

        vetor = new ArrayList();
        item = new Itens();

        int codigo;
        Date data;
        Time hora;
        String titulo, subtitulo, edicao, volume;
        Date datapublic;
        int mes, ano, npaginas;
        String local_2, codigodebarras, clasliteraria, editora, grupo;
        String disponibilidade;
        int exemplar;
        String cdd, cutter, cdu, tombo, idioma, estadodolivro,
                status, resumo;

        while (consulta.next()) {
            try {
                codigo = consulta.rs.getInt("codigo");
                data = consulta.rs.getDate("data_2");
                hora = consulta.rs.getTime("hora");
                titulo = consulta.rs.getString("titulo");
                subtitulo = consulta.rs.getString("subtitulo");
                edicao = consulta.rs.getString("edicao");
                volume = consulta.rs.getString("volume");
                datapublic = consulta.rs.getDate("datapublic");
                mes = consulta.rs.getInt("mes");
                ano = consulta.rs.getInt("ano");
                npaginas = consulta.rs.getInt("npaginas");
                local_2 = consulta.rs.getString("local_2");
                codigodebarras = consulta.rs.getString("codigodebarras");
                clasliteraria = consulta.rs.getString("clasliteraria");
                editora = consulta.rs.getString("editora");
                grupo = consulta.rs.getString("grupo");
                disponibilidade = consulta.rs.getString("disponibilidade");
                exemplar = consulta.rs.getInt("exemplar");
                cdd = consulta.rs.getString("cdd");
                cutter = consulta.rs.getString("cutter");
                cdu = consulta.rs.getString("cdu");
                tombo = consulta.rs.getString("tombo");
                idioma = consulta.rs.getString("idioma");
                estadodolivro = consulta.rs.getString("estadodolivro");
                status = consulta.rs.getString("status");
                resumo = consulta.rs.getString("resumo");

                item.setCodigo(codigo);
                item.setData_2(data);
                item.setHora(hora);
                item.setTitulo(titulo);
                item.setSubtitulo(subtitulo);
                item.setEdicao(edicao);
                item.setVolume(volume);
                item.setDatapublic(datapublic);
                item.setMes(mes);
                item.setAno(ano);
                item.setNpaginas(npaginas);
                item.setLocal_2(local_2);
                item.setCodigodebarras(codigodebarras);
                item.setClasliteraria(clasliteraria);
                item.setEditora(editora);
                item.setGrupo(grupo);
                item.setDisponibilidade(disponibilidade);
                item.setExemplar(exemplar);
                item.setCdd(cdd);
                item.setCutter(cutter);
                item.setCdu(cdu);
                item.setTombo(tombo);
                item.setIdioma(idioma);
                item.setEstadodolivro(estadodolivro);
                item.setStatus(status);
                item.setResumo(resumo);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }

            //Colocar os gets para poder funcionar corretamente
            vetor.add(new Itens(item.getCodigo(), item.getData_2(),
                    item.getHora(), item.getTitulo(), item.getSubtitulo(),
                    item.getEdicao(), item.getVolume(), item.getDatapublic(),
                    item.getMes(), item.getAno(), item.getNpaginas(), item.getLocal_2(),
                    item.getCodigodebarras(), item.getClasliteraria(),
                    item.getEditora(), item.getGrupo(), item.getDisponibilidade(),
                    item.getExemplar(), item.getCdd(), item.getCutter(), item.getCdu(),
                    item.getTombo(), item.getIdioma(), item.getEstadodolivro(),
                    item.getStatus(), item.getResumo()));

        }
        banco2.disconnect();
//        carregaTodos();
        String[] colunas = {"Codigo", "Código de Barras", "Título", "Disponibilidade",
            "Status", "Classificação Literaria", "Grupo", "Editora"};
        //Deixa nulo o vetor de dados
        modelo = new DefaultTableModel(null, colunas) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        Object[][] dados = {null};


        for (int x = 0; x < vetor.size(); x++) {

            //DISPONÍVEL PARA EMPRÉSTIMO
            modelo.addRow(dados);
            modelo.setValueAt(((Itens) vetor.get(x)).getCodigo(), x, 0);
            modelo.setValueAt(((Itens) vetor.get(x)).getCodigodebarras(), x, 1);
            modelo.setValueAt(((Itens) vetor.get(x)).getTitulo(), x, 2);

            //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,LENDO NO LOCAL LL,ou DISPONÍVEL DI
            if (((Itens) vetor.get(x)).getDisponibilidade().equals("EM")) {
                modelo.setValueAt("EMPRESTADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("RS")) {
                modelo.setValueAt("RESERVADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("RN")) {
                modelo.setValueAt("RENOVADO", x, 3);
            } else if (((Itens) vetor.get(x)).getDisponibilidade().equals("LL")) {
                modelo.setValueAt("LENDO", x, 3);
            }else if (((Itens) vetor.get(x)).getDisponibilidade().equals("DI")) {
                modelo.setValueAt("DISPONÍVEL", x, 3);
            }
            if (((Itens) vetor.get(x)).getStatus().equals("F")) {
                modelo.setValueAt("EMPRESTAR", x, 4);
            } else if (((Itens) vetor.get(x)).getStatus().equals("V")) {
                modelo.setValueAt("NÃO EMPRESTAR", x, 4);
            }

            modelo.setValueAt(((Itens) vetor.get(x)).getClasliteraria(), x, 5);
            modelo.setValueAt(((Itens) vetor.get(x)).getGrupo(), x, 6);
            modelo.setValueAt(((Itens) vetor.get(x)).getEditora(), x, 7);

        }   
              
jTable2.setModel(modelo);
            jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
               
                this.setHorizontalAlignment(CENTER);
                column=8;
                Object ref = modelo.getValueAt(row, 3);
                if (ref != null && ref.equals("DISPONÍVEL")) {              
                    setBackground(new Color(204,204,255));
                    setForeground(Color.blue);
                    setFont(new Font("Tahoma", Font.BOLD, 12));
                }
                 else {      
                    setBackground(null);
                    setForeground(Color.black);
                    setFont(new Font("Tahoma", 0, 12));

                }
                return  super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
        jTable2.setSelectionBackground(new Color(51,153,255));
        jTable2.setSelectionForeground(new Color(255,255,255));        
        
        //=====================================================================
        time = System.currentTimeMillis() - time;  // ms

        if (modelo.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(modelo.getRowCount() + " registro(s) encontrado(s) ! Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
      
         //"Codigo", "Código de Barras", "Título", "Disponibilidade",
//        "Status", "Classificação Literaria", "Grupo", "Editora"
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(80);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(120);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(380);
        jTable2.getColumnModel().getColumn(3).setPreferredWidth(120);
        jTable2.getColumnModel().getColumn(4).setPreferredWidth(120);
        jTable2.getColumnModel().getColumn(5).setPreferredWidth(380);
        jTable2.getColumnModel().getColumn(6).setPreferredWidth(380);
        jTable2.getColumnModel().getColumn(7).setPreferredWidth(380);


}//GEN-LAST:event_btnTodosActionPerformed

    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed
        int i;

        for (i = 0; i < vetor.size(); i++) {
            if (((Itens) vetor.get(i)).getCodigo() == jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0)) {
                txtCodigo.setText(String.valueOf(((Itens) vetor.get(i)).getCodigo()));
                //Formata a data
                DateFormat dt = new SimpleDateFormat("dd/MM/yyyy");
                txtData.setText(dt.format(((Itens) vetor.get(i)).getData_2()));

                txtHora.setText(((Itens) vetor.get(i)).getHora().toString());
                txtTitulo.setText(((Itens) vetor.get(i)).getTitulo());
                txtSubtitulo.setText(((Itens) vetor.get(i)).getSubtitulo());
                txtEdicao.setText(((Itens) vetor.get(i)).getEdicao());
                txtVolume.setText(((Itens) vetor.get(i)).getVolume());
                if (((Itens) vetor.get(i)).getDatapublic() != null) {
                    DateFormat dtPublic = new SimpleDateFormat("dd/MM/yyyy");
                    txtDataPublicacao.setText(dtPublic.format(((Itens) vetor.get(i)).getDatapublic()));
                }

                if (String.valueOf(((Itens) vetor.get(i)).getMes()).toString().length() == 1) {
                    txtMes.setText("0" + ((Itens) vetor.get(i)).getMes());
                } else if (String.valueOf(((Itens) vetor.get(i)).getMes()).toString().length() == 2) {
                    txtMes.setText(String.valueOf(((Itens) vetor.get(i)).getMes()));
                }
                if (String.valueOf(((Itens) vetor.get(i)).getAno()).toString().length() == 1) {
                    txtAno.setText("0" + ((Itens) vetor.get(i)).getAno());
                } else if (String.valueOf(((Itens) vetor.get(i)).getAno()).toString().length() == 2) {
                    txtAno.setText(String.valueOf(((Itens) vetor.get(i)).getAno()));
                }

                txtNPag.setText(String.valueOf(((Itens) vetor.get(i)).getNpaginas()));
                txtCodigodeBarras.setText(((Itens) vetor.get(i)).getCodigodebarras());
                cbClasLiteraria.setSelectedItem(((Itens) vetor.get(i)).getClasliteraria());
                cbEditora.setSelectedItem(((Itens) vetor.get(i)).getEditora());
                cbGrupo.setSelectedItem(((Itens) vetor.get(i)).getGrupo());

                //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,ou DISPONÍVEL DI
                if (((Itens) vetor.get(i)).getDisponibilidade().equals("EM")) {
                    lblDisponibilidade.setVisible(true);
                    lblDisponibilidade.setText("EMPRESTADO");
                    lblDisponibilidade.setForeground(Color.red);
                } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("RS")) {
                    lblDisponibilidade.setVisible(true);
                    lblDisponibilidade.setText("RESERVADO");
                    lblDisponibilidade.setForeground(Color.red);
                } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("RN")) {
                    lblDisponibilidade.setVisible(true);
                    lblDisponibilidade.setText("RENOVADO");
                    lblDisponibilidade.setForeground(Color.red);
                } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("DI")) {
                    lblDisponibilidade.setVisible(false);
                    lblDisponibilidade.setText("DISPONÍVEL");
                    lblDisponibilidade.setForeground(Color.blue);

                }
                txtExemplar.setText(String.valueOf(((Itens) vetor.get(i)).getExemplar()));
                txtCDD.setText(((Itens) vetor.get(i)).getCdd());
                txtCutter.setText(((Itens) vetor.get(i)).getCutter());
                txtCDU.setText(((Itens) vetor.get(i)).getCdu());
                txtTombo.setText(((Itens) vetor.get(i)).getTombo());
                cbIdioma.setSelectedItem(((Itens) vetor.get(i)).getIdioma());
                cbEstadodeConservacao.setSelectedItem(((Itens) vetor.get(i)).getEstadodolivro());

                if (((Itens) vetor.get(i)).getStatus().equals("F")) {
                    //Disponível para empréstimo
                    chkStatus.setSelected(false);
                } else {
                    //Não disponível para empréstimo
                    chkStatus.setSelected(true);
                }
                txtResumo.setText(((Itens) vetor.get(i)).getResumo());

                MostraAutoresDoItem(jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0).toString());
                //========================= 
                btnEditar.setEnabled(true);
                btnExcluir.setEnabled(true);
                btnAdicionar.setEnabled(true);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(true);
                jTabbedPane1.setSelectedIndex(0);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel7, false);


            }
        }



}//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int i;
        if (jTable2.getRowCount() > 0 && evt.getClickCount() == 2) {

            for (i = 0; i < vetor.size(); i++) {
                if (((Itens) vetor.get(i)).getCodigo() == jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0)) {
                    txtCodigo.setText(String.valueOf(((Itens) vetor.get(i)).getCodigo()));
                    //Formata a data 
                    DateFormat dt = new SimpleDateFormat("dd/MM/yyyy");
                    txtData.setText(dt.format(((Itens) vetor.get(i)).getData_2()));

                    txtHora.setText(((Itens) vetor.get(i)).getHora().toString());
                    txtTitulo.setText(((Itens) vetor.get(i)).getTitulo());
                    txtSubtitulo.setText(((Itens) vetor.get(i)).getSubtitulo());
                    txtEdicao.setText(((Itens) vetor.get(i)).getEdicao());
                    txtVolume.setText(((Itens) vetor.get(i)).getVolume());
                    if (((Itens) vetor.get(i)).getDatapublic() != null) {
                        DateFormat dtPublic = new SimpleDateFormat("dd/MM/yyyy");
                        txtDataPublicacao.setText(dtPublic.format(((Itens) vetor.get(i)).getDatapublic()));
                    }

                    if (String.valueOf(((Itens) vetor.get(i)).getMes()).toString().length() == 1
                            && ((Itens) vetor.get(i)).getMes() > 0) {
                        txtMes.setText("0" + ((Itens) vetor.get(i)).getMes());
                    } else if (String.valueOf(((Itens) vetor.get(i)).getMes()).toString().length() == 2
                            && ((Itens) vetor.get(i)).getMes() > 0) {
                        txtMes.setText(String.valueOf(((Itens) vetor.get(i)).getMes()));
                    } else if (((Itens) vetor.get(i)).getMes() == 0) {
                        txtMes.setText("");
                    }
                    if (String.valueOf(((Itens) vetor.get(i)).getAno()).toString().length() == 1
                            && ((Itens) vetor.get(i)).getAno() != 0) {
                        txtAno.setText("0" + ((Itens) vetor.get(i)).getAno());
                    } else if (String.valueOf(((Itens) vetor.get(i)).getAno()).toString().length() == 2
                            && ((Itens) vetor.get(i)).getAno() != 0) {
                        txtAno.setText(String.valueOf(((Itens) vetor.get(i)).getAno()));
                    } else if (((Itens) vetor.get(i)).getAno() == 0) {
                        txtAno.setText("");
                    }

                    if (((Itens) vetor.get(i)).getNpaginas() == 0) {
                        txtNPag.setText("");
                    } else if (((Itens) vetor.get(i)).getNpaginas() > 0) {
                        txtNPag.setText(String.valueOf(((Itens) vetor.get(i)).getNpaginas()));
                    }

                    txtCodigodeBarras.setText(((Itens) vetor.get(i)).getCodigodebarras());
                    cbClasLiteraria.setSelectedItem(((Itens) vetor.get(i)).getClasliteraria());
                    cbEditora.setSelectedItem(((Itens) vetor.get(i)).getEditora());
                    cbGrupo.setSelectedItem(((Itens) vetor.get(i)).getGrupo());

                    //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,ou DISPONÍVEL DI
                    if (((Itens) vetor.get(i)).getDisponibilidade().equals("EM")) {
                        lblDisponibilidade.setVisible(true);
                        lblDisponibilidade.setText("EMPRESTADO");
                        lblDisponibilidade.setForeground(Color.red);
                    } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("RS")) {
                        lblDisponibilidade.setVisible(true);
                        lblDisponibilidade.setText("RESERVADO");
                        lblDisponibilidade.setForeground(Color.red);
                    } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("RN")) {
                        lblDisponibilidade.setVisible(true);
                        lblDisponibilidade.setText("RENOVADO");
                        lblDisponibilidade.setForeground(Color.red);
                    } else if (((Itens) vetor.get(i)).getDisponibilidade().equals("DI")) {
                        lblDisponibilidade.setVisible(false);
                        lblDisponibilidade.setText("DISPONÍVEL");
                        lblDisponibilidade.setForeground(Color.blue);

                    }
                    txtExemplar.setText(String.valueOf(((Itens) vetor.get(i)).getExemplar()));
                    txtCDD.setText(((Itens) vetor.get(i)).getCdd());
                    txtCutter.setText(((Itens) vetor.get(i)).getCutter());
                    txtCDU.setText(((Itens) vetor.get(i)).getCdu());
                    txtTombo.setText(((Itens) vetor.get(i)).getTombo());
                    cbIdioma.setSelectedItem(((Itens) vetor.get(i)).getIdioma());
                    cbEstadodeConservacao.setSelectedItem(((Itens) vetor.get(i)).getEstadodolivro());

                    if (((Itens) vetor.get(i)).getStatus().equals("F")) {
                        //Disponível para empréstimo
                        chkStatus.setSelected(false);
                    } else {
                        //Não disponível para empréstimo
                        chkStatus.setSelected(true);
                    }
                    txtResumo.setText(((Itens) vetor.get(i)).getResumo());

                    MostraAutoresDoItem(jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0).toString());
                    //======================
                    btnEditar.setEnabled(true);
                    btnExcluir.setEnabled(true);
                    btnAdicionar.setEnabled(true);
                    btnCancelar.setEnabled(false);
                    btnSalvar.setEnabled(false);
                    btnSalvarVariosExemplares.setEnabled(false);
                    jTabbedPane1.setSelectedIndex(0);
                    f.ativarCampos(painel2, false);
                    f.ativarCampos(painel3, false);
                    f.ativarCampos(painel4, false);
                    f.ativarCampos(painel5, false);
                    f.ativarCampos(painel7, false);

                }
            }


        }

    }//GEN-LAST:event_jTable2MouseClicked

    private void btnConsultaAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaAutorActionPerformed

        jdfrmConsultaAutores ca = new jdfrmConsultaAutores(null, closable);
//        this.getDesktopPane().add(ca);
        ca.setVisible(true);
        ca.toFront();
//        abrirTela(ca.getClass());
        if (ca.okSelecionado == true) {

            cbAutor.setSelectedItem(ca.getNome());
            ca.setVisible(false);
            ca.dispose();

        }



    }//GEN-LAST:event_btnConsultaAutorActionPerformed

    private void btnConsultaClasLiterariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaClasLiterariaActionPerformed
        jdfrmConsultaClasLiteraria cl = new jdfrmConsultaClasLiteraria(null, closable);
//        this.getDesktopPane().add(ca);
        cl.setVisible(true);
        cl.toFront();
//        abrirTela(ca.getClass());
        if (cl.okSelecionado == true) {

            cbClasLiteraria.setSelectedItem(cl.getNome());
            cl.setVisible(false);
            cl.dispose();

        }
    }//GEN-LAST:event_btnConsultaClasLiterariaActionPerformed

    private void btnConsultaEditoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaEditoraActionPerformed
        jdfrmConsultaEditora e = new jdfrmConsultaEditora(null, closable);
//        this.getDesktopPane().add(ca);
        e.setVisible(true);
        e.toFront();
//        abrirTela(ca.getClass());
        if (e.okSelecionado == true) {

            cbEditora.setSelectedItem(e.getNome());
            e.setVisible(false);
            e.dispose();

        }
    }//GEN-LAST:event_btnConsultaEditoraActionPerformed

    private void btnConsultaGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaGrupoActionPerformed
        jdfrmConsultaGrupo cg = new jdfrmConsultaGrupo(null, closable);
//        this.getDesktopPane().add(ca);
        cg.setVisible(true);
        cg.toFront();
//        abrirTela(ca.getClass());
        if (cg.okSelecionado == true) {

            cbGrupo.setSelectedItem(cg.getNome());
            cg.setVisible(false);
            cg.dispose();

        }

    }//GEN-LAST:event_btnConsultaGrupoActionPerformed

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        switch (cbFiltro.getSelectedIndex()){
            case  0:
                //Código
                txtConsulta.setDocument(new DocSomenteNumeros());
                break;
            case 1:
                //Código de barras
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 2:
                //Título
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 3:
                //Clas. Literária
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 4:
                //Grupo
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 5:
                //Editora
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAutor;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnConsultaAutor;
    private javax.swing.JButton btnConsultaClasLiteraria;
    private javax.swing.JButton btnConsultaEditora;
    private javax.swing.JButton btnConsultaGrupo;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluiAutor;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarVariosExemplares;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cbAutor;
    private javax.swing.JComboBox cbClasLiteraria;
    private javax.swing.JComboBox cbEditora;
    private javax.swing.JComboBox cbEstadodeConservacao;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JComboBox cbGrupo;
    private javax.swing.JComboBox cbIdioma;
    private javax.swing.JCheckBox chkStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDisponibilidade;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JPanel painel3;
    private javax.swing.JPanel painel4;
    private javax.swing.JPanel painel5;
    private javax.swing.JPanel painel6;
    private javax.swing.JPanel painel7;
    private javax.swing.JRadioButton rdDisponivel;
    private javax.swing.JRadioButton rdNaoDisponivel;
    private javax.swing.JRadioButton rdTodos;
    private javax.swing.JTextField txtAno;
    private javax.swing.JTextField txtCDD;
    private javax.swing.JTextField txtCDU;
    public javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtCodigodeBarras;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JTextField txtCutter;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDataPublicacao;
    private javax.swing.JTextField txtEdicao;
    private javax.swing.JTextField txtExemplar;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtNPag;
    private javax.swing.JTextArea txtResumo;
    private javax.swing.JTextField txtSubtitulo;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtTombo;
    private javax.swing.JTextField txtVolume;
    // End of variables declaration//GEN-END:variables
}
