/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadLeitores.java
 *
 * Created on 22/09/2010, 19:44:30
 */
package Forms;

import Classes2.Bairro;
import Classes2.CategoriadoLeitor;
import Classes2.Cidade;
import Classes2.FormacaoAcademica;
import Classes2.Leitores;
import Classes2.NiveldeEscolaridade;
import Classes2.TipodeFormacao;
import Classes2.UF;
import FormsConsulta.MkTableModel;
import java.awt.AWTKeyStroke;
import java.awt.Image;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.TableRowSorter;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Funcoes;
import Classes.Query;
import Classes2.Cidade2;
import Classes2.UF2;

/**
 *
 * @author MARK
 */
public class ifrmCadLeitores extends javax.swing.JInternalFrame {

    private boolean novoCadastro;
    private DB banco;
    private Funcoes f = new Funcoes();
    //private Leitores leitor;
    //Modelo implementado da jTable////////////////////////////////////////////
    private TableRowSorter<MkTableModel> sorter;
    private MkTableModel model;

    /** Creates new form ifrmCadLeitores */
    public ifrmCadLeitores() {

        initComponents();

        //Limita a qtd de caracteres
        txtNome.setDocument(new FixedLengthDocument(40));
        txtIdade.setDocument(new FixedLengthDocument(3));
        txtDataNascimento.setDocument(new FixedLengthDocument(10));
        txtNaturalidade.setDocument(new FixedLengthDocument(20));
        txtEndereco.setDocument(new FixedLengthDocument(40));
        txtNCasa.setDocument(new FixedLengthDocument(5));
        txtCep.setDocument(new FixedLengthDocument(9));//68628-015
        txtReligiao.setDocument(new FixedLengthDocument(20));
        txtCpf.setDocument(new FixedLengthDocument(14));
        txtRg.setDocument(new FixedLengthDocument(20));
        txtTelefone.setDocument(new FixedLengthDocument(13));
        txtCelular.setDocument(new FixedLengthDocument(13));
        txtEmail.setDocument(new FixedLengthDocument(50));
        txtInstituicao.setDocument(new FixedLengthDocument(50));
        txtTurma.setDocument(new FixedLengthDocument(20));
        txtSerie.setDocument(new FixedLengthDocument(10));
        txtDatadaConclusao.setDocument(new FixedLengthDocument(10));
        txtNomedoPai.setDocument(new FixedLengthDocument(40));
        txtProfissaodoPai.setDocument(new FixedLengthDocument(40));
        txtNomedaMae.setDocument(new FixedLengthDocument(40));
        txtProfissaodaMae.setDocument(new FixedLengthDocument(40));
        txtNomedoResponsavel.setDocument(new FixedLengthDocument(40));
        txtProfissaodoLeitor.setDocument(new FixedLengthDocument(40));

        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpPrincipal = new javax.swing.JPanel();
        painel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        cbCategoriadoLeitor = new javax.swing.JComboBox();
        txtNome = new javax.swing.JTextField();
        cbSexo = new javax.swing.JComboBox();
        cbEstadoCivil = new javax.swing.JComboBox();
        txtIdade = new javax.swing.JTextField();
        txtDataNascimento = new javax.swing.JTextField();
        txtNaturalidade = new javax.swing.JTextField();
        txtEndereco = new javax.swing.JTextField();
        txtNCasa = new javax.swing.JTextField();
        cbUf = new javax.swing.JComboBox();
        cbCidade = new javax.swing.JComboBox();
        txtCep = new javax.swing.JTextField();
        cbBairro = new javax.swing.JComboBox();
        txtReligiao = new javax.swing.JTextField();
        txtCpf = new javax.swing.JTextField();
        txtRg = new javax.swing.JTextField();
        painel2 = new javax.swing.JPanel();
        cbSituacao = new javax.swing.JComboBox();
        btnCarregaFoto = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        lblFoto = new javax.swing.JLabel();
        jpContatoeFormacao = new javax.swing.JPanel();
        painel3 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        txtCelular = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        painel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        cbNiveldeEscolaridade = new javax.swing.JComboBox();
        txtInstituicao = new javax.swing.JTextField();
        cbFormacaoAcademica = new javax.swing.JComboBox();
        cbTipodeFormacao = new javax.swing.JComboBox();
        cbUfdaInstituicao = new javax.swing.JComboBox();
        cbCidadedaInstituicao = new javax.swing.JComboBox();
        txtTurma = new javax.swing.JTextField();
        txtSerie = new javax.swing.JTextField();
        txtDatadaConclusao = new javax.swing.JTextField();
        jpFiliacao = new javax.swing.JPanel();
        painel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtNomedoPai = new javax.swing.JTextField();
        txtProfissaodoPai = new javax.swing.JTextField();
        txtNomedaMae = new javax.swing.JTextField();
        txtProfissaodaMae = new javax.swing.JTextField();
        txtNomedoResponsavel = new javax.swing.JTextField();
        txtProfissaodoLeitor = new javax.swing.JTextField();
        jpConsulta = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro dos Leitores");
        setMinimumSize(new java.awt.Dimension(870, 570));
        setPreferredSize(new java.awt.Dimension(870, 570));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(834, 479));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(834, 479));
        jTabbedPane1.setRequestFocusEnabled(false);

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dados principais"));

        jLabel1.setText("Código");

        jLabel2.setText("Data");

        jLabel3.setText("Hora");

        jLabel4.setText("Nome do Leitor");

        jLabel5.setText("Endereço");

        jLabel8.setText("Sexo");

        jLabel6.setText("Nº da Casa");

        jLabel7.setText("Estado Civil");

        jLabel9.setText("Idade");

        jLabel10.setText("UF");

        jLabel11.setText("Cidade");

        jLabel12.setText("Bairro");

        jLabel13.setText("CEP");

        jLabel14.setText("Data de Nasc.");

        jLabel15.setText("Naturalidade");

        jLabel16.setText("Religião");

        jLabel20.setText("CPF");

        jLabel21.setText("RG");

        jLabel38.setText("Categoria do Leitor");

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        txtData.setEditable(false);
        txtData.setEnabled(false);

        txtHora.setEditable(false);
        txtHora.setEnabled(false);

        cbSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Masculino", "Feminino" }));

        cbEstadoCivil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Solteiro(a)", "Casado(a)", "Divorciado(a)", "Viúvo(a)" }));

        txtIdade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdadeKeyTyped(evt);
            }
        });

        txtDataNascimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataNascimentoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDataNascimentoKeyTyped(evt);
            }
        });

        txtNCasa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNCasaKeyTyped(evt);
            }
        });

        cbUf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbUfFocusLost(evt);
            }
        });

        cbCidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbCidadeFocusLost(evt);
            }
        });

        txtCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCepKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCepKeyTyped(evt);
            }
        });

        txtCpf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCpfKeyTyped(evt);
            }
        });

        txtRg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRgKeyTyped(evt);
            }
        });

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        cbSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Inativo" }));

        btnCarregaFoto.setBackground(new java.awt.Color(255, 255, 255));
        btnCarregaFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/AbrirArquivo.png"))); // NOI18N
        btnCarregaFoto.setToolTipText("Procurar");
        btnCarregaFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCarregaFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregaFotoActionPerformed(evt);
            }
        });

        btnRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Remover.png"))); // NOI18N
        btnRemover.setToolTipText("Remover foto");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        lblFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblFoto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout painel2Layout = new javax.swing.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(btnCarregaFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCarregaFoto)
                    .addComponent(btnRemover))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel38))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel21))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(6, 6, 6)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNaturalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCategoriadoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addGap(4, 4, 4)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbEstadoCivil, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbUf, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCep, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(txtReligiao, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtRg, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(painel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38)
                            .addComponent(cbCategoriadoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbEstadoCivil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNaturalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txtNCasa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel1Layout.createSequentialGroup()
                                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(cbCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(cbBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)))
                            .addGroup(painel1Layout.createSequentialGroup()
                                .addComponent(cbUf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel1Layout.createSequentialGroup()
                                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtReligiao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21)))
                            .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20))))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(painel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(147, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpPrincipalLayout = new javax.swing.GroupLayout(jpPrincipal);
        jpPrincipal.setLayout(jpPrincipalLayout);
        jpPrincipalLayout.setHorizontalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpPrincipalLayout.setVerticalGroup(
            jpPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Principal", jpPrincipal);

        painel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Contato"));

        jLabel22.setText("Telefone");

        jLabel25.setText("E-mail");

        jLabel23.setText("Celular");

        txtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyTyped(evt);
            }
        });

        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCelularKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelularKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel3Layout = new javax.swing.GroupLayout(painel3);
        painel3.setLayout(painel3Layout);
        painel3Layout.setHorizontalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        painel3Layout.setVerticalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22))
                    .addGroup(painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23)
                        .addComponent(jLabel25)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        painel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Formação"));

        jLabel17.setText("Instituição");

        jLabel18.setText("Formação Acadêmica");

        jLabel24.setText("Tipo de Formação");

        jLabel32.setText("UF");

        jLabel33.setText("Cidade");

        jLabel34.setText("Turma");

        jLabel35.setText("Série/Período/Semestre");

        jLabel36.setText("Data/Previsão de Conclusão");

        jLabel37.setText("Nível de escolaridade");

        txtDatadaConclusao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDatadaConclusaoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDatadaConclusaoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel4Layout = new javax.swing.GroupLayout(painel4);
        painel4.setLayout(painel4Layout);
        painel4Layout.setHorizontalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel24)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jLabel36))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDatadaConclusao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbUfdaInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNiveldeEscolaridade, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbFormacaoAcademica, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbTipodeFormacao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCidadedaInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTurma, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(300, Short.MAX_VALUE))
        );
        painel4Layout.setVerticalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNiveldeEscolaridade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFormacaoAcademica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipodeFormacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbUfdaInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCidadedaInstituicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTurma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatadaConclusao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpContatoeFormacaoLayout = new javax.swing.GroupLayout(jpContatoeFormacao);
        jpContatoeFormacao.setLayout(jpContatoeFormacaoLayout);
        jpContatoeFormacaoLayout.setHorizontalGroup(
            jpContatoeFormacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpContatoeFormacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpContatoeFormacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpContatoeFormacaoLayout.setVerticalGroup(
            jpContatoeFormacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpContatoeFormacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Contato/Formação", jpContatoeFormacao);

        painel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filiação"));

        jLabel26.setText("Nome do Pai");

        jLabel27.setText("Nome da Mãe");

        jLabel28.setText("Profissão do Pai");

        jLabel29.setText("Profissão da Mãe");

        jLabel30.setText("Nome do Responsável");

        jLabel19.setText("Profissão do Leitor");

        javax.swing.GroupLayout painel5Layout = new javax.swing.GroupLayout(painel5);
        painel5.setLayout(painel5Layout);
        painel5Layout.setHorizontalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(jLabel29)
                    .addComponent(jLabel19)
                    .addComponent(jLabel28)
                    .addComponent(jLabel26)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNomedaMae, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfissaodaMae, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomedoResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProfissaodoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtNomedoPai, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtProfissaodoPai, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(359, Short.MAX_VALUE))
        );
        painel5Layout.setVerticalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomedoPai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProfissaodoPai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomedaMae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProfissaodaMae, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomedoResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProfissaodoLeitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap(244, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpFiliacaoLayout = new javax.swing.GroupLayout(jpFiliacao);
        jpFiliacao.setLayout(jpFiliacaoLayout);
        jpFiliacaoLayout.setHorizontalGroup(
            jpFiliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiliacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpFiliacaoLayout.setVerticalGroup(
            jpFiliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiliacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Filiação", jpFiliacao);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionaRegistro)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarConsulta)
                    .addComponent(btnTodos)
                    .addComponent(btnSelecionaRegistro))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));
        jPanel13.setPreferredSize(new java.awt.Dimension(663, 66));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código", "Nome" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(421, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros"));
        jPanel14.setPreferredSize(new java.awt.Dimension(609, 227));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        javax.swing.GroupLayout jpConsultaLayout = new javax.swing.GroupLayout(jpConsulta);
        jpConsulta.setLayout(jpConsultaLayout);
        jpConsultaLayout.setHorizontalGroup(
            jpConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpConsultaLayout.setVerticalGroup(
            jpConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consulta", jpConsulta);

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAdicionar.setToolTipText("Adicionar");
        btnAdicionar.setFocusable(false);
        btnAdicionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionar.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnAdicionar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Editar.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Cancelar.png"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnCancelar);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setToolTipText("Salvar");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar2.add(btnSalvar);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluir.setToolTipText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar2.add(btnExcluir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-850)/2, (screenSize.height-550)/2, 850, 550);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        //Carrega todos as jCombos
        //O ArrayList já está nas classes de cada um
        for (CategoriadoLeitor categoria : new CategoriadoLeitor().carregar()) {
            cbCategoriadoLeitor.addItem(categoria);
        }
        for (UF uf : new UF().carregar()) {
            cbUf.addItem(uf);
        }
//        for (Cidade cidade : new Cidade().carregar()) {
//            cbCidade.addItem(cidade);
//        }
//        for (Bairro bairro : new Bairro().carregar()) {
//            cbBairro.addItem(bairro);
//        }
        for (NiveldeEscolaridade niveldeEscolaridade : new NiveldeEscolaridade().carregar()) {
            cbNiveldeEscolaridade.addItem(niveldeEscolaridade);
        }
        for (FormacaoAcademica formacaoAcademica : new FormacaoAcademica().carregar()) {
            cbFormacaoAcademica.addItem(formacaoAcademica);
        }
        for (TipodeFormacao tipodeFormacao : new TipodeFormacao().carregar()) {
            cbTipodeFormacao.addItem(tipodeFormacao);
        }
        for (UF2 uf2 : new UF2().carregar()) {
            cbUfdaInstituicao.addItem(uf2);
        }
        for (Cidade2 cidade2 : new Cidade2().carregar()) {
            cbCidadedaInstituicao.addItem(cidade2);
        }
        //====================Desativa os controles============================
        f.ativarCampos(painel1, false);
        f.ativarCampos(painel2, false);
        f.ativarCampos(painel3, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        cbUf.setSelectedIndex(-1);
        cbUfdaInstituicao.setSelectedIndex(-1);
        cbCidade.setSelectedIndex(-1);
        cbCidadedaInstituicao.setSelectedIndex(-1);
        cbBairro.setSelectedIndex(-1);
        cbCategoriadoLeitor.setSelectedIndex(-1);
        cbNiveldeEscolaridade.setSelectedIndex(-1);
        cbFormacaoAcademica.setSelectedIndex(-1);
        cbTipodeFormacao.setSelectedIndex(-1);

        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        //Seleciona o filtro no nome do leitor
        cbFiltro.setSelectedIndex(1);
//        btnTodosActionPerformed(null);

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Botões
        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);

        f.ativarCampos(painel1, true);
        f.ativarCampos(painel2, true);
        f.ativarCampos(painel3, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel3);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        cbUf.setSelectedIndex(-1);
        cbCidade.setSelectedIndex(-1);
        cbBairro.setSelectedIndex(-1);
        cbCategoriadoLeitor.setSelectedIndex(-1);
        cbNiveldeEscolaridade.setSelectedIndex(-1);
        cbFormacaoAcademica.setSelectedIndex(-1);
        cbTipodeFormacao.setSelectedIndex(-1);
        cbUfdaInstituicao.setSelectedIndex(-1);
        cbCidadedaInstituicao.setSelectedIndex(-1);
        cbSituacao.setSelectedIndex(0);
        //Apaga a imagem
        lblFoto.setIcon(null);

        txtNome.requestFocus();//Põe o foco no controle nome
        //=================================================
//        //cria um objeto MysqlDB apontando para o banco especificado.
//        banco = new DB();
//        banco.connect();
//        int max1 = -1;
//        //conecta ao banco
//        Query query1 = new Query(banco.conn);
//        //Cria um objeto do tipo query chamado query1 que recebe
//        //como argumento o  objeto banco.
//        try {
//            String sql = " SELECT MAX(codigo)As Codigo FROM cadleitores";
//            query1.open(sql); //executa uma sentença sql.
//            query1.next();
//            max1 = query1.rs.getInt(1);
//            banco.disconnect();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
//            //        } finally {
//            try {
//                query1.rs.close();
//            } catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Erro resultset: " + ex.getMessage());
//            }
//        }

//        String formato = new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(String.valueOf(max1 + 1))));
        //txtCodigo.setText(formato);
        txtCodigo.setText("");
        novoCadastro = true;

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);

        f.ativarCampos(painel1, true);
        f.ativarCampos(painel2, true);
        f.ativarCampos(painel3, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);

        novoCadastro = false;
}//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        btnAdicionar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);

        f.ativarCampos(painel1, false);
        f.ativarCampos(painel2, false);
        f.ativarCampos(painel3, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel3);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        cbUf.setSelectedIndex(-1);
        cbCidade.setSelectedIndex(-1);
        cbBairro.setSelectedIndex(-1);
        cbCategoriadoLeitor.setSelectedIndex(-1);
        cbNiveldeEscolaridade.setSelectedIndex(-1);
        cbFormacaoAcademica.setSelectedIndex(-1);
        cbTipodeFormacao.setSelectedIndex(-1);
        cbUfdaInstituicao.setSelectedIndex(-1);
        cbCidadedaInstituicao.setSelectedIndex(-1);
        //Apaga a imagem
        lblFoto.setIcon(null);

        novoCadastro = false;
}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        if (cbCategoriadoLeitor.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione a categoria do leitor !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            cbCategoriadoLeitor.requestFocus();
        } else if (txtNome.getText().trim().equals("") || txtNome.getText() == null) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Nome !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            txtNome.requestFocus();
        } else if (cbSexo.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione o sexo do leitor !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            cbSexo.requestFocus();
        } else if (cbUf.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione a UF(Estado) do leitor !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            cbUf.requestFocus();
        } else if (cbCidade.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione a cidade do leitor !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            cbCidade.requestFocus();

        } else if (cbBairro.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione o bairro do leitor !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            cbBairro.requestFocus();

        } //====================================================================
        //Insert
        else if (novoCadastro == true) {
//        && !txtNome.getText().trim().equals("")
//                && cbSexo.getSelectedIndex() > -1 && cbCategoriadoLeitor.getSelectedIndex()>-1
//                && cbUf.getSelectedIndex()>-1 && cbCidade.getSelectedIndex()>-1
//                && cbCidade.getSelectedIndex()>-1) {

            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            PreparedStatement st = null;
            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            //==================================================================
            int ri = 0;
            //Insere usando formatacao JAVA           
            PreparedStatement st1 = null;
            String sqlGeral = "INSERT INTO cadleitores(data_2,hora,"
                    + "categoriadoleitor,nomedoleitor,sexo,estadocivil,idade,"
                    + "datadenasc,naturalidade,endereco,nrcasa,uf_iduf,cidade_id,"
                    + "cep,bairro_id,religiao,cpf,rg,telefone,celular,email,"
                    + "instituicao,niveldeescolaridade_id,formacaoacademica_id,"
                    + "tipodeformacao_id,estadoi_id,cidadei_id,turma,serie,"
                    + "datadeconclusao,nomedopai,profissaodopai,nomedamae,"
                    + "profissaodamae,nomedoresponsavel,profissaodoleitor,situacao)"
                    + " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
                    + "?,?,?,?,?,?,?,?,?,?,?,?)";
            try {

                st1 = banco.conn.prepareStatement(sqlGeral);
                //Data de cadastro
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = new Date();
                java.sql.Date dtJDBC = new java.sql.Date(dt.getTime());

                //Hora de cadastro
                DateFormat hfCR = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hCR = new Date();
                java.sql.Time hCJDBC = new java.sql.Time(hCR.getTime());

                txtData.setText(df.format(dt));
                txtHora.setText(hfCR.format(new Date()));
                st1.setDate(1, dtJDBC);
                st1.setTime(2, hCJDBC);
                //Verifica se é nulo
                if (cbCategoriadoLeitor.getModel().getSelectedItem() != null) {
                    st1.setInt(3, ((CategoriadoLeitor) cbCategoriadoLeitor.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(3, java.sql.Types.INTEGER);
                }
                //Esse não precisa verificar porque já é feita a
                //verificação antes
                st1.setString(4, txtNome.getText().trim());
                //Verifica se é masculino(M) ou feminino(F)
                if (cbSexo.getSelectedIndex() == 0) {
                    st1.setString(5, "M");
                } else {
                    st1.setString(5, "F");
                }
                //Verifica o estado civil
                switch (cbEstadoCivil.getSelectedIndex()) {
                    case 0:
                        //Solteiro(a)
                        st1.setString(6, "S");
                        break;
                    case 1:
                        //Casado(a)
                        st1.setString(6, "C");
                        break;
                    case 2:
                        //Divorciado(a)
                        st1.setString(6, "D");
                        break;
                    case 3:
                        //Viúvo(a)
                        st1.setString(6, "V");
                        break;
                }
                //Verifica se é nula a idade
                if (txtIdade.getText().trim().equals("") || txtIdade.getText() == null) {
                    st1.setNull(7, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(7, Integer.parseInt(txtIdade.getText().trim()));
                }
                //Data de Nascimento
                java.sql.Date dtNJDBC;
                if (!txtDataNascimento.getText().trim().equals("") && txtDataNascimento.getText().trim().length() == 10) {
                    //Converte a Data de Nascimento
                    DateFormat dfN = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtN = dfN.parse(txtDataNascimento.getText().trim());
                    dtNJDBC = new java.sql.Date(dtN.getTime());
                    st1.setDate(8, dtNJDBC);
                } else {
                    st1.setDate(8, null);
                }
                //verifica se é nulo 
                if (txtNaturalidade.getText() == null || txtNaturalidade.getText().trim().equals("")) {
                    st1.setNull(9, Types.VARCHAR);
                } else {
                    st1.setString(9, txtNaturalidade.getText().trim());
                }
                //Verifica se é nulo
                if (txtEndereco.getText() == null || txtEndereco.getText().trim().equals("")) {
                    st1.setNull(10, Types.VARCHAR);
                } else {
                    st1.setString(10, txtEndereco.getText().trim());
                }
                //Verifica se é nulo o número da casa
                if (txtNCasa.getText().trim().equals("") || txtNCasa.getText() == null) {
                    st1.setInt(11, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(11, Integer.parseInt(txtNCasa.getText().trim()));
                }
                //Verifica se a uf foi selecionada
                if (cbUf.getModel().getSelectedItem() != null) {
                    st1.setInt(12, ((UF) cbUf.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(12, java.sql.Types.INTEGER);
                }
                //Verifica se a cidade foi selecionada
                if (cbCidade.getModel().getSelectedItem() != null) {
                    st1.setInt(13, ((Cidade) cbCidade.getSelectedItem()).getIdcidade());
                } else {
                    st1.setNull(13, java.sql.Types.INTEGER);
                }
                //Verifica se é nulo
                if (txtNCasa.getText().trim().equals("") || txtNCasa.getText() == null) {
                    st1.setNull(14, Types.VARCHAR);
                } else {
                    st1.setString(14, txtCep.getText().trim());
                }
                //Verifica se o bairro foi selecionado
                if (cbBairro.getModel().getSelectedItem() != null) {
                    st1.setInt(15, ((Bairro) cbBairro.getSelectedItem()).getIdbairro());
                } else {
                    st1.setNull(15, java.sql.Types.INTEGER);
                }
                //Verifica se é nulo
                if (txtReligiao.getText() == null
                        || txtReligiao.getText().trim().equals("")) {
                    st1.setNull(16, Types.VARCHAR);
                } else {
                    st1.setString(16, txtReligiao.getText().trim());
                }
                //Verifica se é nulo
                if (txtCpf.getText() == null
                        || txtCpf.getText().trim().equals("")) {
                    st1.setNull(17, Types.VARCHAR);
                } else {
                    st1.setString(17, txtCpf.getText().trim());
                }
                //Verifica se é nulo
                if (txtRg.getText() == null
                        || txtRg.getText().trim().equals("")) {
                    st1.setNull(18, Types.VARCHAR);
                } else {
                    st1.setString(18, txtRg.getText().trim());
                }
                //Verifica se é nulo
                if (txtTelefone.getText() == null
                        || txtTelefone.getText().trim().equals("")) {
                    st1.setNull(19, Types.VARCHAR);
                } else {
                    st1.setString(19, txtTelefone.getText().trim());
                }
                //Verifica se é nulo
                if (txtCelular.getText() == null
                        || txtCelular.getText().trim().equals("")) {
                    st1.setNull(20, Types.VARCHAR);
                } else {
                    st1.setString(20, txtCelular.getText().trim());
                }
                //Verifica se é nulo
                if (txtEmail.getText() == null
                        || txtEmail.getText().trim().equals("")) {
                    st1.setNull(21, Types.VARCHAR);
                } else {
                    st1.setString(21, txtEmail.getText().trim());
                }
                //Verifica se é nulo
                if (txtInstituicao.getText() == null
                        || txtInstituicao.getText().trim().equals("")) {
                    st1.setNull(22, Types.VARCHAR);
                } else {
                    st1.setString(22, txtInstituicao.getText().trim());
                }

                //Verifica se o nível de escolaridade foi selecionado
                if (cbNiveldeEscolaridade.getModel().getSelectedItem() != null) {
                    st1.setInt(23, ((NiveldeEscolaridade) cbNiveldeEscolaridade.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(23, java.sql.Types.INTEGER);
                }
                //Verifica se a formação acadêmica foi selecionada
                if (cbFormacaoAcademica.getModel().getSelectedItem() != null) {
                    st1.setInt(24, ((FormacaoAcademica) cbFormacaoAcademica.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(24, java.sql.Types.INTEGER);
                }
                //Verifica se o tipo de formação foi selecionado
                if (cbTipodeFormacao.getModel().getSelectedItem() != null) {
                    st1.setInt(25, ((TipodeFormacao) cbTipodeFormacao.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(25, java.sql.Types.INTEGER);
                }
                //Verifica se o estado da instituição foi selecionado
                if (cbUfdaInstituicao.getModel().getSelectedItem() != null) {
                    st1.setInt(26, ((UF) cbUf.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(26, java.sql.Types.INTEGER);
                }
                //Verifica se a cidade da instituição foi selecionado
                if (cbCidadedaInstituicao.getModel().getSelectedItem() != null) {
                    st1.setInt(27, ((Cidade) cbCidade.getSelectedItem()).getIdcidade());
                } else {
                    st1.setNull(27, java.sql.Types.INTEGER);
                }
                //Verifica se é nulo
                if (txtTurma.getText() == null
                        || txtTurma.getText().trim().equals("")) {
                    st1.setNull(28, Types.VARCHAR);
                } else {
                    st1.setString(28, txtTurma.getText().trim());
                }
                //Verifica se é nulo
                if (txtSerie.getText() == null
                        || txtSerie.getText().trim().equals("")) {
                    st1.setNull(29, Types.VARCHAR);
                } else {
                    st1.setString(29, txtSerie.getText().trim());
                }

                //Data da Conclusão
                java.sql.Date dtCJDBC;
                if (!txtDatadaConclusao.getText().trim().equals("") && txtDatadaConclusao.getText().trim().length() == 10) {
                    //Converte a Data de Conclusão
                    DateFormat dfC = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtC = dfC.parse(txtData.getText().trim());
                    dtCJDBC = new java.sql.Date(dtC.getTime());
                    st1.setDate(30, dtCJDBC);
                } else {
                    st1.setDate(30, null);
                }
                //Verifica se é nulo
                if (txtNomedoPai.getText() == null
                        || txtNomedoPai.getText().trim().equals("")) {
                    st1.setNull(31, Types.VARCHAR);
                } else {
                    st1.setString(31, txtNomedoPai.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodoPai.getText() == null
                        || txtProfissaodoPai.getText().trim().equals("")) {
                    st1.setNull(32, Types.VARCHAR);
                } else {
                    st1.setString(32, txtProfissaodoPai.getText().trim());
                }
                //Verifica se é nulo
                if (txtNomedaMae.getText() == null
                        || txtNomedaMae.getText().trim().equals("")) {
                    st1.setNull(33, Types.VARCHAR);
                } else {
                    st1.setString(33, txtNomedaMae.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodaMae.getText() == null
                        || txtProfissaodaMae.getText().trim().equals("")) {
                    st1.setNull(34, Types.VARCHAR);
                } else {
                    st1.setString(34, txtProfissaodaMae.getText().trim());
                }
                //Verifica se é nulo
                if (txtNomedoResponsavel.getText() == null
                        || txtNomedoResponsavel.getText().trim().equals("")) {
                    st1.setNull(35, Types.VARCHAR);
                } else {
                    st1.setString(35, txtNomedoResponsavel.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodoLeitor.getText() == null
                        || txtProfissaodoLeitor.getText().trim().equals("")) {
                    st1.setNull(36, Types.VARCHAR);
                } else {
                    st1.setString(36, txtProfissaodoLeitor.getText().trim());
                }
                //Verifica se a Situação foi selecionada
                switch (cbSituacao.getSelectedIndex()) {
                    case 0:
                        //Leitor Ativo
                        st1.setString(37, "A");
                        break;
                    case 1:
                        //Leitor inativo
                        st1.setString(37, "I");
                        break;
                }

                ri = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao inserir na tabela de leitores! \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }

            if (ri > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
                //--------------------------------------------------------------
                JOptionPane.showMessageDialog(null, "Registro adicionado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                f.ativarCampos(painel1, false);
                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                cbUf.setSelectedIndex(-1);
                cbCidade.setSelectedIndex(-1);
                cbBairro.setSelectedIndex(-1);
                cbCategoriadoLeitor.setSelectedIndex(-1);
                cbNiveldeEscolaridade.setSelectedIndex(-1);
                cbFormacaoAcademica.setSelectedIndex(-1);
                cbTipodeFormacao.setSelectedIndex(-1);
                cbUfdaInstituicao.setSelectedIndex(-1);
                cbCidadedaInstituicao.setSelectedIndex(-1);
                //Limpa a Foto
                lblFoto.setIcon(null);

                btnTodosActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(null, "Operação não realizada! ", "Atenção", JOptionPane.WARNING_MESSAGE);
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Erro comando ROLLBACK \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }

            }
        } //senão Update
        else if (novoCadastro == false) {
//             && !txtNome.getText().trim().equals("")
//                && cbSexo.getSelectedIndex() > -1 && cbCategoriadoLeitor.getSelectedIndex()>-1
//                && cbUf.getSelectedIndex()>-1 && cbCidade.getSelectedIndex()>-1
//                && cbCidade.getSelectedIndex()>-1
            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            PreparedStatement st = null;
            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            //==================================================================
            int ru = 0;
            //Atualiza usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlUpdate = "UPDATE cadleitores SET data_2=?,hora=?,"
                    + "categoriadoleitor=?,nomedoleitor=?,sexo=?,estadocivil=?,idade=?,"
                    + "datadenasc=?,naturalidade=?,endereco=?,nrcasa=?,uf_iduf=?,cidade_id=?,"
                    + "cep=?,bairro_id=?,religiao=?,cpf=?,rg=?,telefone=?,celular=?,email=?,"
                    + "instituicao=?,niveldeescolaridade_id=?,formacaoacademica_id=?,"
                    + "tipodeformacao_id=?,estadoi_id=?,cidadei_id=?,turma=?,serie=?,"
                    + "datadeconclusao=?,nomedopai=?,profissaodopai=?,nomedamae=?,"
                    + "profissaodamae=?,nomedoresponsavel=?,profissaodoleitor=?,situacao=? "
                    + "WHERE codigo=?";

            try {

                st1 = banco.conn.prepareStatement(sqlUpdate);

                //Data de cadastro
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = new Date();
                java.sql.Date dtJDBC = new java.sql.Date(dt.getTime());

                //Hora de cadastro
                DateFormat hfCR = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hCR = new Date();
                java.sql.Time hCJDBC = new java.sql.Time(hCR.getTime());

                txtData.setText(df.format(dt));
                txtHora.setText(hfCR.format(new Date()));
                st1.setDate(1, dtJDBC);
                st1.setTime(2, hCJDBC);
                //Verifica se é nulo
//                if (cbCategoriadoLeitor.getModel().getSelectedItem() != null) {
                st1.setInt(3, ((CategoriadoLeitor) cbCategoriadoLeitor.getSelectedItem()).getCodigo());
//                } else {
//                    st1.setNull(4, java.sql.Types.INTEGER);
//                }
                //Esse não precisa verificar porque já é feita a
                //verificação antes
                st1.setString(4, txtNome.getText().trim());
                //Verifica se é masculino(M) ou feminino(F)
                if (cbSexo.getSelectedIndex() == 0) {
                    st1.setString(5, "M");
                } else {
                    st1.setString(5, "F");
                }
                //Verifica o estado civil
                switch (cbEstadoCivil.getSelectedIndex()) {
                    case 0:
                        //Solteiro(a)
                        st1.setString(6, "S");
                        break;
                    case 1:
                        //Casado(a)
                        st1.setString(6, "C");
                        break;
                    case 2:
                        //Divorciado(a)
                        st1.setString(6, "D");
                        break;
                    case 3:
                        //Viúvo(a)
                        st1.setString(6, "V");
                        break;
                }
                //Verifica se é nula a idade
                if (txtIdade.getText().trim().equals("") || txtIdade.getText() == null) {
                    st1.setNull(7, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(7, Integer.parseInt(txtIdade.getText().trim()));
                }
                //Data de Nascimento
                java.sql.Date dtNJDBC;
                if (!txtDataNascimento.getText().trim().equals("") && txtDataNascimento.getText().trim().length() == 10) {
                    //Converte a Data de Nascimento
                    DateFormat dfN = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtN = dfN.parse(txtDataNascimento.getText().trim());
                    dtNJDBC = new java.sql.Date(dtN.getTime());
                    st1.setDate(8, dtNJDBC);
                } else {
                    st1.setDate(8, null);
                }
                //verifica se é nulo
                if (txtNaturalidade.getText() == null || txtNaturalidade.getText().trim().equals("")) {
                    st1.setNull(9, Types.VARCHAR);
                } else {
                    st1.setString(9, txtNaturalidade.getText().trim());
                }
                //Verifica se é nulo
                if (txtEndereco.getText() == null || txtEndereco.getText().trim().equals("")) {
                    st1.setNull(10, Types.VARCHAR);
                } else {
                    st1.setString(10, txtEndereco.getText().trim());
                }
                //Verifica se é nulo o número da casa
                if (txtNCasa.getText().trim().equals("") || txtNCasa.getText() == null) {
                    st1.setInt(11, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(11, Integer.parseInt(txtNCasa.getText().trim()));
                }
                //Verifica se a uf foi selecionada
//                if (cbUf.getModel().getSelectedItem() != null) {
                st1.setInt(12, ((UF) cbUf.getSelectedItem()).getCodigo());
//                } else {
//                    st1.setNull(13, java.sql.Types.INTEGER);
//                }
                //Verifica se a cidade foi selecionada
//                if (cbCidade.getModel().getSelectedItem() != null) {
                st1.setInt(13, ((Cidade) cbCidade.getSelectedItem()).getIdcidade());
//                } else {
//                    st1.setNull(14, java.sql.Types.INTEGER);
//                }
                //Verifica se é nulo
                if (txtCep.getText().trim().equals("") || txtCep.getText() == null) {
                    st1.setNull(14, Types.VARCHAR);
                } else {
                    st1.setString(14, txtCep.getText().trim());
                }
                //Verifica se o bairro foi selecionado
                if (cbBairro.getModel().getSelectedItem() != null) {
                    st1.setInt(15, ((Bairro) cbBairro.getSelectedItem()).getIdbairro());
                } else {
                    st1.setNull(15, java.sql.Types.INTEGER);
                }
                //Verifica se é nulo
                if (txtReligiao.getText() == null
                        || txtReligiao.getText().trim().equals("")) {
                    st1.setNull(16, Types.VARCHAR);
                } else {
                    st1.setString(16, txtReligiao.getText().trim());
                }
                //Verifica se é nulo
                if (txtCpf.getText() == null
                        || txtCpf.getText().trim().equals("")) {
                    st1.setNull(17, Types.VARCHAR);
                } else {
                    st1.setString(17, txtCpf.getText().trim());
                }
                //Verifica se é nulo
                if (txtRg.getText() == null
                        || txtRg.getText().trim().equals("")) {
                    st1.setNull(18, Types.VARCHAR);
                } else {
                    st1.setString(18, txtRg.getText().trim());
                }
                //Verifica se é nulo
                if (txtTelefone.getText() == null
                        || txtTelefone.getText().trim().equals("")) {
                    st1.setNull(19, Types.VARCHAR);
                } else {
                    st1.setString(19, txtTelefone.getText().trim());
                }
                //Verifica se é nulo
                if (txtCelular.getText() == null
                        || txtCelular.getText().trim().equals("")) {
                    st1.setNull(20, Types.VARCHAR);
                } else {
                    st1.setString(20, txtCelular.getText().trim());
                }
                //Verifica se é nulo
                if (txtEmail.getText() == null
                        || txtEmail.getText().trim().equals("")) {
                    st1.setNull(21, Types.VARCHAR);
                } else {
                    st1.setString(21, txtEmail.getText().trim());
                }
                //Verifica se é nulo
                if (txtInstituicao.getText() == null
                        || txtInstituicao.getText().trim().equals("")) {
                    st1.setNull(22, Types.VARCHAR);
                } else {
                    st1.setString(22, txtInstituicao.getText().trim());
                }

                //Verifica se o nível de escolaridade foi selecionado
                if (cbNiveldeEscolaridade.getSelectedIndex() > -1) {
                    st1.setInt(23, ((NiveldeEscolaridade) cbNiveldeEscolaridade.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(23, java.sql.Types.INTEGER);
                }
                //Verifica se a formação acadêmica foi selecionada
                if (cbFormacaoAcademica.getSelectedIndex() > -1) {
                    st1.setInt(24, ((FormacaoAcademica) cbFormacaoAcademica.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(24, java.sql.Types.INTEGER);
                }
                //Verifica se o tipo de formação foi selecionado
                if (cbTipodeFormacao.getSelectedIndex() > -1) {
                    st1.setInt(25, ((TipodeFormacao) cbTipodeFormacao.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(25, java.sql.Types.INTEGER);
                }
                //Verifica se o estado da instituição foi selecionado
                if (cbUfdaInstituicao.getSelectedIndex() > -1) {
                    st1.setInt(26, ((UF) cbUf.getSelectedItem()).getCodigo());
                } else {
                    st1.setNull(26, java.sql.Types.INTEGER);
                }
                //Verifica se a cidade da instituição foi selecionado
                if (cbCidadedaInstituicao.getSelectedIndex() > -1) {
                    st1.setInt(27, ((Cidade) cbCidade.getSelectedItem()).getIdcidade());
                } else {
                    st1.setNull(27, java.sql.Types.INTEGER);
                }
                //Verifica se é nulo
                if (txtTurma.getText() == null
                        || txtTurma.getText().trim().equals("")) {
                    st1.setNull(28, Types.VARCHAR);
                } else {
                    st1.setString(28, txtTurma.getText().trim());
                }
                //Verifica se é nulo
                if (txtSerie.getText() == null
                        || txtSerie.getText().trim().equals("")) {
                    st1.setNull(29, Types.VARCHAR);
                } else {
                    st1.setString(29, txtSerie.getText().trim());
                }

                //Data da Conclusão
                java.sql.Date dtCJDBC;
                if (!txtDatadaConclusao.getText().trim().equals("") && txtDatadaConclusao.getText().trim().length() == 10) {
                    //Converte a Data de Conclusão
                    DateFormat dfC = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtC = dfC.parse(txtData.getText().trim());
                    dtCJDBC = new java.sql.Date(dtC.getTime());
                    st1.setDate(30, dtCJDBC);
                } else {
                    st1.setDate(30, null);
                }
                //Verifica se é nulo
                if (txtNomedoPai.getText() == null
                        || txtNomedoPai.getText().trim().equals("")) {
                    st1.setNull(31, Types.VARCHAR);
                } else {
                    st1.setString(31, txtNomedoPai.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodoPai.getText() == null
                        || txtProfissaodoPai.getText().trim().equals("")) {
                    st1.setNull(32, Types.VARCHAR);
                } else {
                    st1.setString(32, txtProfissaodoPai.getText().trim());
                }
                //Verifica se é nulo
                if (txtNomedaMae.getText() == null
                        || txtNomedaMae.getText().trim().equals("")) {
                    st1.setNull(33, Types.VARCHAR);
                } else {
                    st1.setString(33, txtNomedaMae.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodaMae.getText() == null
                        || txtProfissaodaMae.getText().trim().equals("")) {
                    st1.setNull(34, Types.VARCHAR);
                } else {
                    st1.setString(34, txtProfissaodaMae.getText().trim());
                }
                //Verifica se é nulo
                if (txtNomedoResponsavel.getText() == null
                        || txtNomedoResponsavel.getText().trim().equals("")) {
                    st1.setNull(35, Types.VARCHAR);
                } else {
                    st1.setString(35, txtNomedoResponsavel.getText().trim());
                }
                //Verifica se é nulo
                if (txtProfissaodoLeitor.getText() == null
                        || txtProfissaodoLeitor.getText().trim().equals("")) {
                    st1.setNull(36, Types.VARCHAR);
                } else {
                    st1.setString(36, txtProfissaodoLeitor.getText().trim());
                }
                //Verifica se a Situação foi selecionada
                switch (cbSituacao.getSelectedIndex()) {
                    case 0:
                        //Leitor Ativo
                        st1.setString(37, "A");
                        break;
                    case 1:
                        //Leitor inativo
                        st1.setString(37, "I");
                        break;
                }
                st1.setInt(38, Integer.parseInt(txtCodigo.getText().trim()));

                ru = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar na tabela de leitores! \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
            }
            if (ru > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
                //--------------------------------------------------------------
                JOptionPane.showMessageDialog(null, "Registro atualizado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);

                f.ativarCampos(painel1, false);
                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                cbUf.setSelectedIndex(-1);
                cbCidade.setSelectedIndex(-1);
                cbBairro.setSelectedIndex(-1);
                cbCategoriadoLeitor.setSelectedIndex(-1);
                cbNiveldeEscolaridade.setSelectedIndex(-1);
                cbFormacaoAcademica.setSelectedIndex(-1);
                cbTipodeFormacao.setSelectedIndex(-1);
                cbUfdaInstituicao.setSelectedIndex(-1);
                cbCidadedaInstituicao.setSelectedIndex(-1);
                //Limpa a Foto
                lblFoto.setIcon(null);

                btnTodosActionPerformed(evt);
            } else {
                JOptionPane.showMessageDialog(null, "Operação não realizada! ", "Atenção", JOptionPane.WARNING_MESSAGE);
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (txtCodigo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Nenhum registro a ser excluído !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
        } //Insert
        else {
            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            int ri = 0;
            //Insere usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "DELETE FROM cadleitores WHERE codigo=? ";
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                //st1.setString(2, txtNome.getText().trim());
                ri = st1.executeUpdate();
                st1.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }

            if (ri > 0) {
                JOptionPane.showMessageDialog(null, "Registro excluído"
                        + " com sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                //Apaga a imagem
                File file = new File("FotodosLeitores/" + txtCodigo.getText().trim() + ".jpg");
                if (file.exists()) {
                    file.delete();
                    lblFoto.setIcon(null);
                } else {
                    lblFoto.setIcon(null);
                }

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel3);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.ativarCampos(painel1, false);
                f.ativarCampos(painel2, false);
                f.ativarCampos(painel3, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                cbUf.setSelectedIndex(-1);
                cbCidade.setSelectedIndex(-1);
                cbBairro.setSelectedIndex(-1);
                cbCategoriadoLeitor.setSelectedIndex(-1);
                cbNiveldeEscolaridade.setSelectedIndex(-1);
                cbFormacaoAcademica.setSelectedIndex(-1);
                cbTipodeFormacao.setSelectedIndex(-1);
                cbUfdaInstituicao.setSelectedIndex(-1);
                cbCidadedaInstituicao.setSelectedIndex(-1);
                btnTodosActionPerformed(evt);

            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
//        //txtCodigo.setText("");
//        //Volta para a tab principal
        jTabbedPane1.setSelectedIndex(0);

}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter(int coluna) {
        RowFilter<MkTableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            //(?i) para case insensitive
            rf = RowFilter.regexFilter("(?i)" + txtConsulta.getText(), coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código
                newFilter(0);
                break;
            case 1:
                //Nome do leitor
                newFilter(1);
                break;
        }

        if (jTable1.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(jTable1.getRowCount() + " registro(s) encontrado(s) !");
        }
    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        ArrayList dados = new ArrayList();
        String[] colunas = new String[]{"Código", "Nome do Leitor"};
        DB banco2 = new DB();
        banco2.connect();
        Query q = new Query(banco2.conn);

        //LEFT JOIN faz com que os campos que não tem o código sejam mostrados
        //EXEMPLO: niveldeescolaridade_id, que talvez não tenha o codigo, está
        //com campo vazio
        q.open("SELECT c.codigo, c.nomedoleitor, c.data_2, c.hora, "
                + "cl.descricao AS categoria,c.sexo, c.estadocivil, c.idade, "
                + "c.datadenasc, c.naturalidade, c.endereco,c.nrcasa, "
                + "u.descricao AS uf, ci.descricao AS cidade, c.cep,"
                + "b.descricao AS bairro, c.religiao, c.cpf, c.rg, c.telefone, "
                + "c.celular,c.email, c.instituicao, n.descricao AS niveldeescolaridade,"
                + "f.descricao AS formacaoacademica,t.descricao AS tipodeformacao, "
                + "ui.descricao AS estadoi, cii.descricao AS cidadei,"
                + "c.turma, c.serie, c.datadeconclusao, c.nomedopai,"
                + "c.profissaodopai, c.nomedamae, c.profissaodamae, "
                + "c.nomedoresponsavel, c.profissaodoleitor, c.situacao "
                + "FROM cadleitores AS c "
                + "INNER JOIN categoriadoleitor AS cl ON c.categoriadoleitor=cl.codigo "
                + "INNER JOIN uf u ON c.uf_iduf=u.iduf "
                + "INNER JOIN cidade ci ON c.cidade_id=ci.idcidade "
                + "INNER JOIN bairro b ON c.bairro_id=b.idbairro "
                + "LEFT JOIN niveldeescolaridade n ON c.niveldeescolaridade_id=n.codigo "
                + "LEFT JOIN formacaoacademica f ON c.formacaoacademica_id=f.codigo "
                + "LEFT JOIN tipodeformacao t ON c.tipodeformacao_id=t.codigo "
                + "LEFT JOIN uf ui ON c.estadoi_id=ui.iduf "
                + "LEFT JOIN cidade cii ON c.cidadei_id=cii.idcidade");

        //Variáveis que irão receber a consulta
        int codigo;
        java.util.Date data_2;
        java.sql.Time hora;
        String categoriadoleitor;
        String nomedoleitor;
        String sexo;
        String estadocivil;
        int idade;
        java.util.Date datadenasc;
        String naturalidade;
        String endereco;
        int nrcasa;
        String ufL;
        String cidadeL;
        String cep;
        String bairroL;
        String religiao;
        String cpf;
        String rg;
        String telefone;
        String celular;
        String email;
        String instituicao;
        String niveldeescolaridade;
        String formacaoacademica;
        String tipodeformacao;
        String estadoi;
        String cidadei;
        String turma;
        String serie;
        java.util.Date datadeconclusao;
        String nomedopai;
        String profissaodopai;
        String nomedamae;
        String profissaodamae;
        String nomedoresponsavel;
        String profissaodoleitor;
        String situacao;

        Leitores leitor = new Leitores();
        dados = new ArrayList();
        try {
            while (q.next()) {
                codigo = q.rs.getInt("codigo");
                data_2 = q.rs.getDate("data_2");
                hora = q.rs.getTime("hora");
                categoriadoleitor = q.rs.getString("categoria");
                nomedoleitor = q.rs.getString("nomedoleitor");
                sexo = q.rs.getString("sexo");
                estadocivil = q.rs.getString("estadocivil");
                idade = q.rs.getInt("idade");
                datadenasc = q.rs.getDate("datadenasc");
                naturalidade = q.rs.getString("naturalidade");
                endereco = q.rs.getString("endereco");
                nrcasa = q.rs.getInt("nrcasa");
                ufL = q.rs.getString("uf");
                cidadeL = q.rs.getString("cidade");
                cep = q.rs.getString("cep");
                bairroL = q.rs.getString("bairro");
                religiao = q.rs.getString("religiao");
                cpf = q.rs.getString("cpf");
                rg = q.rs.getString("rg");
                telefone = q.rs.getString("telefone");
                celular = q.rs.getString("celular");
                email = q.rs.getString("email");
                instituicao = q.rs.getString("instituicao");
                niveldeescolaridade = q.rs.getString("niveldeescolaridade");
                formacaoacademica = q.rs.getString("formacaoacademica");
                tipodeformacao = q.rs.getString("tipodeformacao");
                estadoi = q.rs.getString("estadoi");
                cidadei = q.rs.getString("cidadei");
                turma = q.rs.getString("turma");
                serie = q.rs.getString("serie");
                datadeconclusao = q.rs.getDate("datadeconclusao");
                nomedopai = q.rs.getString("nomedopai");
                profissaodopai = q.rs.getString("profissaodopai");
                nomedamae = q.rs.getString("nomedamae");
                profissaodamae = q.rs.getString("profissaodamae");
                nomedoresponsavel = q.rs.getString("nomedoresponsavel");
                profissaodoleitor = q.rs.getString("profissaodoleitor");
                situacao = q.rs.getString("situacao");

                //Seta os valores
                leitor.setCodigo(codigo);
                leitor.setData_2(data_2);
                leitor.setHora(hora);
                leitor.setCategoria(categoriadoleitor);
                leitor.setNomedoleitor(nomedoleitor);
                leitor.setSexo(sexo);
                leitor.setEstadocivil(estadocivil);
                leitor.setIdade(idade);
                leitor.setDatadenasc(datadenasc);
                leitor.setNaturalidade(naturalidade);
                leitor.setEndereco(endereco);
                leitor.setNrcasa(nrcasa);
                leitor.setUf(ufL);
                leitor.setCidade(cidadeL);
                leitor.setCep(cep);
                leitor.setBairro(bairroL);
                leitor.setReligiao(religiao);
                leitor.setCpf(cpf);
                leitor.setRg(rg);
                leitor.setTelefone(telefone);
                leitor.setCelular(celular);
                leitor.setEmail(email);
                leitor.setInstituicao(instituicao);
                leitor.setNiveldeescolaridade(niveldeescolaridade);
                leitor.setFormacaoacademica(formacaoacademica);
                leitor.setTipodeformacao(tipodeformacao);
                leitor.setEstadoi(estadoi);
                leitor.setCidadei(cidadei);
                leitor.setTurma(turma);
                leitor.setSerie(serie);
                leitor.setDatadeconclusao(datadeconclusao);
                leitor.setNomedopai(nomedopai);
                leitor.setProfissaodopai(profissaodopai);
                leitor.setNomedamae(nomedamae);
                leitor.setProfissaodamae(profissaodamae);
                leitor.setNomedoresponsavel(nomedoresponsavel);
                leitor.setProfissaodoleitor(profissaodoleitor);
                leitor.setSituacao(situacao);

                //Colocar os gets para poder funcionar corretamente
                dados.add(new String[]{
                            String.valueOf(leitor.getCodigo()),
                            leitor.getNomedoleitor(),
                            String.valueOf(leitor.getData_2()),
                            String.valueOf(leitor.getHora()),
                            leitor.getCategoria(),
                            leitor.getSexo(),
                            leitor.getEstadocivil(),
                            String.valueOf(leitor.getIdade()),
                            String.valueOf(leitor.getDatadenasc()),
                            leitor.getNaturalidade(),
                            leitor.getEndereco(),
                            String.valueOf(leitor.getNrcasa()),
                            leitor.getUf(),
                            leitor.getCidade(),
                            leitor.getCep(),
                            leitor.getBairro(),
                            leitor.getReligiao(),
                            leitor.getCpf(),
                            leitor.getRg(),
                            leitor.getTelefone(),
                            leitor.getCelular(),
                            leitor.getEmail(),
                            leitor.getInstituicao(),
                            leitor.getNiveldeescolaridade(),
                            leitor.getFormacaoacademica(),
                            leitor.getTipodeformacao(),
                            leitor.getEstadoi(),
                            leitor.getCidadei(),
                            leitor.getTurma(),
                            leitor.getSerie(),
                            String.valueOf(leitor.getDatadeconclusao()),
                            leitor.getNomedopai(),
                            leitor.getProfissaodopai(),
                            leitor.getNomedamae(),
                            leitor.getProfissaodamae(),
                            leitor.getNomedoresponsavel(),
                            leitor.getProfissaodoleitor(),
                            leitor.getSituacao()
                        });

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        banco2.disconnect();

        boolean[] edicao = {false, false, false};
        model = new MkTableModel(dados, colunas, edicao);
        jTable1.setModel(model);
        sorter = new TableRowSorter<MkTableModel>(model);
        jTable1.setRowSorter(sorter);

//       Código,Nome do Leitor
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(350);

        //=============================
        if (jTable1.getRowCount() == 0) {
            lblMensagem.setText("Nenhum registro encontrado !");
        } else {
            lblMensagem.setText(jTable1.getRowCount() + " registro(s) encontrado(s) !");
        }
}//GEN-LAST:event_btnTodosActionPerformed

    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed

        if (jTable1.getRowCount() > 0 && jTable1.getSelectedRow() > -1) {
            String[] linha = (String[]) model.getLinhas().get(jTable1.getSelectedRow());

            try {
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

                //Código
                txtCodigo.setText(new java.lang.String(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(linha[0]))));
                //Nome do Leitor
                txtNome.setText(linha[1]);
                //Data
                java.sql.Date dtJDBC = java.sql.Date.valueOf(linha[2]);
                java.util.Date dt = new java.util.Date(dtJDBC.getTime());
                txtData.setText(df.format(dt));
                //Hora
                txtHora.setText(linha[3]);
                //Categoria do Leitor
                for (CategoriadoLeitor categoriadoLeitor : new CategoriadoLeitor().carregar()) {
                    if (categoriadoLeitor.getDescricao().equals(linha[4])) {
                        cbCategoriadoLeitor.getModel().setSelectedItem(categoriadoLeitor);
                    }
                }
                //Sexo                
                if (linha[5].equals("M")) {
                    cbSexo.setSelectedIndex(0);
                } else {
                    cbSexo.setSelectedIndex(1);
                }
                //Estado civil               
                if (linha[6].equals("S")) {
                    //Solteiro
                    cbEstadoCivil.setSelectedIndex(0);
                } else if (linha[6].equals("C")) {
                    //Casado
                    cbEstadoCivil.setSelectedIndex(1);
                } else if (linha[6].equals("D")) {
                    //divorciado
                    cbEstadoCivil.setSelectedIndex(2);
                } else if (linha[6].equals("V")) {
                    //Viúvo
                    cbEstadoCivil.setSelectedIndex(3);
                }
                //Idade
                if (linha[7].equals("0")) {
                    txtIdade.setText("");
                } else {
                    txtIdade.setText(linha[7]);
                }
//                //Data de nascimento   
                if (linha[8].equals("null")) {
                    txtDataNascimento.setText("");
                } else {
                    java.sql.Date dtNJDBC = java.sql.Date.valueOf(linha[8]);
                    java.util.Date dtN = new java.util.Date(dtNJDBC.getTime());
                    txtDataNascimento.setText(df.format(dtN));
                }
                //Naturalidade            
                txtNaturalidade.setText(linha[9]);
                //Endereço
                txtEndereco.setText(linha[10]);
                //Número da casa
                if (linha[11].equals("0")) {
                    txtNCasa.setText("");
                } else {
                    txtNCasa.setText(linha[11]);
                }
                //UF
                for (UF uf : new UF().carregar()) {
                    if (uf.getDescricao().equals(linha[12])) {
                        cbUf.getModel().setSelectedItem(uf);
                    }
                }
                //Cidade
                for (Cidade cidade : new Cidade().carregar()) {
                    if (cidade.getDescricao().equals(linha[13])) {
                        cbCidade.getModel().setSelectedItem(cidade);
                    }
                }
                //CEP
                txtCep.setText(linha[14]);
                //Bairro
                for (Bairro bairro : new Bairro().carregar()) {
                    if (bairro.getDescricao().equals(linha[15])) {
                        cbBairro.getModel().setSelectedItem(bairro);
                    }
                }
                //Religião
                txtReligiao.setText(linha[16]);
                //CPF
                txtCpf.setText(linha[17]);
                //RG
                txtRg.setText(linha[18]);
                //Telefone
                txtTelefone.setText(linha[19]);
                //Celular
                txtCelular.setText(linha[20]);
                //E-mail
                txtEmail.setText(linha[21]);
                //Instituição
                txtInstituicao.setText(linha[22]);
                //=================VERIFICA SE É IGUAL=======================
                //=================SE NÃO FOR, SETA O ÍNDICE COMO -1 OU VAZIO
                //Nivel de escolaridade
//                if (linha[23].equals("null")) {
//                    cbNiveldeEscolaridade.setSelectedIndex(-1);
//                    System.out.println(linha[23]+"aaa");
//                } else {
                cbNiveldeEscolaridade.setSelectedIndex(-1);
                    for (NiveldeEscolaridade niveldeEscolaridade : new NiveldeEscolaridade().carregar()) {
                        if (niveldeEscolaridade.getDescricao().equals(linha[23])) {
                            cbNiveldeEscolaridade.getModel().setSelectedItem(niveldeEscolaridade);
                        }
                    }
//                }

//                if (linha[24].equals("null")) {
//                    cbFormacaoAcademica.setSelectedIndex(-1);
//                } else {
                    //Formação acadêmica
                    cbFormacaoAcademica.setSelectedIndex(-1);
                    for (FormacaoAcademica formacaoAcademica : new FormacaoAcademica().carregar()) {
                        if (formacaoAcademica.getDescricao().equals(linha[24])) {
                            cbFormacaoAcademica.getModel().setSelectedItem(formacaoAcademica);
                        }
                    }
//                }

                //tipo de formação
//                if (linha[25].equals("null")) {
//                    cbTipodeFormacao.setSelectedIndex(-1);
//                } else {
                    cbTipodeFormacao.setSelectedIndex(-1);
                    for (TipodeFormacao tipodeFormacao : new TipodeFormacao().carregar()) {
                        if (tipodeFormacao.getDescricao().equals(linha[25])) {
                            cbTipodeFormacao.getModel().setSelectedItem(tipodeFormacao);
                        }
                    }
//                }

//                //UF da Instituição
//                if (linha[26].equals("null")) {
//                    cbUfdaInstituicao.setSelectedIndex(-1);
//                } else {
                    cbUfdaInstituicao.setSelectedIndex(-1);
                    for (UF2 uf : new UF2().carregar()) {
                        if (uf.getDescricao().equals(linha[26])) {
                            cbUfdaInstituicao.getModel().setSelectedItem(uf);
                        }
                    }
//                }

//                //Cidade da Instituição
//                if (linha[26].equals("null")) {
//                    cbCidadedaInstituicao.setSelectedIndex(-1);
//                } else {
                    cbCidadedaInstituicao.setSelectedIndex(-1);
                    for (Cidade2 cidade : new Cidade2().carregar()) {
                        if (cidade.getDescricao().equals(linha[27])) {
                            cbCidadedaInstituicao.getModel().setSelectedItem(cidade);
                        }
                    }
//                }

                //Turmas
                txtTurma.setText(linha[28]);
                //Série
                txtSerie.setText(linha[29]);
                //Data de conclusão
                if (linha[30].equals("null")) {
                    txtDatadaConclusao.setText("");
                } else {
                    java.sql.Date dtCJDBC = java.sql.Date.valueOf(linha[30]);
                    java.util.Date dtC = new java.util.Date(dtCJDBC.getTime());
                    txtDatadaConclusao.setText(df.format(dtC));
                }
                //Nome do pai
                txtNomedoPai.setText(linha[31]);
                //Profissão do pai                
                txtProfissaodoPai.setText(linha[32]);
                //Nome da mãe
                txtNomedaMae.setText(linha[33]);
                //Profissão da mãe
                txtProfissaodaMae.setText(linha[34]);
                //Nome do responsável
                txtNomedoResponsavel.setText(linha[35]);
                //Profissão do leitor
                txtProfissaodoLeitor.setText(linha[36]);
                //Situação do leitor
                if (linha[37].equals("A")) {
                    //ativo
                    cbSituacao.setSelectedIndex(0);
                } else {
                    //Inativo
                    cbSituacao.setSelectedIndex(1);
                }
                //Mostra a foto se tiver----------------------------------------
                File file = new File("FotodosLeitores/" + txtCodigo.getText().trim() + ".jpg");
                if (file.exists()) {
                    //Mostra a foto                    
                    Image img = new ImageIcon(file.getAbsolutePath()).getImage().getScaledInstance(120, 150, Image.SCALE_DEFAULT);
                    lblFoto.setIcon(new ImageIcon(img));

                } else {
                    //Não mostra nada
                    lblFoto.setIcon(null);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            btnEditar.setEnabled(true);
            btnExcluir.setEnabled(true);
            btnAdicionar.setEnabled(true);
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            jTabbedPane1.setSelectedIndex(0);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o registro que deseja editar ou excluir!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        }

}//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (evt.getClickCount() == 2) {
            btnSelecionaRegistroActionPerformed(null);
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        if (cbFiltro.getSelectedIndex() == 0) {
            txtConsulta.setDocument(new DocSomenteNumeros());
        } else {
            txtConsulta.setDocument(new FixedLengthDocument(100));
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    private void btnCarregaFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregaFotoActionPerformed

        javax.swing.JFileChooser jfc = new javax.swing.JFileChooser(new File("FotodosLeitores/"), FileSystemView.getFileSystemView());
        jfc.setMultiSelectionEnabled(false);
        jfc.setDialogTitle("Selecione a foto do leitor");
        jfc.setFileFilter(new FileNameExtensionFilter("JPG", "jpg"));
        this.lblFoto.setText("");

        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);// ha outras opcoes alem de files_only
        int resposta = jfc.showOpenDialog(this);

        if (resposta == 0) {
            File Nomeimagem = jfc.getSelectedFile();
            // se clica em carregar imagem faz isso...
            Image img = new ImageIcon(jfc.getSelectedFile().getAbsolutePath()).getImage().getScaledInstance(120, 150, Image.SCALE_DEFAULT);
            lblFoto.setIcon(new ImageIcon(img));
            // Escreve a imagem gerada para um arquivo
            try {
                //Foto 3X4
//                int width=120, height=150;
                BufferedImage image = ImageIO.read(Nomeimagem);

                // Salva como JPEG
                File file = new File("FotodosLeitores/" + txtCodigo.getText().trim() + ".jpg");
                ImageIO.write(image, "JPG", file);
            } catch (java.io.IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }

    }//GEN-LAST:event_btnCarregaFotoActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        File file = new File("FotodosLeitores/" + txtCodigo.getText().trim() + ".jpg");
        if (file.exists()) {
            file.delete();
            lblFoto.setIcon(null);
        } else {
            JOptionPane.showMessageDialog(null, "Foto não encontrada no diretório "
                    + "padrão! \n Operação não realizada!");
        }

    }//GEN-LAST:event_btnRemoverActionPerformed

    private void txtIdadeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdadeKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIdadeKeyTyped

    private void txtDataNascimentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataNascimentoKeyTyped

        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            evt.consume();
        }

    }//GEN-LAST:event_txtDataNascimentoKeyTyped

    private void txtDataNascimentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataNascimentoKeyReleased
        switch (txtDataNascimento.getText().trim().length()) {
            case 2:
                txtDataNascimento.setText(txtDataNascimento.getText().trim() + "/");
                break;
            case 5:
                txtDataNascimento.setText(txtDataNascimento.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtDataNascimentoKeyReleased

    private void txtNCasaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNCasaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNCasaKeyTyped

    private void txtCepKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCepKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCepKeyTyped

    private void txtCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCepKeyReleased
        switch (txtCep.getText().trim().length()) {
            case 5:
                txtCep.setText(txtCep.getText().trim() + "-");
                break;
        }

    }//GEN-LAST:event_txtCepKeyReleased

    private void txtCpfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCpfKeyTyped

    private void txtRgKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRgKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRgKeyTyped

    private void txtCpfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfKeyReleased
        switch (txtCpf.getText().trim().length()) {
            case 3:
                txtCpf.setText(txtCpf.getText().trim() + ".");
                break;
            case 7:
                txtCpf.setText(txtCpf.getText().trim() + ".");
                break;
            case 11:
                txtCpf.setText(txtCpf.getText().trim() + "-");
                break;
        }
    }//GEN-LAST:event_txtCpfKeyReleased

    private void txtTelefoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefoneKeyTyped

    private void txtTelefoneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyReleased
        switch (txtTelefone.getText().trim().length()) {
            case 1:
                txtTelefone.setText("(" + txtTelefone.getText().trim());
                break;
            case 3:
                txtTelefone.setText(txtTelefone.getText().trim() + ")");
                break;
            case 8:
                txtTelefone.setText(txtTelefone.getText().trim() + "-");
                break;
        }

    }//GEN-LAST:event_txtTelefoneKeyReleased

    private void txtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelularKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCelularKeyTyped

    private void txtCelularKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelularKeyReleased
        switch (txtCelular.getText().trim().length()) {
            case 1:
                txtCelular.setText("(" + txtCelular.getText().trim());
                break;
            case 3:
                txtCelular.setText(txtCelular.getText().trim() + ")");
                break;
            case 8:
                txtCelular.setText(txtCelular.getText().trim() + "-");
                break;
        }
    }//GEN-LAST:event_txtCelularKeyReleased

    private void txtDatadaConclusaoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatadaConclusaoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDatadaConclusaoKeyTyped

    private void txtDatadaConclusaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDatadaConclusaoKeyReleased
        switch (txtDatadaConclusao.getText().trim().length()) {
            case 2:
                txtDatadaConclusao.setText(txtDatadaConclusao.getText().trim() + "/");
                break;
            case 5:
                txtDatadaConclusao.setText(txtDatadaConclusao.getText().trim() + "/");
                break;
        }
    }//GEN-LAST:event_txtDatadaConclusaoKeyReleased

    private void cbUfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbUfFocusLost

        if (cbCidade.getSelectedIndex() == -1) {
            cbCidade.removeAllItems();
            for (Cidade cidade : new Cidade().carregar()) {
                if (cidade.getUf_iduf() == ((UF) cbUf.getSelectedItem()).getCodigo()) {
                    cbCidade.addItem(cidade);
                }
            }
        } else {
            //Se o código da cidade se refere à outra UF, carrega as cidades certas
            //se for igual, não faz nada
            if (((Cidade) cbCidade.getSelectedItem()).getUf_iduf() != ((UF) cbUf.getSelectedItem()).getCodigo()) {
                cbCidade.removeAllItems();
                for (Cidade cidade : new Cidade().carregar()) {
                    if (cidade.getUf_iduf() == ((UF) cbUf.getSelectedItem()).getCodigo()) {
                        cbCidade.addItem(cidade);
                    }
                }
            }
        }

    }//GEN-LAST:event_cbUfFocusLost

    private void cbCidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbCidadeFocusLost
        if (cbBairro.getSelectedIndex() == -1) {
            cbBairro.removeAllItems();
            for (Bairro bairro : new Bairro().carregar()) {
                if (bairro.getCidade_idcidade() == ((Cidade) cbCidade.getSelectedItem()).getIdcidade()) {
                    cbBairro.addItem(bairro);
                }
            }
        } else {
            //Se o código do bairro se refere à outra cidade, carrega as cidades certas
            //se for igual, não faz nada
            if (((Bairro) cbBairro.getSelectedItem()).getCidade_idcidade() != ((Cidade) cbCidade.getSelectedItem()).getIdcidade()) {
                cbCidade.removeAllItems();
                for (Bairro bairro : new Bairro().carregar()) {
                    if (bairro.getCidade_idcidade() == ((Cidade) cbCidade.getSelectedItem()).getIdcidade()) {
                        cbBairro.addItem(bairro);
                    }
                }
            }
        }
    }//GEN-LAST:event_cbCidadeFocusLost

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        //Pressiona ENTER
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            btnSelecionaRegistroActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1KeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnCarregaFoto;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.JComboBox cbBairro;
    private javax.swing.JComboBox cbCategoriadoLeitor;
    private javax.swing.JComboBox cbCidade;
    private javax.swing.JComboBox cbCidadedaInstituicao;
    private javax.swing.JComboBox cbEstadoCivil;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JComboBox cbFormacaoAcademica;
    private javax.swing.JComboBox cbNiveldeEscolaridade;
    private javax.swing.JComboBox cbSexo;
    private javax.swing.JComboBox cbSituacao;
    private javax.swing.JComboBox cbTipodeFormacao;
    private javax.swing.JComboBox cbUf;
    private javax.swing.JComboBox cbUfdaInstituicao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel jpConsulta;
    private javax.swing.JPanel jpContatoeFormacao;
    private javax.swing.JPanel jpFiliacao;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JPanel painel3;
    private javax.swing.JPanel painel4;
    private javax.swing.JPanel painel5;
    private javax.swing.JTextField txtCelular;
    private javax.swing.JTextField txtCep;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDataNascimento;
    private javax.swing.JTextField txtDatadaConclusao;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtIdade;
    private javax.swing.JTextField txtInstituicao;
    private javax.swing.JTextField txtNCasa;
    private javax.swing.JTextField txtNaturalidade;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomedaMae;
    private javax.swing.JTextField txtNomedoPai;
    private javax.swing.JTextField txtNomedoResponsavel;
    private javax.swing.JTextField txtProfissaodaMae;
    private javax.swing.JTextField txtProfissaodoLeitor;
    private javax.swing.JTextField txtProfissaodoPai;
    private javax.swing.JTextField txtReligiao;
    private javax.swing.JTextField txtRg;
    private javax.swing.JTextField txtSerie;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JTextField txtTurma;
    // End of variables declaration//GEN-END:variables
}
