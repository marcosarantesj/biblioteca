/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ifrmCadItens.java
 *
 * Created on 18/09/2010, 10:36:03
 */
package Forms;

import Classes2.Autores;
import Classes2.ClassificacoesLiterarias;
import Classes2.Editoras;
import Classes2.EstadoDoLivro;
import Classes2.Grupos;
import Classes2.Idiomas;
import FormsConsulta.MkTableModel;
import FormsConsulta.jdfrmConsultaAutores;
import FormsConsulta.jdfrmConsultaClasLiteraria;
import FormsConsulta.jdfrmConsultaEditora;
import FormsConsulta.jdfrmConsultaGrupo;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import Classes.DB;
import Classes.DocSomenteNumeros;
import Classes.FixedLengthDocument;
import Classes.Funcoes;
import Classes.Query;
import java.sql.ResultSet;
import java.text.ParseException;

/**
 *
 * @author MARK
 */
public class ifrmCadItens extends javax.swing.JInternalFrame {

    Funcoes f = new Funcoes();
    private boolean novoCadastro;
    //-----------------MODELO PARA ADICIONAR EXEMPLARES-------------------------
    private MkTableModel modelE;
    private ArrayList dadosE = new ArrayList();
    private String[] colunasE = new String[]{"Código", "Exemplar", "Estado de Conservação", "Status", "Disponibilidade"};
    //--------------------------------------------------------------------------
    //-----------------MODELO PARA ADICIONAR AUTORES----------------------------
    private MkTableModel modelA;
    private ArrayList dadosA = new ArrayList();
    private String[] colunasA = new String[]{"Autor"};
    //--------------------------------------------------------------------------
    //--------------------------------------------------------------------------
    //tabela pai
    private TableRowSorter<MkTableModel> sorter;
    private MkTableModel modelObra;
    private ArrayList dados;
    private String[] colunas = new String[]{"Data", "Hora", "Título", "Classificação Literária",
        "Grupo", "Editora", "Local"};
    private Query q;
    //--------------------------------------------------------------------------
    //tabela filho    
    private MkTableModel modelExemplares;
    private ArrayList dadosdaObra;
    private String[] colunas2 = new String[]{"Código", "Exemplar", "Estado", "Status", "Disponibilidade"};
    //--------------------------------------------------------------------------
    private DB banco;

    /** Creates new form ifrmCadItens */
    public ifrmCadItens() {
        initComponents();
        txtTitulo.setDocument(new FixedLengthDocument(40));
        txtSubtitulo.setDocument(new FixedLengthDocument(40));
        txtEdicao.setDocument(new FixedLengthDocument(30));
        txtVolume.setDocument(new FixedLengthDocument(20));
        txtDataPublicacao.setDocument(new FixedLengthDocument(10));
        txtMes.setDocument(new FixedLengthDocument(2));
        txtAno.setDocument(new FixedLengthDocument(2));
        txtNPag.setDocument(new FixedLengthDocument(5));
        txtLocal.setDocument(new FixedLengthDocument(20));
        txtExemplar.setDocument(new FixedLengthDocument(5));
        txtCDD.setDocument(new FixedLengthDocument(20));
        txtCutter.setDocument(new FixedLengthDocument(10));
        txtCDU.setDocument(new FixedLengthDocument(10));
        txtISBN.setDocument(new FixedLengthDocument(13));
        txtCDC.setDocument(new FixedLengthDocument(10));
        txtTombo.setDocument(new FixedLengthDocument(20));
        txtResumo.setDocument(new FixedLengthDocument(10000));
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        painel1 = new javax.swing.JPanel();
        txtCodigo = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        painel2 = new javax.swing.JPanel();
        txtTitulo = new javax.swing.JTextField();
        txtSubtitulo = new javax.swing.JTextField();
        txtEdicao = new javax.swing.JTextField();
        txtVolume = new javax.swing.JTextField();
        txtDataPublicacao = new javax.swing.JTextField();
        txtMes = new javax.swing.JTextField();
        txtAno = new javax.swing.JTextField();
        txtNPag = new javax.swing.JTextField();
        txtLocal = new javax.swing.JTextField();
        cbClasLiteraria = new javax.swing.JComboBox();
        btnConsultaClasLiteraria = new javax.swing.JButton();
        cbGrupo = new javax.swing.JComboBox();
        btnConsultaGrupo = new javax.swing.JButton();
        cbEditora = new javax.swing.JComboBox();
        btnConsultaEditora = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRecarregarClasLiteraria = new javax.swing.JButton();
        btnRecarregarGrupo = new javax.swing.JButton();
        btnRecarregarEditora = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        painel4 = new javax.swing.JPanel();
        txtExemplar = new javax.swing.JTextField();
        cbEstadodeConservacao = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        chkStatus = new javax.swing.JCheckBox();
        btnAddExemplar = new javax.swing.JButton();
        btnExcluirExemplar = new javax.swing.JButton();
        btnAlterarExemplar = new javax.swing.JButton();
        btnRecarregarEstConservacao = new javax.swing.JButton();
        painel5 = new javax.swing.JPanel();
        cbIdioma = new javax.swing.JComboBox();
        txtISBN = new javax.swing.JTextField();
        txtCDD = new javax.swing.JTextField();
        txtCutter = new javax.swing.JTextField();
        txtCDU = new javax.swing.JTextField();
        txtTombo = new javax.swing.JTextField();
        txtCDC = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        btnRecarregarIdiomas = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblExemplares2 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        painel6 = new javax.swing.JPanel();
        cbAutor = new javax.swing.JComboBox();
        btnAddAutor = new javax.swing.JButton();
        btnExcluiAutor = new javax.swing.JButton();
        btnConsultaAutor = new javax.swing.JButton();
        btnRecarregarAutores = new javax.swing.JButton();
        painel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAutores = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        painel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResumo = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCancelarConsulta = new javax.swing.JButton();
        txtConsulta = new javax.swing.JTextField();
        btnTodos = new javax.swing.JButton();
        btnSelecionaRegistro = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        cbFiltro = new javax.swing.JComboBox();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblObras = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblExemplares = new javax.swing.JTable();
        lblMensagem = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnSalvarVariosExemplares = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro de Obras do Acervo");
        setMinimumSize(new java.awt.Dimension(850, 650));
        setPreferredSize(new java.awt.Dimension(850, 650));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(820, 580));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(834, 580));

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtCodigo.setEditable(false);
        txtCodigo.setEnabled(false);

        txtData.setEditable(false);
        txtData.setEnabled(false);

        txtHora.setEditable(false);
        txtHora.setEnabled(false);

        jLabel4.setText("Hora");

        jLabel3.setText("Data");

        jLabel1.setText("Código do Título");

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(470, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtDataPublicacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataPublicacaoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDataPublicacaoKeyTyped(evt);
            }
        });

        txtMes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMesFocusLost(evt);
            }
        });
        txtMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMesKeyTyped(evt);
            }
        });

        txtAno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAnoFocusLost(evt);
            }
        });
        txtAno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnoKeyTyped(evt);
            }
        });

        txtNPag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNPagKeyTyped(evt);
            }
        });

        btnConsultaClasLiteraria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaClasLiteraria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaClasLiterariaActionPerformed(evt);
            }
        });

        btnConsultaGrupo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaGrupoActionPerformed(evt);
            }
        });

        btnConsultaEditora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaEditora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaEditoraActionPerformed(evt);
            }
        });

        jLabel2.setText("Título");

        jLabel8.setText("Subtítulo");

        jLabel9.setText("Edição");

        jLabel10.setText("Volume");

        jLabel11.setText("Dt Publicação");

        jLabel12.setText("Mês/Ano Edição");

        jLabel16.setText("/");

        jLabel13.setText("Nº de Pag.");

        jLabel14.setText("Local");

        jLabel5.setText("Classificação Literária");

        jLabel7.setText("Editora");

        jLabel6.setText("Grupo");

        btnRecarregarClasLiteraria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar16x16.png"))); // NOI18N
        btnRecarregarClasLiteraria.setToolTipText("Recarregar Classificações Literárias");
        btnRecarregarClasLiteraria.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRecarregarClasLiteraria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarClasLiterariaActionPerformed(evt);
            }
        });

        btnRecarregarGrupo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar16x16.png"))); // NOI18N
        btnRecarregarGrupo.setToolTipText("Recarregar Grupos");
        btnRecarregarGrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarGrupoActionPerformed(evt);
            }
        });

        btnRecarregarEditora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar16x16.png"))); // NOI18N
        btnRecarregarEditora.setToolTipText("Recarregar Editoras");
        btnRecarregarEditora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarEditoraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel2Layout = new javax.swing.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNPag, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDataPublicacao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel2Layout.createSequentialGroup()
                                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbClasLiteraria, javax.swing.GroupLayout.Alignment.LEADING, 0, 450, Short.MAX_VALUE)
                            .addComponent(cbGrupo, javax.swing.GroupLayout.Alignment.LEADING, 0, 450, Short.MAX_VALUE)
                            .addComponent(cbEditora, javax.swing.GroupLayout.Alignment.LEADING, 0, 450, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel2Layout.createSequentialGroup()
                                .addComponent(btnConsultaEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRecarregarEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painel2Layout.createSequentialGroup()
                                .addComponent(btnConsultaGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRecarregarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painel2Layout.createSequentialGroup()
                                .addComponent(btnConsultaClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRecarregarClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRecarregarClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSubtitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNPag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDataPublicacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel16)
                            .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addComponent(btnConsultaClasLiteraria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(btnConsultaGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConsultaEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(btnRecarregarGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRecarregarEditora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Dados Principais 1", jPanel1);

        painel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        txtExemplar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExemplarKeyTyped(evt);
            }
        });

        jLabel15.setText("Exemplar Nº");

        jLabel17.setText("Estado de Conservação");

        chkStatus.setText("Não emprestar");

        btnAddExemplar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAddExemplar.setText("Adicionar Exemplar");
        btnAddExemplar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExemplarActionPerformed(evt);
            }
        });

        btnExcluirExemplar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluirExemplar.setText("Excluir Exemplar");
        btnExcluirExemplar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirExemplarActionPerformed(evt);
            }
        });

        btnAlterarExemplar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/apply.png"))); // NOI18N
        btnAlterarExemplar.setText("Alterar Exemplar");
        btnAlterarExemplar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarExemplarActionPerformed(evt);
            }
        });

        btnRecarregarEstConservacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar.png"))); // NOI18N
        btnRecarregarEstConservacao.setToolTipText("Recarregar Estado de Conservação");
        btnRecarregarEstConservacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarEstConservacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel4Layout = new javax.swing.GroupLayout(painel4);
        painel4.setLayout(painel4Layout);
        painel4Layout.setHorizontalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(txtExemplar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbEstadodeConservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(8, 8, 8)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel4Layout.createSequentialGroup()
                        .addComponent(btnAddExemplar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirExemplar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlterarExemplar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecarregarEstConservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chkStatus))
                .addGap(26, 26, 26))
        );
        painel4Layout.setVerticalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17)
                    .addComponent(chkStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExemplar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbEstadodeConservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddExemplar)
                    .addComponent(btnExcluirExemplar)
                    .addComponent(btnAlterarExemplar)
                    .addComponent(btnRecarregarEstConservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        painel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel19.setText("CDD");

        jLabel20.setText("Cutter");

        jLabel21.setText("CDU");

        jLabel22.setText("Idioma");

        jLabel18.setText("Tombo");

        jLabel26.setText("ISBN");

        jLabel27.setText("CDC");

        btnRecarregarIdiomas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar16x16.png"))); // NOI18N
        btnRecarregarIdiomas.setToolTipText("Recarregar Idiomas");
        btnRecarregarIdiomas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarIdiomasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel5Layout = new javax.swing.GroupLayout(painel5);
        painel5.setLayout(painel5Layout);
        painel5Layout.setHorizontalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel18)
                    .addComponent(txtTombo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27)
                    .addComponent(txtCDC, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCDD, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCutter, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painel5Layout.createSequentialGroup()
                                .addComponent(txtCDU, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRecarregarIdiomas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel21))))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        painel5Layout.setVerticalGroup(
            painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(painel5Layout.createSequentialGroup()
                            .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20)
                                .addComponent(jLabel21))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtCDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCutter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCDU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRecarregarIdiomas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel26)))
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCDC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel5Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblExemplares2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblExemplares2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblExemplares2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblExemplares2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblExemplares2MousePressed(evt);
            }
        });
        tblExemplares2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblExemplares2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblExemplares2KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblExemplares2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel4, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        jTabbedPane1.addTab("Dados Principais 2", jPanel3);

        painel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Autor(es)"));

        btnAddAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAddAutor.setText("Adicionar Autor");
        btnAddAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAutorActionPerformed(evt);
            }
        });

        btnExcluiAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluiAutor.setText("Excluir Autor");
        btnExcluiAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluiAutorActionPerformed(evt);
            }
        });

        btnConsultaAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Procurar16x16.png"))); // NOI18N
        btnConsultaAutor.setBorder(null);
        btnConsultaAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaAutorActionPerformed(evt);
            }
        });

        btnRecarregarAutores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/atualizar16x16.png"))); // NOI18N
        btnRecarregarAutores.setToolTipText("Recarregar Autores");
        btnRecarregarAutores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecarregarAutoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painel6Layout = new javax.swing.GroupLayout(painel6);
        painel6.setLayout(painel6Layout);
        painel6Layout.setHorizontalGroup(
            painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel6Layout.createSequentialGroup()
                        .addComponent(cbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConsultaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecarregarAutores, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel6Layout.createSequentialGroup()
                        .addComponent(btnAddAutor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluiAutor)))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        painel6Layout.setVerticalGroup(
            painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRecarregarAutores, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnConsultaAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAutor)
                    .addComponent(btnExcluiAutor))
                .addGap(16, 16, 16))
        );

        painel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        tblAutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblAutores);

        javax.swing.GroupLayout painel8Layout = new javax.swing.GroupLayout(painel8);
        painel8.setLayout(painel8Layout);
        painel8Layout.setHorizontalGroup(
            painel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel8Layout.setVerticalGroup(
            painel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Autores", jPanel6);

        painel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Resumo"));

        txtResumo.setColumns(20);
        txtResumo.setLineWrap(true);
        txtResumo.setRows(5);
        txtResumo.setWrapStyleWord(true);
        txtResumo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(txtResumo);

        javax.swing.GroupLayout painel7Layout = new javax.swing.GroupLayout(painel7);
        painel7.setLayout(painel7Layout);
        painel7Layout.setHorizontalGroup(
            painel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel7Layout.setVerticalGroup(
            painel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Resumo", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Consulta"));
        jPanel7.setPreferredSize(new java.awt.Dimension(793, 102));

        btnCancelarConsulta.setText("Cancelar");
        btnCancelarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarConsultaActionPerformed(evt);
            }
        });

        txtConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtConsultaKeyReleased(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        btnSelecionaRegistro.setText("Selecionar registro");
        btnSelecionaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionaRegistroActionPerformed(evt);
            }
        });

        jLabel23.setText("DISPONÍVEL");

        jLabel24.setText("EMPRESTADO/LENDO");

        jLabel25.setText("RESERVADO");

        jPanel12.setBackground(new java.awt.Color(204, 204, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jPanel13.setBackground(new java.awt.Color(255, 51, 51));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 102));
        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelarConsulta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionaRegistro)
                        .addGap(85, 85, 85)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancelarConsulta)
                        .addComponent(btnTodos)
                        .addComponent(btnSelecionaRegistro)
                        .addComponent(jLabel23)
                        .addComponent(jLabel24)
                        .addComponent(jLabel25))
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro"));

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Código", "Título", "Classificação Literária", "Grupo", "Editora" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(554, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Obras"));
        jPanel15.setPreferredSize(new java.awt.Dimension(609, 227));

        jScrollPane3.setAutoscrolls(true);

        tblObras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblObras.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblObras.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblObras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblObrasMouseClicked(evt);
            }
        });
        tblObras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblObrasKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblObrasKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblObras);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Exemplares da Obra"));
        jPanel16.setPreferredSize(new java.awt.Dimension(609, 227));

        jScrollPane5.setAutoscrolls(true);

        tblExemplares.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblExemplares.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblExemplares.setFocusable(false);
        tblExemplares.setRequestFocusEnabled(false);
        tblExemplares.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(tblExemplares);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblMensagem.setFont(new java.awt.Font("Tahoma", 0, 14));
        lblMensagem.setForeground(java.awt.Color.blue);
        lblMensagem.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblMensagem.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consulta", jPanel4);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Adicionar.png"))); // NOI18N
        btnAdicionar.setToolTipText("Adicionar");
        btnAdicionar.setFocusable(false);
        btnAdicionar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdicionar.setPreferredSize(new java.awt.Dimension(24, 24));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdicionar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Editar.png"))); // NOI18N
        btnEditar.setToolTipText("Editar");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Cancelar.png"))); // NOI18N
        btnCancelar.setToolTipText("Cancelar");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCancelar);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar.png"))); // NOI18N
        btnSalvar.setToolTipText("Salvar Título");
        btnSalvar.setFocusable(false);
        btnSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvar);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Excluir.png"))); // NOI18N
        btnExcluir.setToolTipText("Excluir");
        btnExcluir.setFocusable(false);
        btnExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExcluir);

        btnSalvarVariosExemplares.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Salvar_Varios.png"))); // NOI18N
        btnSalvarVariosExemplares.setToolTipText("Salvar vários exemplares iguais");
        btnSalvarVariosExemplares.setFocusable(false);
        btnSalvarVariosExemplares.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSalvarVariosExemplares.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSalvarVariosExemplares.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarVariosExemplaresActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSalvarVariosExemplares);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-869)/2, (screenSize.height-650)/2, 869, 650);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Atualiza a expressão regular do filtro da linha da expressão
     * na caixa de texto. Filtra na jTable quando digita.
     */
    private void newFilter(int coluna, String texto) {
        RowFilter<MkTableModel, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter("(?i)" + texto, coluna);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void txtMesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMesFocusLost

        if (txtMes.getText().length() == 1) {
            txtMes.setText("0" + txtMes.getText());
        }
}//GEN-LAST:event_txtMesFocusLost

    private void txtAnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAnoFocusLost

        if (txtAno.getText().length() == 1) {
            txtAno.setText("0" + txtAno.getText());
        }
}//GEN-LAST:event_txtAnoFocusLost

    private void txtDataPublicacaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataPublicacaoKeyReleased

        switch (txtDataPublicacao.getText().trim().length()) {
            case 2:
                txtDataPublicacao.setText(txtDataPublicacao.getText() + "/");
                break;
            case 5:
                txtDataPublicacao.setText(txtDataPublicacao.getText() + "/");
                break;
        }
}//GEN-LAST:event_txtDataPublicacaoKeyReleased

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        //Classificaçao Literária
        for (ClassificacoesLiterarias a : new ClassificacoesLiterarias().carregar()) {
            cbClasLiteraria.addItem(a);
        }
        //Editora
        for (Editoras b : new Editoras().carregar()) {
            cbEditora.addItem(b);
        }
        //Grupo
        for (Grupos c : new Grupos().carregar()) {
            cbGrupo.addItem(c);
        }
        //Estado de Conservação
        for (EstadoDoLivro d : new EstadoDoLivro().carregar()) {
            cbEstadodeConservacao.addItem(d);
        }
        //Idioma
        for (Idiomas e : new Idiomas().carregar()) {
            cbIdioma.addItem(e);
        }
        //Autores
        for (Autores g : new Autores().carregar()) {
            cbAutor.addItem(g);
        }
        //======================================================================
        f.ativarCampos(painel2, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        f.ativarCampos(painel6, false);
        f.ativarCampos(painel7, false);
        cbAutor.setSelectedIndex(-1);
        cbClasLiteraria.setSelectedIndex(-1);
        cbEditora.setSelectedIndex(-1);
        cbEstadodeConservacao.setSelectedIndex(-1);
        cbGrupo.setSelectedIndex(-1);
        cbIdioma.setSelectedIndex(-1);

        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);
        cbFiltro.setSelectedIndex(1);
        btnAddAutor.setEnabled(false);
        btnExcluirExemplar.setEnabled(false);
        chkStatus.setEnabled(false);
        btnTodosActionPerformed(null);
        txtResumo.setEnabled(false);

    }//GEN-LAST:event_formInternalFrameOpened

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Botões
        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(true);

        f.ativarCampos(painel2, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);
        f.ativarCampos(painel6, true);
        f.ativarCampos(painel7, true);
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        f.limparCampos(painel6);
        f.limparCampos(painel7);
        txtResumo.setText("");
        txtResumo.setEnabled(true);
        cbAutor.setSelectedIndex(-1);
        cbClasLiteraria.setSelectedIndex(-1);
        cbEditora.setSelectedIndex(-1);
        cbEstadodeConservacao.setSelectedIndex(-1);
        cbGrupo.setSelectedIndex(-1);
        cbIdioma.setSelectedIndex(-1);
        btnAddAutor.setEnabled(true);
        btnExcluirExemplar.setEnabled(true);
        chkStatus.setEnabled(true);

        //Apaga todos os registros da tabela de exemplares
        if (tblExemplares2.getRowCount() > 0) {
            modelE.removeAllRows();
        }
        //Apaga todos os registros da tabela de Autores
        //Limpa a tabela para preencher novamente
        if (tblAutores.getRowCount() > 0) {
            modelA.removeAllRows();
        }
        //----------------------------------------------------------------------
        //cria um objeto MysqlDB apontando para o banco especificado.
//        banco = new DB();
//        banco.connect();
//        int max1 = -1;
//
//        //conecta ao banco
//        Query query1 = new Query(banco.conn);
//        //Cria um objeto do tipo query chamado query1 que recebe
//        //como argumento o  objeto banco.
//
//        try {
//            String sql = " SELECT MAX(Codigo)As Codigo FROM cadlivros";
//            query1.open(sql); //executa uma sentença sql.
//            query1.next();
//            max1 = query1.rs.getInt("Codigo");
//            banco.disconnect();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Erro:" + e.getMessage());
//            try {
//                query1.rs.close();
//            } catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Erro resultset: " + ex.getMessage());
//            }
//        }
//        //Numeração automática
//        txtCodigo.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(String.valueOf(max1 + 1))));

        jTabbedPane1.setSelectedIndex(0);
        txtTitulo.requestFocus();
        novoCadastro = true;

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        btnAdicionar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnSalvar.setEnabled(true);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);

        f.ativarCampos(painel2, true);
        f.ativarCampos(painel4, true);
        f.ativarCampos(painel5, true);
        f.ativarCampos(painel6, true);
        f.ativarCampos(painel7, true);
        txtResumo.setEnabled(true);
        btnAddAutor.setEnabled(true);
        btnExcluirExemplar.setEnabled(true);
        chkStatus.setEnabled(true);
//        jTabbedPane1.setSelectedIndex(0);
//        txtTitulo.requestFocus();
        novoCadastro = false;
}//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        btnAdicionar.setEnabled(true);
        btnEditar.setEnabled(false);
        btnCancelar.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnExcluir.setEnabled(false);
        btnSalvarVariosExemplares.setEnabled(false);

        f.ativarCampos(painel2, false);
        f.ativarCampos(painel4, false);
        f.ativarCampos(painel5, false);
        f.ativarCampos(painel6, false);
        f.ativarCampos(painel7, false);
        txtResumo.setEnabled(false);


        //Limpa os controles ao cancelar        
        f.limparCampos(painel1);
        f.limparCampos(painel2);
        f.limparCampos(painel4);
        f.limparCampos(painel5);
        f.limparCampos(painel6);
        f.limparCampos(painel7);
        cbAutor.setSelectedIndex(-1);
        cbClasLiteraria.setSelectedIndex(-1);
        cbEditora.setSelectedIndex(-1);
        cbEstadodeConservacao.setSelectedIndex(-1);
        cbGrupo.setSelectedIndex(-1);
        cbIdioma.setSelectedIndex(-1);
        btnAddAutor.setEnabled(false);
        btnExcluirExemplar.setEnabled(false);
        chkStatus.setEnabled(false);
        //Apaga todos os registros da tabela de exemplares
        if (tblExemplares2.getRowCount() > 0) {
            modelE.removeAllRows();
        }
        //Apaga todos os registros da tabela de Autores
        //Limpa a tabela para preencher novamente
        if (tblAutores.getRowCount() > 0) {
            modelA.removeAllRows();
        }

        jTabbedPane1.setSelectedIndex(0);
        txtTitulo.requestFocus();
        novoCadastro = false;

}//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        if (txtTitulo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Título da Obra !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            txtTitulo.requestFocus();
        } //        else if (cbClasLiteraria.getModel().getSelectedItem() == null) {
        //            JOptionPane.showMessageDialog(null, "Selecione a Classificação Literária !",
        //                    "Aviso", JOptionPane.WARNING_MESSAGE);
        //            jTabbedPane1.setSelectedIndex(0);
        //            cbClasLiteraria.requestFocus();
        //        }
        else if (cbEditora.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione a Editora !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbEditora.requestFocus();
        } else if (cbGrupo.getModel().getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione o Grupo !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(0);
            cbGrupo.requestFocus();
        } else if (cbIdioma.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione o idioma !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            cbIdioma.requestFocus();
        } else if (tblExemplares2.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Adicione pelo menos um exemplar"
                    + " ao título !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            txtExemplar.requestFocus();

        } else if (txtCDC.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo CDC !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(1);
            txtCDC.requestFocus();
        } else if (tblAutores.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Adicione pelo menos um autor.\n"
                    + "Caso não exista autor, adicione autor \"Desconhecido\""
                    + " ao título !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            jTabbedPane1.setSelectedIndex(2);
            cbAutor.requestFocus();
        }//Insert
        else if (novoCadastro == true) {

            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
//==============================================================================
            PreparedStatement st = null;

            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//==============================================================================
            //Insere primeiro na tabela cadlivros(pai)
            //Insere usando formatacao JAVA(evita injecao SQL)
            int ri = 0;
            PreparedStatement st1 = null;
            String sqlInsert = "INSERT INTO cadlivros(data_2,hora,"
                    + "codclas_literaria,codeditora,codgrupo,titulo,subtitulo,"
                    + "edicao,volume,datapublic,mes,ano,npaginas,local_2,"
                    + "codidioma,cdd,cutter,cdu,tombo,resumo,isbn,cdc)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)returning codigo";
            //22 campos
            //Para o codigo do cadlivros
            int id = 0;
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                //Numeração automática


                //st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));                
                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = new Date();
                java.sql.Date dataJDBC = new java.sql.Date(dt.getTime());
                DateFormat h = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hr = new Date();
                java.sql.Time horaJDBC = new java.sql.Time(hr.getTime());

                txtData.setText(df.format(new Date()));
                txtHora.setText(h.format(new Date()));
                st1.setDate(1, dataJDBC);
                st1.setTime(2, horaJDBC);

//Código da jCombo (Clas.Literária,Editora,Grupo(Campos requeridos)-------------
                if (cbClasLiteraria.getModel().getSelectedItem() == null) {
                    st1.setNull(3, Types.INTEGER);
                } else {
                    st1.setInt(3, ((ClassificacoesLiterarias) cbClasLiteraria.getSelectedItem()).getCodigo());
                }
                st1.setInt(4, ((Editoras) cbEditora.getSelectedItem()).getCodigo());
                st1.setInt(5, ((Grupos) cbGrupo.getSelectedItem()).getCodigo());
                st1.setString(6, txtTitulo.getText().trim());
                //Não requeridos
                if (txtSubtitulo.getText().trim().equals("")) {
                    st1.setNull(7, Types.VARCHAR);
                } else {
                    st1.setString(7, txtSubtitulo.getText().trim());
                }
                if (txtEdicao.getText().trim().equals("")) {
                    st1.setNull(8, Types.VARCHAR);
                } else {
                    st1.setString(8, txtEdicao.getText().trim());
                }
                if (txtVolume.getText().trim().equals("")) {
                    st1.setNull(9, Types.VARCHAR);
                } else {
                    st1.setString(9, txtVolume.getText().trim());
                }

//--------------Converte para data a data de publicação-------------------------
                if (txtDataPublicacao.getText().trim().equals("")) {
                    st1.setNull(10, Types.DATE);
                } else if (!txtDataPublicacao.getText().trim().equals("")) {
                    DateFormat dtFPublic = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtP = dtFPublic.parse(txtDataPublicacao.getText().trim());
                    java.sql.Date dataPublicJDBC = new java.sql.Date(dtP.getTime());
                    st1.setDate(10, dataPublicJDBC);
                }
//------------------------------------------------------------------------------
                if (txtMes.getText().trim().equals("")) {
                    st1.setNull(11, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(11, Integer.parseInt(txtMes.getText().trim()));
                }
                if (txtAno.getText().trim().equals("")) {
                    st1.setNull(12, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(12, Integer.parseInt(txtAno.getText().trim()));
                }
                if (txtNPag.getText().trim().equals("")) {
                    st1.setNull(13, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(13, Integer.parseInt(txtNPag.getText().trim()));
                }
//------------------------------------------------------------------------------
                if (txtLocal.getText().trim().equals("")) {
                    st1.setNull(14, Types.VARCHAR);
                } else {
                    st1.setString(14, txtLocal.getText().trim());
                }
                st1.setInt(15, ((Idiomas) cbIdioma.getSelectedItem()).getCodigo());
                if (txtCDD.getText().trim().equals("")) {
                    st1.setNull(16, Types.VARCHAR);
                } else {
                    st1.setString(16, txtCDD.getText().trim());
                }
                if (txtCutter.getText().trim().equals("")) {
                    st1.setNull(17, Types.VARCHAR);
                } else {
                    st1.setString(17, txtCutter.getText().trim());
                }
                if (txtCDU.getText().trim().equals("")) {
                    st1.setNull(18, Types.VARCHAR);
                } else {
                    st1.setString(18, txtCDU.getText().trim());
                }
                if (txtTombo.getText().trim().equals("")) {
                    st1.setNull(19, Types.VARCHAR);
                } else {
                    st1.setString(19, txtTombo.getText().trim());
                }
                if (txtResumo.getText().trim().equals("")) {
                    st1.setNull(20, Types.VARCHAR);
                } else {
                    st1.setString(20, txtResumo.getText().trim());
                }
                if (txtISBN.getText().trim().equals("")) {
                    st1.setNull(21, Types.VARCHAR);
                } else {
                    st1.setString(21, txtISBN.getText().trim());
                }
                if (txtCDC.getText().trim().equals("")) {
                    st1.setNull(22, Types.VARCHAR);
                } else {
                    st1.setString(22, txtCDC.getText().trim());
                }

                ResultSet rs = st1.executeQuery();
                //Retorna o código da tabela cadlivros
                if (rs.next()) {
                    id = st1.getResultSet().getInt("codigo");
                }
                st1.close();
                ri = 1;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela"
                        + " de livros! " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }


//==============================================================================
            //Pega o valor máximo da tabela detalhesdolivro
//            int maxL = 0;
//            Query cMaxL = new Query(banco.conn);
//            cMaxL.open("SELECT MAX(iddetalhesdolivro)AS codigo "
//                    + "FROM detalhesdolivro");
//            cMaxL.next();
//            try {
//                maxL = cMaxL.rs.getInt("codigo");
//                cMaxL.rs.close();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Erro ao pegar valor máximo de" +
//                        " detalhes do livro! \n"
//                        + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
//            }
//------------------------------------------------------------------------------
            //Detalhes do livro
            int ri2 = 0;
            if (ri > 0) {

                //Insere na tabela filho (detalhesdolivro)
                PreparedStatement st2 = null;
                String sqlInsert2 = "INSERT INTO detalhesdolivro"
                        + "(exemplar,estadodolivro_id,status,"
                        + "disponibilidade,cadlivros_id) "
                        + "VALUES(?,?,?,?,?)";
                //código máximo +1
                //maxL = maxL + 1;
                try {
                    st2 = banco.conn.prepareStatement(sqlInsert2);
                    for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
                        //Código automático
                        //st2.setInt(1, maxL++);
                        //Número do exemplar
                        st2.setInt(1, Integer.parseInt(tblExemplares2.getValueAt(i, 1).toString()));
                        //codigo do estado de conservação do exemplar
                        st2.setInt(2, Integer.parseInt(modelE.getRow(i, 5).toString()));
                        //Status (Emprestar ou não)
                        if (tblExemplares2.getValueAt(i, 3).equals("EMPRESTAR")) {
                            st2.setString(3, "F");
                        } else {
                            st2.setString(3, "V");
                        }
                        //Disponibilidade
                        st2.setString(4, "D");
                        //Código do livro
                        st2.setInt(5, id);

                        ri2 = st2.executeUpdate();
                    }
                    st2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela"
                            + " detalhesdolivro! \n " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
//==============================================================================
//            //Se inseriu na tabela pai (cadlivros) e tabela filho detalhesdolivro
//            // e não foi adicionado autor
//            if (ri > 0 && ri2 > 0 && tblAutores.getRowCount() == 0) {
//                // Se as query foram executadas com sucesso,
//                //executa o commit para efetivar as operações
//                PreparedStatement stCommit = null;
//                try {
//                    stCommit = banco.conn.prepareStatement("COMMIT");
//                    stCommit.execute();
//                    stCommit.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
//                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
//                }
////------------------------------------------------------------------------------
//                JOptionPane.showMessageDialog(null, "Registro adicionado"
//                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
//                btnAdicionar.setEnabled(true);
//                btnEditar.setEnabled(false);
//                btnCancelar.setEnabled(false);
//                btnSalvar.setEnabled(false);
//                btnExcluir.setEnabled(false);
//                btnSalvarVariosExemplares.setEnabled(false);
//
//                f.ativarCampos(painel2, false);
//                f.ativarCampos(painel4, false);
//                f.ativarCampos(painel5, false);
//                f.ativarCampos(painel6, false);
//                f.ativarCampos(painel7, false);
//                txtResumo.setEnabled(false);
////                btnTodosActionPerformed(evt);
//
//                f.limparCampos(painel1);
//                f.limparCampos(painel2);
//                f.limparCampos(painel4);
//                f.limparCampos(painel5);
//                f.limparCampos(painel6);
//                f.limparCampos(painel7);
//                cbAutor.setSelectedIndex(-1);
//                cbClasLiteraria.setSelectedIndex(-1);
//                cbEditora.setSelectedIndex(-1);
//                cbEstadodeConservacao.setSelectedIndex(-1);
//                cbGrupo.setSelectedIndex(-1);
//                cbIdioma.setSelectedIndex(-1);
//                btnAddAutor.setEnabled(false);
//                btnExcluiAutor.setEnabled(false);
//                chkStatus.setEnabled(false);
//                //Apaga todos os registros da tabela de exemplares
//                if (tblExemplares2.getRowCount() > 0) {
//                    modelE.removeAllRows();
//                }
//                //Apaga todos os registros da tabela de Autores
//                //Limpa a tabela para preencher novamente
//                if (tblAutores.getRowCount() > 0) {
//                    modelA.removeAllRows();
//                }
//            } else {
//                // Se as query retornaram falha,
//                //executa o rollback para desfazer as operações
//                PreparedStatement stRollback = null;
//                try {
//                    stRollback = banco.conn.prepareStatement("ROLLBACK");
//                    stRollback.close();
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
//                            + "Erro comando ROLLBACK \n"
//                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
//                }
//            }
//==============================================================================
            //Se foi adicionado em cadlivros e detalhesdolivro, adiciona o autor
            if (ri > 0 && ri2 > 0 && tblAutores.getRowCount() > 0) {
                int riAutor = 0;
                PreparedStatement stInsertAutor = null;
                try {
                    String sqlInsertA = "INSERT INTO autoresdoitem(codlivro,codautor)VALUES("
                            + "?,?)";
                    stInsertAutor = banco.conn.prepareStatement(sqlInsertA);
                    //======Verifica se e igual e retorna o codigo
                    for (int row = 0; row < tblAutores.getRowCount(); row++) {
                        //Pega a ID do cadlivros
                        stInsertAutor.setInt(1, id);
                        //Pega o código de cada autor no modelo
                        stInsertAutor.setInt(2, Integer.parseInt(modelA.getRow(row, 1).toString()));
                        riAutor = stInsertAutor.executeUpdate();
                    }

                    stInsertAutor.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

                }
                //Se foi adicionado em cadlivros e detalhesdolivro e autoresdoitem
                if (ri > 0 && ri2 > 0 && riAutor > 0) {
                    // Se as query foram executadas com sucesso,
                    //executa o commit para efetivar as operações
                    PreparedStatement stCommit = null;
                    try {
                        stCommit = banco.conn.prepareStatement("COMMIT");
                        stCommit.execute();
                        stCommit.close();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                                + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                    }
//------------------------------------------------------------------------------
                    JOptionPane.showMessageDialog(null, "Registro adicionado"
                            + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                    btnAdicionar.setEnabled(true);
                    btnEditar.setEnabled(false);
                    btnCancelar.setEnabled(false);
                    btnSalvar.setEnabled(false);
                    btnExcluir.setEnabled(false);
                    btnSalvarVariosExemplares.setEnabled(false);

                    f.ativarCampos(painel2, false);
                    f.ativarCampos(painel4, false);
                    f.ativarCampos(painel5, false);
                    f.ativarCampos(painel6, false);
                    f.ativarCampos(painel7, false);

                    btnTodosActionPerformed(evt);

                    f.limparCampos(painel1);
                    f.limparCampos(painel2);
                    f.limparCampos(painel4);
                    f.limparCampos(painel5);
                    f.limparCampos(painel6);
                    f.limparCampos(painel7);
                    txtResumo.setEnabled(false);
                    txtResumo.setText("");
                    cbAutor.setSelectedIndex(-1);
                    cbClasLiteraria.setSelectedIndex(-1);
                    cbEditora.setSelectedIndex(-1);
                    cbEstadodeConservacao.setSelectedIndex(-1);
                    cbGrupo.setSelectedIndex(-1);
                    cbIdioma.setSelectedIndex(-1);
                    btnAddAutor.setEnabled(false);
                    btnExcluiAutor.setEnabled(false);
                    chkStatus.setEnabled(false);
                    //Apaga todos os registros da tabela de exemplares
                    if (tblExemplares2.getRowCount() > 0) {
                        modelE.removeAllRows();
                    }
                    //Apaga todos os registros da tabela de Autores
                    //Limpa a tabela para preencher novamente
                    if (tblAutores.getRowCount() > 0) {
                        modelA.removeAllRows();
                    }
                } else {
                    // Se as query retornaram falha,
                    //executa o rollback para desfazer as operações
                    PreparedStatement stRollback = null;
                    try {
                        stRollback = banco.conn.prepareStatement("ROLLBACK");
                        stRollback.close();

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Operação não realizada! "
                                + "Erro comando ROLLBACK \n"
                                + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }

        } //=======================UPDATE======================================
        //Tem que atualizar o exemplar e o título do exemplar
        //São vários exemplares para 1 título
        //Não pode excluir e adicionar novamente em detalhesdolivro para
        //não mudar o código do exemplar
        //senão Update
        else if (novoCadastro == false) {
            //Atualiza apenas o cadlivros
            //Para alterar ou excluir os exemplares, colocar um botão
            //No form para fazer isso

            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
//==============================================================================
            PreparedStatement st = null;
            try {
                //Começa a transação que será executada uma a uma
                st = banco.conn.prepareStatement("BEGIN");
                st.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro em BEGIN \n"
                        + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//==============================================================================
            //=========================================================
            //Primeiro atualiza na tabela pai(cadlivros)
            int ru = 0;
            PreparedStatement st1 = null;
            String sqlInsert = "UPDATE cadlivros SET data_2=?,hora=?,"
                    + "codclas_literaria=?,codeditora=?,codgrupo=?,titulo=?,subtitulo=?,"
                    + "edicao=?,volume=?,datapublic=?,mes=?,ano=?,npaginas=?,local_2=?,"
                    + "codidioma=?,cdd=?,cutter=?,cdu=?,tombo=?,resumo=?,isbn=?,cdc=? WHERE "
                    + "codigo=?";

            try {
                st1 = banco.conn.prepareStatement(sqlInsert);

                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                java.util.Date dt = new Date();
                java.sql.Date dataJDBC = new java.sql.Date(dt.getTime());
                DateFormat h = new SimpleDateFormat("HH:mm:ss");
                java.util.Date hr = new Date();
                java.sql.Time horaJDBC = new java.sql.Time(hr.getTime());

                txtData.setText(df.format(new Date()));
                txtHora.setText(h.format(new Date()));
                st1.setDate(1, dataJDBC);
                st1.setTime(2, horaJDBC);

//Código da jCombo (Clas.Literária,Editora,Grupo(Campos requeridos)-------------
                st1.setInt(3, ((ClassificacoesLiterarias) cbClasLiteraria.getSelectedItem()).getCodigo());
                st1.setInt(4, ((Editoras) cbEditora.getSelectedItem()).getCodigo());
                st1.setInt(5, ((Grupos) cbGrupo.getSelectedItem()).getCodigo());
                st1.setString(6, txtTitulo.getText().trim());
                //Não requeridos
                if (txtSubtitulo.getText().trim().equals("")) {
                    st1.setNull(7, Types.VARCHAR);
                } else {
                    st1.setString(7, txtSubtitulo.getText().trim());
                }
                if (txtEdicao.getText().trim().equals("")) {
                    st1.setNull(8, Types.VARCHAR);
                } else {
                    st1.setString(8, txtEdicao.getText().trim());
                }
                if (txtVolume.getText().trim().equals("")) {
                    st1.setNull(9, Types.VARCHAR);
                } else {
                    st1.setString(9, txtVolume.getText().trim());
                }

//--------------Converte para data a data de publicação-------------------------
                if (txtDataPublicacao.getText().trim().equals("")) {
                    st1.setNull(10, Types.DATE);
                } else if (!txtDataPublicacao.getText().trim().equals("")) {
                    DateFormat dtFPublic = new SimpleDateFormat("dd/MM/yyyy");
                    java.util.Date dtP = dtFPublic.parse(txtDataPublicacao.getText().trim());
                    java.sql.Date dataPublicJDBC = new java.sql.Date(dtP.getTime());
                    st1.setDate(10, dataPublicJDBC);
                }
//------------------------------------------------------------------------------
                if (txtMes.getText().trim().equals("")) {
                    st1.setNull(11, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(11, Integer.parseInt(txtMes.getText().trim()));
                }
                if (txtAno.getText().trim().equals("")) {
                    st1.setNull(12, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(12, Integer.parseInt(txtAno.getText().trim()));
                }
                if (txtNPag.getText().trim().equals("")) {
                    st1.setNull(13, java.sql.Types.INTEGER);
                } else {
                    st1.setInt(13, Integer.parseInt(txtNPag.getText().trim()));
                }
//------------------------------------------------------------------------------
                if (txtLocal.getText().trim().equals("")) {
                    st1.setNull(14, Types.VARCHAR);
                } else {
                    st1.setString(14, txtLocal.getText().trim());
                }
                st1.setInt(15, ((Idiomas) cbIdioma.getSelectedItem()).getCodigo());
                if (txtCDD.getText().trim().equals("")) {
                    st1.setNull(16, Types.VARCHAR);
                } else {
                    st1.setString(16, txtCDD.getText().trim());
                }
                if (txtCutter.getText().trim().equals("")) {
                    st1.setNull(17, Types.VARCHAR);
                } else {
                    st1.setString(17, txtCutter.getText().trim());
                }
                if (txtCDU.getText().trim().equals("")) {
                    st1.setNull(18, Types.VARCHAR);
                } else {
                    st1.setString(18, txtCDU.getText().trim());
                }
                if (txtTombo.getText().trim().equals("")) {
                    st1.setNull(19, Types.VARCHAR);
                } else {
                    st1.setString(19, txtTombo.getText().trim());
                }
                if (txtResumo.getText().trim().equals("")) {
                    st1.setNull(20, Types.VARCHAR);
                } else {
                    st1.setString(20, txtResumo.getText().trim());
                }
                if (txtISBN.getText().trim().equals("")) {
                    st1.setNull(21, Types.VARCHAR);
                } else {
                    st1.setString(21, txtISBN.getText().trim());
                }
                if (txtISBN.getText().trim().equals("")) {
                    st1.setNull(22, Types.VARCHAR);
                } else {
                    st1.setString(22, txtISBN.getText().trim());
                }
                st1.setInt(23, Integer.parseInt(txtCodigo.getText().trim()));

                ru = st1.executeUpdate();
                st1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar na tabela"
                        + " de livros! " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//==============================================================================
//            //------DELETA NA TABELA FILHO E DEPOIS ADICIONA NOVAMENTE----------
//            int rdF = 0;
//            if (ru > 0) {
//
//                PreparedStatement std1 = null;
//                try {
//
//                    String sql = "DELETE FROM detalhesdolivro WHERE cadlivros_id=?";
//                    std1 = banco.conn.prepareStatement(sql);
//                    std1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
//                    rdF = std1.executeUpdate();
//                    std1.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Erro ao deletar em detalhesdolivro ! "
//                            + "\n" + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
//                }
//            }
//==============================================================================
//            //------Pega o valor ,máximo NA TABELA FILHO detalhesdolivro--------------
//            int ri1 = 0;
//            if (rdF > 0) {
//                //Pega o valor máximo da tabela
//                int maxL = 0;
//                Query cMaxL = new Query(banco.conn);
//                cMaxL.open("SELECT MAX(iddetalhesdolivro)AS codigo "
//                        + "FROM detalhesdolivro");
//                cMaxL.next();
//                try {
//                    maxL = cMaxL.rs.getInt("codigo");
//                    cMaxL.rs.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Erro ao pega valor máximo! \n"
//                            + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
//                }

//------------------------------------------------------------------------------
//                //Insere na tabela filho (detalhesdolivro)
//                PreparedStatement st2 = null;
//                String sqlInsert2 = "INSERT INTO detalhesdolivro"
//                        + "(iddetalhesdolivro,exemplar,estadodolivro_id,status,"
//                        + "disponibilidade,cadlivros_id) "
//                        + "VALUES(?,?,?,?,?,?)";
//                //código máximo +1
//                maxL = maxL + 1;
//                try {
//                    st2 = banco.conn.prepareStatement(sqlInsert2);
//                    for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
//                        st2.setInt(1, maxL++);
//                        st2.setInt(2, Integer.parseInt(tblExemplares2.getValueAt(i, 0).toString()));
//                        //codigo do estado do livro
//                        st2.setInt(3, Integer.parseInt(modelE.getRow(i, 4).toString()));
//                        //Status (Emprestar ou não)
//                        if (tblExemplares2.getValueAt(i, 2).equals("EMPRESTAR")) {
//                            st2.setString(4, "F");
//                        } else {
//                            st2.setString(4, "V");
//                        }
//                        //Disponibilidade
//                        st2.setString(5, "D");
//                        st2.setInt(6, Integer.parseInt(txtCodigo.getText().trim()));
//                        ri1 = st2.executeUpdate();
//                    }
//                    st2.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Erro ao inserir na tabela"
//                            + " detalhesdolivro! \n " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
//                }
//            }
//==============================================================================
            int rdF2 = 0;
            //if (ri1 > 0) {
//------------------DELETA NA TABELA DE AUTORES SE NÃO TIVER NENHUM AUTOR-------
            //NÃO PRECISA FAZER A VERIFICAÇÃO SE TEM AUTORES OU NÃO NA TABELA
            PreparedStatement std1 = null;
            try {

                String sql = "DELETE FROM autoresdoitem WHERE codlivro=?";
                std1 = banco.conn.prepareStatement(sql);
                std1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                rdF2 = std1.executeUpdate();
                std1.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao deletar em autores do ítem ! "
                        + "\n" + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }
            // }
//==============================================================================
            //Verifica se não existe autores na lista
//==============================================================================
            //Se atualizou na tabela pai (cadlivros)
            //e inseriu na tabela filho detalhesdolivro
            // e não foi adicionado autor
//            if (ru > 0 && rdF > 0 && rdF2 > 0 && ri1 > 0 && tblAutores.getRowCount() == 0) {
//                // Se as query foram executadas com sucesso,
//                //executa o commit para efetivar as operações
//                PreparedStatement stCommit = null;
//                try {
//                    stCommit = banco.conn.prepareStatement("COMMIT");
//                    stCommit.execute();
//                    stCommit.close();
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
//                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
//                }
////------------------------------------------------------------------------------
//                JOptionPane.showMessageDialog(null, "Registro atualizado"
//                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
//                btnAdicionar.setEnabled(true);
//                btnEditar.setEnabled(false);
//                btnCancelar.setEnabled(false);
//                btnSalvar.setEnabled(false);
//                btnExcluir.setEnabled(false);
//                btnSalvarVariosExemplares.setEnabled(false);
//
//                f.ativarCampos(painel2, false);
//                f.ativarCampos(painel4, false);
//                f.ativarCampos(painel5, false);
//                f.ativarCampos(painel6, false);
//                f.ativarCampos(painel7, false);
//                txtResumo.setEnabled(false);
////                btnTodosActionPerformed(evt);
//
//                f.limparCampos(painel1);
//                f.limparCampos(painel2);
//                f.limparCampos(painel4);
//                f.limparCampos(painel5);
//                f.limparCampos(painel6);
//                f.limparCampos(painel7);
//                cbAutor.setSelectedIndex(-1);
//                cbClasLiteraria.setSelectedIndex(-1);
//                cbEditora.setSelectedIndex(-1);
//                cbEstadodeConservacao.setSelectedIndex(-1);
//                cbGrupo.setSelectedIndex(-1);
//                cbIdioma.setSelectedIndex(-1);
//                btnAddAutor.setEnabled(false);
//                btnExcluiAutor.setEnabled(false);
//                chkStatus.setEnabled(false);
//                //Apaga todos os registros da tabela de exemplares
//                if (tblExemplares2.getRowCount() > 0) {
//                    modelE.removeAllRows();
//                }
//                //Apaga todos os registros da tabela de Autores
//                //Limpa a tabela para preencher novamente
//                if (tblAutores.getRowCount() > 0) {
//                    modelA.removeAllRows();
//                }
//            } else {
//                // Se as query retornaram falha,
//                //executa o rollback para desfazer as operações
//                PreparedStatement stRollback = null;
//                try {
//                    stRollback = banco.conn.prepareStatement("ROLLBACK");
//                    stRollback.close();
//
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
//                            + "Erro comando ROLLBACK \n"
//                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
//                }
//            }
//==============================================================================
            //SE TIVER AUTORES NA LISTA, COMO JÁ FOI DELETADO,
            //APENAS INSERE EM autoresdoitem
            //if (ru > 0 && rdF > 0 && rdF2 > 0 && ri1 > 0) {
            if (ru > 0 && rdF2 > 0) {
            }
            int riAutor = 0;
            PreparedStatement stInsertAutor = null;
            try {
                String sqlInsertA = "INSERT INTO autoresdoitem(codlivro,codautor)VALUES("
                        + "?,?)";
                stInsertAutor = banco.conn.prepareStatement(sqlInsertA);
                //======Verifica se e igual e retorna o codigo
                for (int row = 0; row < tblAutores.getRowCount(); row++) {
                    stInsertAutor.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                    //Pega o código de cada autor no modelo
                    stInsertAutor.setInt(2, Integer.parseInt(modelA.getRow(row, 1).toString()));
                    riAutor = stInsertAutor.executeUpdate();
                }

                stInsertAutor.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela autoresdoitem. \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);

            }
            if (riAutor > 0) {
                // Se as query foram executadas com sucesso,
                //executa o commit para efetivar as operações
                PreparedStatement stCommit = null;
                try {
                    stCommit = banco.conn.prepareStatement("COMMIT");
                    stCommit.execute();
                    stCommit.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro comando COMMIT \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
//------------------------------------------------------------------------------
                JOptionPane.showMessageDialog(null, "Registro atualizado"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel6, false);
                f.ativarCampos(painel7, false);
//                btnTodosActionPerformed(evt);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel6);
                f.limparCampos(painel7);
                txtResumo.setText("");
                cbAutor.setSelectedIndex(-1);
                cbClasLiteraria.setSelectedIndex(-1);
                cbEditora.setSelectedIndex(-1);
                cbEstadodeConservacao.setSelectedIndex(-1);
                cbGrupo.setSelectedIndex(-1);
                cbIdioma.setSelectedIndex(-1);
                btnAddAutor.setEnabled(false);
                btnExcluiAutor.setEnabled(false);
                chkStatus.setEnabled(false);
                //Apaga todos os registros da tabela de exemplares
                if (tblExemplares2.getRowCount() > 0) {
                    modelE.removeAllRows();
                }
                //Apaga todos os registros da tabela de Autores
                //Limpa a tabela para preencher novamente
                if (tblAutores.getRowCount() > 0) {
                    modelA.removeAllRows();
                }
            } else {
                // Se as query retornaram falha,
                //executa o rollback para desfazer as operações
                PreparedStatement stRollback = null;
                try {
                    stRollback = banco.conn.prepareStatement("ROLLBACK");
                    stRollback.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Operação não realizada! "
                            + "Erro comando ROLLBACK \n"
                            + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            }
//            }
        }

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (txtCodigo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nenhum registro a ser excluído !",
                    "Aviso", JOptionPane.WARNING_MESSAGE);
            txtTitulo.requestFocus();
        } //Insert
        else {
            //cria um objeto DB apontando para o banco especificado.
            banco = new DB();
            //conecta ao banco
            banco.connect();
            //Variavel para verificar se foi executado o comando
            int rd = 0;
            //Insere usando formatacao JAVA
            PreparedStatement st1 = null;
            String sqlInsert = "DELETE FROM cadlivros WHERE codigo=? ";
            try {
                st1 = banco.conn.prepareStatement(sqlInsert);
                st1.setInt(1, Integer.parseInt(txtCodigo.getText().trim()));
                //st1.setString(2, txtNome.getText().trim());
                rd = st1.executeUpdate();
                st1.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao excluir! \n" + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
//------------------------------------------------------------------------------
            if (rd > 0) {
                JOptionPane.showMessageDialog(null, "Registro excluído"
                        + " com sucesso !", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                btnAdicionar.setEnabled(true);
                btnEditar.setEnabled(false);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnExcluir.setEnabled(false);
                btnSalvarVariosExemplares.setEnabled(false);

                f.ativarCampos(painel2, false);
                f.ativarCampos(painel4, false);
                f.ativarCampos(painel5, false);
                f.ativarCampos(painel6, false);
                f.ativarCampos(painel7, false);
                txtResumo.setEnabled(false);
//                btnTodosActionPerformed(evt);

                f.limparCampos(painel1);
                f.limparCampos(painel2);
                f.limparCampos(painel4);
                f.limparCampos(painel5);
                f.limparCampos(painel6);
                f.limparCampos(painel7);
                cbAutor.setSelectedIndex(-1);
                cbClasLiteraria.setSelectedIndex(-1);
                cbEditora.setSelectedIndex(-1);
                cbEstadodeConservacao.setSelectedIndex(-1);
                cbGrupo.setSelectedIndex(-1);
                cbIdioma.setSelectedIndex(-1);
                btnAddAutor.setEnabled(false);
                btnExcluiAutor.setEnabled(false);
                chkStatus.setEnabled(false);
                //Apaga todos os registros da tabela de exemplares
                if (tblExemplares2.getRowCount() > 0) {
                    modelE.removeAllRows();
                }
                //Apaga todos os registros da tabela de Autores
                //Limpa a tabela para preencher novamente
                if (tblAutores.getRowCount() > 0) {
                    modelA.removeAllRows();
                }
            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAddAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAutorActionPerformed

        if (cbAutor.getSelectedIndex() > -1) {

            dadosA.add(new String[]{
                        cbAutor.getSelectedItem().toString(),
                        String.valueOf(((Autores) cbAutor.getSelectedItem()).getCodigo())
                    });


            boolean[] edicao = {false};
            modelA = new MkTableModel(dadosA, colunasA, edicao);
            tblAutores.setModel(modelA);
            tblAutores.getColumnModel().getColumn(0).setPreferredWidth(350);



        } else {
            JOptionPane.showMessageDialog(null, "Selecione um autor !",
                    "Mensagem", JOptionPane.INFORMATION_MESSAGE);


        } //----------------------VERIFICA SE É IGUAL-----------------------------
        //se tiver 2, remove uma linha
        int t = 0;
        if (tblAutores.getRowCount() > 0) {
            for (int i = 0; i
                    < tblAutores.getRowCount(); i++) {
                if (tblAutores.getValueAt(i, 0).toString().equals(cbAutor.getModel().getSelectedItem().toString())) {
                    t++;
                }
                if (t == 2) {
                    modelA.removeRow(i);
                    JOptionPane.showMessageDialog(null, "Este autor já foi adicionado"
                            + " à lista!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);


                }
            }
        }
        tblAutores.getTableHeader().setReorderingAllowed(false);
    }//GEN-LAST:event_btnAddAutorActionPerformed
    private void btnExcluiAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluiAutorActionPerformed
        int row = tblAutores.getSelectedRow();


        if (row > -1) {
            tblAutores.getColumnModel().getColumn(0).setPreferredWidth(350);
            // Excluir a linha selecionada
            MkTableModel model = (MkTableModel) tblAutores.getModel();
            model.removeRow(row);


        }
    }//GEN-LAST:event_btnExcluiAutorActionPerformed

    private void btnSalvarVariosExemplaresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarVariosExemplaresActionPerformed

//------------------------PEGA A QTD DIGITADA-----------------------------------
        int qtd = 0;
        try {
            //Mostra uma caixa de entrada para digitar a qtd de exemplares
            qtd = Integer.parseInt(JOptionPane.showInputDialog("Digite a "
                    + "quantidade de exemplares iguais", JOptionPane.INFORMATION_MESSAGE));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Digite a quantidade de exemplares."
                    + "", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
//==============================================================================
        //Pega o valor máximo da tabela detalhesdolivro
        //Pega o número do último código do exemplar
        int maxL = 0;
        if (tblExemplares2.getRowCount() > 0) {
            maxL = Integer.parseInt(tblExemplares2.getValueAt(tblExemplares2.getRowCount() - 1, 0).toString()) + 1;
        } else {

            //Pega o valor máximo da tabela detalhesdolivro
            //int maxL = 0;
            banco = new DB();
            banco.connect();
            Query cMaxL = new Query(banco.conn);
            cMaxL.open("SELECT MAX(iddetalhesdolivro)AS codigo "
                    + "FROM detalhesdolivro");
            cMaxL.next();
            try {
                maxL = cMaxL.rs.getInt("codigo") + 1;
                cMaxL.rs.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao pegar valor máximo de"
                        + " detalhes do livro! \n"
                        + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }
            banco.disconnect();
        }
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
        String status;
        if (novoCadastro == true) {
            // && tblExemplares2.getRowCount() == 0
            if (cbEstadodeConservacao.getModel().getSelectedItem() != null && novoCadastro == true) {
                //Pega o número do último exemplar
                int maxExemplar = 0;

                if (tblExemplares2.getRowCount() > 0) {
                    maxExemplar = Integer.parseInt(tblExemplares2.getValueAt(tblExemplares2.getRowCount() - 1, 1).toString()) + 1;
                } else {
                    maxExemplar++;
                }

                for (int j = 1; j <= qtd; j++) {
                    //Verifica a jCheckBox
                    if (chkStatus.isSelected() == true) {
                        //Não emprestar
                        status = "NÃO EMPRESTAR";
                    } else {
                        status = "EMPRESTAR";
                    }
                    dadosE.add(new String[]{
                                //Código máximo do exemplar
                                String.valueOf(maxL++),
                                //Valor máximo do exemplar
                                String.valueOf(maxExemplar++),
                                cbEstadodeConservacao.getSelectedItem().toString(),
                                status,
                                //Seta como disponível
                                "DISPONÍVEL",
                                //Pega o código na combo
                                String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo())
                            });
                    boolean[] edicao = {false, false, false, false};
                    modelE = new MkTableModel(dadosE, colunasE, edicao);
                    tblExemplares2.setModel(modelE);
                    tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
                    tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(100);
                    tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(250);
                    tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
                    tblExemplares2.getColumnModel().getColumn(4).setPreferredWidth(120);
                }
            } else {
                //Desativa o botão
                //btnSalvarVariosExemplares.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Selecione o Estado de "
                        + "Conservação e o status ! ",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (novoCadastro == false) {
            //Pega o número do último exemplar
            int maxExemplar = 0;

            if (tblExemplares2.getRowCount() > 0) {
                maxExemplar = Integer.parseInt(tblExemplares2.getValueAt(tblExemplares2.getRowCount() - 1, 1).toString()) + 1;
            } else {
                maxExemplar++;
            }

            //Verifica a jCheckBox(feita somente 1 vez)
            if (chkStatus.isSelected() == true) {
                //Não emprestar
                status = "NÃO EMPRESTAR";
            } else {
                status = "EMPRESTAR";
            }
            for (int j = 1; j <= qtd; j++) {
                //Insere na tabela filho (detalhesdolivro)
                PreparedStatement st2 = null;
                String sqlInsert2 = "INSERT INTO detalhesdolivro"
                        + "(exemplar,estadodolivro_id,status,"
                        + "disponibilidade,cadlivros_id) "
                        + "VALUES(?,?,?,?,?)";
                //código máximo +1
                //maxL = maxL + 1;
                int r = 0;
                try {
                    st2 = banco.conn.prepareStatement(sqlInsert2);
                    for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
                        //Código automático
                        //st2.setInt(1, maxL++);
                        //Número do exemplar
                        st2.setInt(1, maxExemplar++);
                        //codigo do estado de conservação do exemplar
                        st2.setInt(2, ((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo());
                        //Status (Emprestar ou não)
                        if (chkStatus.isSelected() == false) {
                            st2.setString(3, "F");
                        } else {
                            st2.setString(3, "V");
                        }
                        //Disponibilidade
                        st2.setString(4, "D");
                        st2.setInt(5, Integer.parseInt(txtCodigo.getText().trim()));

                        r = st2.executeUpdate();
                    }
                    st2.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela"
                            + " detalhesdolivro! \n " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }

                dadosE.add(new String[]{
                            //Código máximo do exemplar
                            //String.valueOf(maxL++),
                            //Valor máximo do exemplar
                            String.valueOf(maxExemplar++),
                            cbEstadodeConservacao.getSelectedItem().toString(),
                            status,
                            //Seta como disponível
                            "DISPONÍVEL",
                            //Pega o código na combo
                            String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo())
                        });
                boolean[] edicao = {false, false, false, false};
                modelE = new MkTableModel(dadosE, colunasE, edicao);
                tblExemplares2.setModel(modelE);
                tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
                tblExemplares2.getColumnModel().getColumn(4).setPreferredWidth(120);
            }
        }
        //-----------------------------------------------------------------------
        //----------------------VERIFICA SE É IGUAL-----------------------------
        //se tiver 2, remove uma linha
        int t = 0;
        int a;
        for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
            for (a = 1; a <= qtd; a++) {
                if (Integer.parseInt(tblExemplares2.getValueAt(i, 0).toString()) == a) {
                    t++;
                }
            }

//            if (t == 2) {
//                modelE.removeRow(i);
////                JOptionPane.showMessageDialog(null, "Este número do exemplar já "
////                        + "foi adicionado !",
////                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
//            }
        }
    }//GEN-LAST:event_btnSalvarVariosExemplaresActionPerformed

    private void btnCancelarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarConsultaActionPerformed
        //txtCodigo.setText("");
        //Volta para a tab principal
        jTabbedPane1.setSelectedIndex(0);
}//GEN-LAST:event_btnCancelarConsultaActionPerformed

    private void txtConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConsultaKeyReleased

        //Código, Título, Classificação Literária, Grupo, Editora
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código
                newFilter(0, txtConsulta.getText());
                break;
            case 1:
                //Título
                newFilter(3, txtConsulta.getText());
                break;
            case 2:
                //Clas.Literária
                newFilter(4, txtConsulta.getText());
                break;
            case 3:
                //Grupo
                newFilter(5, txtConsulta.getText());
                break;
            case 4:
                //Editora
                newFilter(6, txtConsulta.getText());
                break;
        }
    }//GEN-LAST:event_txtConsultaKeyReleased

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        //
        long time = System.currentTimeMillis();
//------------------------------------------------------------------------------
        if (tblExemplares.getRowCount() > 0) {
            modelExemplares.removeAllRows();
        }
//------------------------------------------------------------------------------

        dados = new ArrayList();
        banco = new DB();
        banco.connect();
        q = new Query(banco.conn);
        String sql = "SELECT c.codigo,c.data_2,c.hora,"
                + "cl.clasliteraria,e.editora,g.grupo,c.titulo,c.subtitulo,"
                + "c.edicao,c.volume,c.datapublic,c.mes,c.ano,c.npaginas,c.local_2,"
                + "i.idioma,c.cdd,c.cutter,c.cdu,c.tombo,c.resumo,c.isbn,c.cdc"
                + " FROM cadlivros c,cadclasliteraria cl,cadeditoras e,"
                + "cadgrupos g,cadidiomas i"
                + " WHERE"
                + " c.codclas_literaria=cl.codigo AND"
                + " c.codeditora=e.codigo AND"
                + " c.codgrupo=g.codigo AND"
                + " c.codidioma=i.codigo"
                + " ORDER BY c.titulo ASC;";
        q.open(sql);

        String codigo, data_2, hora, titulo, clasliteraria, grupo, editora,
                subtitulo, edicao, volume, datapublic = null, mes, ano, npaginas,
                local_2, idioma, cdd, cutter, cdu, tombo, resumo, isbn, cdc;
        //Inicializa as variáveis para conversão
        java.sql.Date data_2JDBC = null;

        java.sql.Date datapublicJDBC = null;
        java.util.Date h;
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat fh = new SimpleDateFormat("HH:mm:ss");
        try {
            while (q.next()) {
                codigo = q.fieldbyname("codigo");
                data_2 = q.fieldbyname("data_2");
                hora = q.fieldbyname("hora");
                titulo = q.fieldbyname("titulo");
                clasliteraria = q.fieldbyname("clasliteraria");
                grupo = q.fieldbyname("grupo");
                editora = q.fieldbyname("editora");
                subtitulo = q.fieldbyname("subtitulo");
                edicao = q.fieldbyname("edicao");
                volume = q.fieldbyname("volume");
                datapublicJDBC = q.rs.getDate("datapublic");
                mes = q.fieldbyname("mes");
                ano = q.fieldbyname("ano");
                npaginas = q.fieldbyname("npaginas");
                local_2 = q.fieldbyname("local_2");
                idioma = q.fieldbyname("idioma");
                cdd = q.fieldbyname("cdd");
                cutter = q.fieldbyname("cutter");
                cdu = q.fieldbyname("cdu");
                tombo = q.fieldbyname("tombo");
                resumo = q.fieldbyname("resumo");
                isbn = q.fieldbyname("isbn");
                cdc = q.fieldbyname("cdc");

                //Converte as datas e hora
                data_2JDBC = java.sql.Date.valueOf(data_2);
                data_2 = df.format(data_2JDBC);

                //Formata a hora
                try {
                    h = fh.parse(hora);
                    hora = fh.format(h);
                } catch (ParseException e) {
                    e.printStackTrace();
                }

                if (datapublicJDBC != null) {
                    datapublic = df.format(datapublicJDBC);
                }
//                    else {
//                    datapublic = "";
//                }
                dados.add(new String[]{
                            data_2, hora, titulo, clasliteraria, grupo, editora,
                            local_2, subtitulo, edicao, volume, datapublic, mes,
                            ano, npaginas, idioma, cdd, cutter, cdu, tombo, resumo,
                            isbn, cdc, codigo
                        });

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar em livros \n"
                    + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
        banco.disconnect();

        boolean[] edicao1 = {false, false, false, false, false, false, false};
        modelObra = new MkTableModel(dados, colunas, edicao1);
        tblObras.setModel(modelObra);
        sorter = new TableRowSorter<MkTableModel>(modelObra) {

            @Override
            public boolean isSortable(int column) {
                return false;
            }
        };
        tblObras.setRowSorter(sorter);

        //"Codigo", "Data" ,"Hora", "Título", "Classificação Literária",
        //"Grupo", "Editora", "Local", "Subtítulo", "Edição", "Volume", "Dt.Public."
        //"Mês","Ano","Pág.","Idioma","CDD","Cutter","CDU","Tombo","Resumo"
//------------------------------------------------------------------------------
        //REDIMENSIONA AS COLUNAS COM BASE NO TAMANHO MÁXIMO DE CADA CÉLULA
        //AQUI REDIMENSIONA SOMENTE A TERCEIRA
        int maxWidth0 = 0;
        int maxWidth1 = 0;
        int maxWidth2 = 0;
        int maxWidth3 = 0;
        int maxWidth4 = 0;
        int maxWidth5 = 0;
        int maxWidth6 = 0;
//        int maxWidth7 = 0;
        for (int i = 0; i < tblObras.getRowCount(); i++) {
            Object cellValue0 = tblObras.getValueAt(i, 0);
            Object cellValue1 = tblObras.getValueAt(i, 1);
            Object cellValue2 = tblObras.getValueAt(i, 2);
            Object cellValue3 = tblObras.getValueAt(i, 3);
            Object cellValue4 = tblObras.getValueAt(i, 4);
            Object cellValue5 = tblObras.getValueAt(i, 5);
            Object cellValue6 = tblObras.getValueAt(i, 6);
//            Object cellValue7 = tblObras.getValueAt(i, 7);

            if (cellValue0 != null) {
                maxWidth0 = Math.max(tblObras.getCellRenderer(i, 0).
                        getTableCellRendererComponent(tblObras, cellValue0, false, false, i, 0).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth0);
            }
            if (cellValue1 != null) {
                maxWidth1 = Math.max(tblObras.getCellRenderer(i, 1).
                        getTableCellRendererComponent(tblObras, cellValue1, false, false, i, 1).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth1);
            }
            if (cellValue2 != null) {
                maxWidth2 = Math.max(tblObras.getCellRenderer(i, 2).
                        getTableCellRendererComponent(tblObras, cellValue2, false, false, i, 2).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth2);
            }
            if (cellValue3 != null) {
                maxWidth3 = Math.max(tblObras.getCellRenderer(i, 3).
                        getTableCellRendererComponent(tblObras, cellValue3, false, false, i, 3).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth3);
            }
            if (cellValue4 != null) {
                maxWidth4 = Math.max(tblObras.getCellRenderer(i, 4).
                        getTableCellRendererComponent(tblObras, cellValue4, false, false, i, 4).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth4);
            }
            if (cellValue5 != null) {
                maxWidth5 = Math.max(tblObras.getCellRenderer(i, 5).
                        getTableCellRendererComponent(tblObras, cellValue5, false, false, i, 5).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth5);
            }
            if (cellValue6 != null) {
                maxWidth6 = Math.max(tblObras.getCellRenderer(i, 6).
                        getTableCellRendererComponent(tblObras, cellValue6, false, false, i, 6).
                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth6);
            }
//            if (cellValue7 != null) {
//                maxWidth7 = Math.max(tblObras.getCellRenderer(i, 7).
//                        getTableCellRendererComponent(tblObras, cellValue7, false, false, i, 7).
//                        getPreferredSize().width + tblObras.getIntercellSpacing().width, maxWidth7);
//            }
        }
//------------------------------------------------------------------------------
        tblObras.getColumnModel().getColumn(0).setPreferredWidth(maxWidth0);
        tblObras.getColumnModel().getColumn(1).setPreferredWidth(maxWidth1);
        tblObras.getColumnModel().getColumn(2).setPreferredWidth(maxWidth2);
        tblObras.getColumnModel().getColumn(3).setPreferredWidth(maxWidth3);
        tblObras.getColumnModel().getColumn(4).setPreferredWidth(maxWidth4);
        tblObras.getColumnModel().getColumn(5).setPreferredWidth(maxWidth5);
        //tblObras.getColumnModel().getColumn(6).setPreferredWidth(maxWidth6);
        //Local
        tblObras.getColumnModel().getColumn(6).setPreferredWidth(maxWidth6);
        tblExemplares.getTableHeader().setReorderingAllowed(false);
        tblExemplares2.getTableHeader().setReorderingAllowed(false);
        tblAutores.getTableHeader().setReorderingAllowed(false);
        time = System.currentTimeMillis() - time;  // ms
        tblObras.getTableHeader().setReorderingAllowed(false);
        tblObras.getColumnModel().setColumnSelectionAllowed(false);
        if (tblObras.getRowCount() == 0) {
            lblMensagem.setText("Nenhuma obra encontrada !");
        } else if (tblObras.getRowCount() == 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obra encontrada !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        } else if (tblObras.getRowCount() > 1) {
            lblMensagem.setText(tblObras.getRowCount() + " obras encontradas !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
}//GEN-LAST:event_btnTodosActionPerformed
    private void btnSelecionaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionaRegistroActionPerformed
        if (tblObras.isRowSelected(tblObras.getSelectedRow())) {
            //pego o item da posição 0 mesmo que o usuário altere a posição das colunas em tempo de execução
//int pegarId = (Integer)tblObras.getValueAt(tblObras.getSelectedRow(), tblObras.convertColumnIndexToView(tblObras.getSelectedRow()));
            novoCadastro = false;
            String[] coluna = (String[]) modelObra.getLinhas().get(tblObras.getSelectedRow());
//          String[] coluna = (String[]) modelObra.getLinhas().get(pegarId);
            //Volta para a tab principal
            jTabbedPane1.setSelectedIndex(0);
//          int row=tblObras.getSelectedRow()+1;
            //mostra os dados
//        codigo,data_2, hora, titulo, clasliteraria, grupo, editora,
//        local_2, subtitulo, edicao, volume, datapublic, mes,
//        ano, npaginas, idioma, cdd, cutter, cdu, tombo, resumo

            txtData.setText(coluna[0]);
            txtHora.setText(coluna[1]);
            txtTitulo.setText(coluna[2]);
            //Verificações
            for (ClassificacoesLiterarias c : new ClassificacoesLiterarias().carregar()) {
                if (c.getClasliterarias().equals(coluna[3])) {
                    cbClasLiteraria.getModel().setSelectedItem(c);
                }
            }
            for (Grupos g : new Grupos().carregar()) {
                if (g.getGrupo().equals(coluna[4])) {
                    cbGrupo.getModel().setSelectedItem(g);
                }
            }
            for (Editoras e : new Editoras().carregar()) {
                if (e.getEditora().equals(coluna[5])) {
                    cbEditora.getModel().setSelectedItem(e);
                }
            }
            txtLocal.setText(coluna[6]);
            txtSubtitulo.setText(coluna[7]);
            txtEdicao.setText(coluna[8]);
            txtVolume.setText(coluna[9]);
            txtDataPublicacao.setText(coluna[10]);
            txtMes.setText(coluna[11]);
            txtAno.setText(coluna[12]);
            txtNPag.setText(coluna[13]);
            for (Idiomas i : new Idiomas().carregar()) {
                if (i.getIdioma().equals(coluna[14])) {
                    cbIdioma.getModel().setSelectedItem(i);
                }
            }
            txtCDD.setText(coluna[15]);
            txtCutter.setText(coluna[16]);
            txtCDU.setText(coluna[17]);
            txtTombo.setText(coluna[18]);
            txtResumo.setText(coluna[19]);
            txtISBN.setText(coluna[20]);
            txtCDC.setText(coluna[21]);
            txtCodigo.setText(new java.text.DecimalFormat("0000000000").format(new java.lang.Double(coluna[22])));

//------------------------------------------------------------------------------
            //Mostra os exemplares da Obra
            if (tblExemplares2.getRowCount() > 0) {
                modelE.removeAllRows();
            }

            if (tblExemplares.getRowCount() > 0) {
                for (int j = 0; j < tblExemplares.getRowCount(); j++) {
                    dadosE.add(new String[]{
                                String.valueOf(tblExemplares.getValueAt(j, 0)),
                                String.valueOf(tblExemplares.getValueAt(j, 1)),
                                String.valueOf(tblExemplares.getValueAt(j, 2)),
                                String.valueOf(tblExemplares.getValueAt(j, 3)),
                                String.valueOf(modelExemplares.getValueAt(j, 4)),
                                //código do exemplar
                                String.valueOf(modelExemplares.getValueAt(j, 5))
                            });
                    boolean[] edicao = {false, false, false, false};
                    modelE = new MkTableModel(dadosE, colunasE, edicao);
                    tblExemplares2.setModel(modelE);
                    tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
                    tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(100);
                    tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(250);
                    tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
                    tblExemplares2.getColumnModel().getColumn(4).setPreferredWidth(120);
                }
            }
//------------------------------------------------------------------------------
            //MOSTRA OS AUTORES DA OBRA
            //Remove se tiver autores para poder preencher novamente com os autores
            //da consulta
            if (tblAutores.getRowCount() > 0) {
                modelA.removeAllRows();
            }
            //Agora preenche (primeiro tem que pegar os dados no banco)
            //if (tblObras.getRowCount() > 0) {
            banco = new DB();
            banco.connect();
            Query q2 = new Query(banco.conn);
            q2.open("SELECT a.codautor,ca.autor "
                    + "FROM autoresdoitem a,cadautores ca,cadlivros cl "
                    + "WHERE a.codlivro=cl.codigo "
                    + "AND a.codautor=ca.codigo "
                    + "AND cl.codigo=" + coluna[22]);
            String c, aut;
            try {
                while (q2.next()) {

                    c = q2.fieldbyname("codautor");
                    aut = q2.fieldbyname("autor");


                    dadosA.add(new String[]{
                                aut,
                                c
                            });
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao mostrar os autores do item!\n"
                        + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            }
            boolean[] edicao = {false};
            modelA = new MkTableModel(dadosA, colunasA, edicao);
            tblAutores.setModel(modelA);
            tblAutores.getColumnModel().getColumn(0).setPreferredWidth(350);
            banco.disconnect();
            //}

            f.ativarCampos(painel2, false);
            //Habilita somente os exemplares para UPDATE            
            f.ativarCampos(painel4, true);
            btnSalvarVariosExemplares.setEnabled(true);

            f.ativarCampos(painel5, false);
            f.ativarCampos(painel6, false);
            f.ativarCampos(painel7, false);
            btnEditar.setEnabled(true);
            btnCancelar.setEnabled(false);
            btnSalvar.setEnabled(false);
            btnExcluir.setEnabled(true);

            cbFiltro.setSelectedIndex(0);
            btnAddAutor.setEnabled(false);
            btnExcluirExemplar.setEnabled(false);
            chkStatus.setEnabled(false);
            btnExcluirExemplar.setEnabled(true);
        }
}//GEN-LAST:event_btnSelecionaRegistroActionPerformed

    private void btnConsultaAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaAutorActionPerformed

        jdfrmConsultaAutores ca = new jdfrmConsultaAutores(null, closable);
//        this.getDesktopPane().add(ca);
        ca.setVisible(true);
        ca.toFront();
//        abrirTela(ca.getClass());
        if (ca.okSelecionado == true) {
            //cbAutor.setSelectedItem(ca.getNome());
            //Faz um LOOP e seleciona o valor
            for (Autores a : new Autores().carregar()) {
                if (a.getAutor().equals(ca.getNome())) {
                    cbAutor.getModel().setSelectedItem(a);
                }
            }
            ca.setVisible(false);
            ca.dispose();
        }

///----------------------




    }//GEN-LAST:event_btnConsultaAutorActionPerformed

    private void btnConsultaClasLiterariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaClasLiterariaActionPerformed
        jdfrmConsultaClasLiteraria cl = new jdfrmConsultaClasLiteraria(null, closable);
//        this.getDesktopPane().add(ca);
        cl.setVisible(true);
        cl.toFront();
//        abrirTela(ca.getClass());
        if (cl.okSelecionado == true) {
            //cbClasLiteraria.setSelectedItem(cl.getNome());
            for (ClassificacoesLiterarias c : new ClassificacoesLiterarias().carregar()) {
                if (c.getClasliterarias().equals(cl.getNome())) {
                    cbClasLiteraria.getModel().setSelectedItem(c);
                }
            }
            cl.setVisible(false);
            cl.dispose();
        }
    }//GEN-LAST:event_btnConsultaClasLiterariaActionPerformed

    private void btnConsultaEditoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaEditoraActionPerformed
        jdfrmConsultaEditora ce = new jdfrmConsultaEditora(null, closable);
//        this.getDesktopPane().add(ca);
        ce.setVisible(true);
        ce.toFront();
//        abrirTela(ca.getClass());
        if (ce.okSelecionado == true) {
            //cbEditora.setSelectedItem(e.getNome());
            for (Editoras e : new Editoras().carregar()) {
                if (e.getEditora().equals(ce.getNome())) {
                    cbEditora.getModel().setSelectedItem(e);
                }
            }
            ce.setVisible(false);
            ce.dispose();
        }
    }//GEN-LAST:event_btnConsultaEditoraActionPerformed

    private void btnConsultaGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaGrupoActionPerformed
        jdfrmConsultaGrupo cg = new jdfrmConsultaGrupo(null, closable);
//        this.getDesktopPane().add(ca);
        cg.setVisible(true);
        cg.toFront();
//        abrirTela(ca.getClass());
        if (cg.okSelecionado == true) {
            // cbGrupo.setSelectedItem(cg.getNome());
            for (Grupos g : new Grupos().carregar()) {
                if (g.getGrupo().equals(cg.getNome())) {
                    cbGrupo.getModel().setSelectedItem(g);
                }
            }
            cg.setVisible(false);
            cg.dispose();
        }

    }//GEN-LAST:event_btnConsultaGrupoActionPerformed

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        switch (cbFiltro.getSelectedIndex()) {
            case 0:
                //Código
                txtConsulta.setDocument(new DocSomenteNumeros());
                break;
            case 1:
                //Título
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 2:
                //Clas. Literária
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 3:
                //Grupo
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
            case 4:
                //Editora
                txtConsulta.setDocument(new FixedLengthDocument(100));
                break;
        }
    }//GEN-LAST:event_cbFiltroActionPerformed

    private void btnAddExemplarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddExemplarActionPerformed

//==============================================================================
        //Pega o número do último código do exemplar
        int maxL = 0;
//            if(tblExemplares2.getRowCount()>0){
//            maxL=Integer.parseInt(tblExemplares2.getValueAt(tblExemplares2.getRowCount()-1, 0).toString())+1;
//            }else{

        //Pega o valor máximo da tabela detalhesdolivro
        //int maxL = 0;
//            banco=new DB();
//            banco.connect();
//            Query cMaxL = new Query(banco.conn);
//            cMaxL.open("SELECT MAX(iddetalhesdolivro)AS codigo "
//                    + "FROM detalhesdolivro");
//            cMaxL.next();
//            try {
//                maxL = cMaxL.rs.getInt("codigo")+1;
//                cMaxL.rs.close();
//            } catch (Exception e) {
//                JOptionPane.showMessageDialog(null, "Erro ao pegar valor máximo de" +
//                        " detalhes do livro! \n"
//                        + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
//            }
//            banco.disconnect();
//            }
//------------------------------------------------------------------------------
//VERIFICA SE É UM NOVO CADASTRO E SOMENTE ADICIONA NA LISTA
        String status;
        int ri = 0;
        int iddetalhesdolivro=0;
        if (novoCadastro == true) {
            if (!txtExemplar.getText().trim().equals("")
                    && cbEstadodeConservacao.getModel().getSelectedItem() != null) {
                //Verifica a jCheckBox
                if (chkStatus.isSelected() == true) {
                    //Não emprestar
                    status = "NÃO EMPRESTAR";
                } else {
                    status = "EMPRESTAR";
                }
                dadosE.add(new String[]{
                            //Código do exemplar
                            "0000000000",
                            txtExemplar.getText().trim(),
                            cbEstadodeConservacao.getSelectedItem().toString(),
                            status,
                            //Seta como disponível
                            "DISPONÍVEL",
                            //Pega o código na combo
                            String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo())
                        });
                boolean[] edicao = {false, false, false, false, false};
                modelE = new MkTableModel(dadosE, colunasE, edicao);
                tblExemplares2.setModel(modelE);
                tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
                tblExemplares2.getColumnModel().getColumn(4).setPreferredWidth(120);

        //----------------------VERIFICA SE É IGUAL-----------------------------
        //se tiver 2, remove uma
        boolean igual2=false;
        int t = 0;
        for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
            if (Integer.parseInt(tblExemplares2.getValueAt(i, 1).toString()) == Integer.parseInt(txtExemplar.getText().trim())) {
                t++;
            }
            if (t == 2) {
                modelE.removeRow(i);
                JOptionPane.showMessageDialog(null, "Este número do exemplar já "
                        + "foi adicionado !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                igual2=true;
            }else{
            igual2=false;
            }
        }
        //----------------------------------------------------------------------
            } else {
                JOptionPane.showMessageDialog(null, "Preencha os campos Exemplar,"
                        + "Selecione o Estado de Conservação e selecione o status !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
        } //ADICIONA DIRETO NO BD E DEPOIS ADICIONA NA LISTA
        else {
            if (!txtExemplar.getText().trim().equals("")
                    && cbEstadodeConservacao.getModel().getSelectedItem() != null) {

                //Adiciona na lista agora
                    //Verifica a jCheckBox
                if (chkStatus.isSelected() == true) {
                    //Não emprestar
                    status = "NÃO EMPRESTAR";
                } else {
                    status = "EMPRESTAR";
                }
                dadosE.add(new String[]{
                            //Código do exemplar
                            new java.text.DecimalFormat("0000000000").format(new java.lang.Double(String.valueOf(iddetalhesdolivro))),
                            txtExemplar.getText().trim(),
                            cbEstadodeConservacao.getSelectedItem().toString(),
                            status,
                            //Seta como disponível
                            "DISPONÍVEL",
                            //Pega o código na combo
                            String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo())
                        });
                boolean[] edicao = {false, false, false, false, false};
                modelE = new MkTableModel(dadosE, colunasE, edicao);
                tblExemplares2.setModel(modelE);
                tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(100);
                tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
                tblExemplares2.getColumnModel().getColumn(4).setPreferredWidth(120);
          //--------------------------------------------------------------------
                boolean igual=false;
         //----------------------VERIFICA SE É IGUAL----------------------------
        //se tiver 2, remove uma linha
        int t = 0;
        for (int i = 0; i < tblExemplares2.getRowCount(); i++) {
            if (Integer.parseInt(tblExemplares2.getValueAt(i, 1).toString()) == Integer.parseInt(txtExemplar.getText().trim())) {
                t++;
            }
            if (t == 2) {
                modelE.removeRow(i);
                JOptionPane.showMessageDialog(null, "Este número do exemplar já "
                        + "foi adicionado !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                igual=true;
            }else{
            igual=false;
            }
        }
        //----------------------------------------------------------------------

                if(igual==false){
                 banco= new DB();
                 banco.connect();
                //Insere na tabela filho (detalhesdolivro)
                PreparedStatement st2 = null;
                String sqlInsert2 = "INSERT INTO detalhesdolivro"
                        + "(exemplar,estadodolivro_id,status,"
                        + "disponibilidade,cadlivros_id) "
                        + "VALUES(?,?,?,?,?) returning iddetalhesdolivro";
                //código máximo +1
                //maxL = maxL + 1;
                try {
                    st2 = banco.conn.prepareStatement(sqlInsert2);

                    //Código automático
                    //st2.setInt(1, maxL++);
                    //Número do exemplar
                    st2.setInt(1, Integer.parseInt(txtExemplar.getText().trim()));
                    //codigo do estado de conservação do exemplar
                    st2.setInt(2, ((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo());
                    //Status F(Emprestar)
                    if (chkStatus.isSelected() == false) {
                        st2.setString(3, "F");
                    } //V(Não Emprestar)
                    else {
                        st2.setString(3, "V");
                    }
                    //Disponibilidade
                    st2.setString(4, "D");
                    st2.setInt(5, Integer.parseInt(txtCodigo.getText().trim()));
                    
                    ResultSet rs= st2.executeQuery();
                    if(rs.next()){
                    iddetalhesdolivro=rs.getInt("iddetalhesdolivro");
                    }
                    st2.close();
                    ri=1;
                    banco.disconnect();
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro ao adicionar na tabela"
                            + " detalhesdolivro! \n " + e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
                }
            } 
        if(ri>0){
                JOptionPane.showMessageDialog(null, "Exemplar adicionado com sucesso !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
            }
            else {
                JOptionPane.showMessageDialog(null, "Preencha os campos Exemplar,"
                        + "Selecione o Estado de Conservação e selecione o status !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
        
        tblExemplares2.getTableHeader().setReorderingAllowed(false);
    }//GEN-LAST:event_btnAddExemplarActionPerformed

    private void btnExcluirExemplarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirExemplarActionPerformed
        int row = tblExemplares2.getSelectedRow();
        if (row > -1 && novoCadastro == true) {
            tblExemplares2.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblExemplares2.getColumnModel().getColumn(1).setPreferredWidth(250);
            tblExemplares2.getColumnModel().getColumn(2).setPreferredWidth(120);
            tblExemplares2.getColumnModel().getColumn(3).setPreferredWidth(120);
            // Excluir a linha selecionada
            MkTableModel model = (MkTableModel) tblExemplares2.getModel();
            model.removeRow(row);
        } //Se for apenas edição, exclui do banco
        else if (row > -1 && novoCadastro == false) {

            DB banco2 = new DB();
            banco2.connect();
            PreparedStatement st = null;
            int resultado = 0;
            int codigo = Integer.parseInt(tblExemplares2.getValueAt(row, 0).toString());
            String SQLDel = "DELETE FROM detalhesdolivro WHERE iddetalhesdolivro=?";
            try {
                st = banco2.conn.prepareStatement(SQLDel);
                st.setInt(1, codigo);
                resultado = st.executeUpdate();
                st.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao deletar registro do banco!\n" + e.getMessage());
            }
            if (resultado > 0) {
                // Excluir a linha selecionada
                MkTableModel model = (MkTableModel) tblExemplares2.getModel();
                model.removeRow(row);
            }

        }
    }//GEN-LAST:event_btnExcluirExemplarActionPerformed

    private void txtDataPublicacaoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataPublicacaoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDataPublicacaoKeyTyped

    private void txtMesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMesKeyTyped

    private void txtAnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAnoKeyTyped

    private void txtNPagKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNPagKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNPagKeyTyped

    private void txtExemplarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExemplarKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtExemplarKeyTyped

    private void btnAlterarExemplarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarExemplarActionPerformed
        String status;
        int resultado = 0;
        if (novoCadastro == false) {
            if (!txtExemplar.getText().trim().equals("")
                    && cbEstadodeConservacao.getModel().getSelectedItem() != null && tblExemplares2.isRowSelected(tblExemplares2.getSelectedRow())) {

                //-----------UPDATE-------------------------------------------------------------
                //Atualiza o registro no BD
                String status2 = null;
                banco = new DB();
                banco.connect();
                PreparedStatement st = null;
                String SQLupdate = "UPDATE detalhesdolivro SET exemplar=?,estadodolivro_id=?,"
                        + "status=? WHERE iddetalhesdolivro=?";
                try {
                    st = banco.conn.prepareStatement(SQLupdate);
                    st.setInt(1, Integer.parseInt(txtExemplar.getText().trim()));
                    st.setInt(2, ((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo());
                    //Verifica o checkbox
                    if (chkStatus.isSelected() == true) {
                        status2 = "V";
                    } else {
                        status2 = "F";
                    }
                    st.setString(3, status2);
                    st.setInt(4, Integer.parseInt(tblExemplares2.getValueAt(tblExemplares2.getSelectedRow(), 0).toString()));
                    resultado = st.executeUpdate();
                    st.close();
                    //-------------------------------------------------------
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar no BD.\n"
                            + "Contate o suporte para resolver o problema.\n" + ex.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
                }
                banco.disconnect();

            } else {
                JOptionPane.showMessageDialog(null, "Preencha os campos Exemplar,"
                        + "Selecione o Estado de Conservação e selecione o status !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }

            if (resultado > 0) {
                //Adiciona na tabela
//----------//Verifica a jCheckBox--------------------------------------------
                if (chkStatus.isSelected() == true) {
                    //Não emprestar
                    status = "NÃO EMPRESTAR";
                } else {
                    status = "EMPRESTAR";
                }

                modelE.setValueAt(txtExemplar.getText().trim(), tblExemplares2.getSelectedRow(), 1);
                modelE.setValueAt(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getDescricao(), tblExemplares2.getSelectedRow(), 2);
                modelE.setValueAt(status, tblExemplares2.getSelectedRow(), 3);
                //CONTINUA COMO DISPONÍVEL A COLUNA 4
                modelE.setValueAt(String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo()), tblExemplares2.getSelectedRow(), 5);

                //Mostra a mensagem
                JOptionPane.showMessageDialog(null, "Exemplar atualizado com sucesso!",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            //----------------------------------------------------------------------

            if (!txtExemplar.getText().trim().equals("")
                    && cbEstadodeConservacao.getModel().getSelectedItem() != null && tblExemplares2.isRowSelected(tblExemplares2.getSelectedRow()) && novoCadastro == true) {
                //Verifica a jCheckBox
                if (chkStatus.isSelected() == true) {
                    //Não emprestar
                    status = "NÃO EMPRESTAR";
                } else {
                    status = "EMPRESTAR";
                }

                modelE.setValueAt(txtExemplar.getText().trim(), tblExemplares2.getSelectedRow(), 1);
                modelE.setValueAt(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getDescricao(), tblExemplares2.getSelectedRow(), 2);
                modelE.setValueAt(status, tblExemplares2.getSelectedRow(), 3);
                //CONTINUA COMO DISPONÍVEL A COLUNA 4
                modelE.setValueAt(String.valueOf(((EstadoDoLivro) cbEstadodeConservacao.getSelectedItem()).getCodigo()), tblExemplares2.getSelectedRow(), 5);
            } else {
                JOptionPane.showMessageDialog(null, "Preencha os campos Exemplar,"
                        + "Selecione o Estado de Conservação e selecione o status !",
                        "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnAlterarExemplarActionPerformed

    private void tblExemplares2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblExemplares2MouseClicked

        txtExemplar.setText(tblExemplares2.getValueAt(tblExemplares2.getSelectedRow(), 1).toString());
        for (EstadoDoLivro e : new EstadoDoLivro().carregar()) {
            if (e.getDescricao().equals(modelE.getValueAt(tblExemplares2.getSelectedRow(), 2).toString())) {
                cbEstadodeConservacao.getModel().setSelectedItem(e);
            }
        }
//        for (EstadoDoLivro estado : new EstadoDoLivro().carregar()) {
//            if (estado.getDescricao().equals(tblExemplares2.getValueAt(tblExemplares2.getSelectedRow(), 1).toString())) {
//                cbEstadodeConservacao.setSelectedItem(estado);
//            }
//        }
        //Verifica a jCheckBox
        if (tblExemplares2.getValueAt(tblExemplares2.getSelectedRow(), 3).toString().equals("NÃO EMPRESTAR")) {
            chkStatus.setSelected(true);
        } else {
            chkStatus.setSelected(false);
        }

    }//GEN-LAST:event_tblExemplares2MouseClicked

    private void tblObrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblObrasMouseClicked
//        
        ExemplaresdaObra();
//        int row = tblObras.getSelectedRow();
        if (evt.getClickCount() == 2) {
            btnSelecionaRegistroActionPerformed(null);
        }

}//GEN-LAST:event_tblObrasMouseClicked

    private void tblObrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblObrasKeyPressed

        ExemplaresdaObra();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            btnSelecionaRegistroActionPerformed(null);
        }
    }//GEN-LAST:event_tblObrasKeyPressed

    private void tblObrasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblObrasKeyReleased
        ExemplaresdaObra();
}//GEN-LAST:event_tblObrasKeyReleased

    private void tblExemplares2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblExemplares2KeyPressed
        tblExemplares2MouseClicked(null);
    }//GEN-LAST:event_tblExemplares2KeyPressed

    private void tblExemplares2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblExemplares2KeyReleased
        tblExemplares2MouseClicked(null);
    }//GEN-LAST:event_tblExemplares2KeyReleased

    private void tblExemplares2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblExemplares2MousePressed
        //tblExemplares2MouseClicked(null);
    }//GEN-LAST:event_tblExemplares2MousePressed

    private void btnRecarregarClasLiterariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarClasLiterariaActionPerformed

        cbClasLiteraria.removeAllItems();
        //Classificaçao Literária
        for (ClassificacoesLiterarias a : new ClassificacoesLiterarias().carregar()) {
            cbClasLiteraria.addItem(a);
        }
        cbClasLiteraria.setSelectedIndex(-1);

    }//GEN-LAST:event_btnRecarregarClasLiterariaActionPerformed

    private void btnRecarregarGrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarGrupoActionPerformed

        cbGrupo.removeAllItems();
        //Grupo
        for (Grupos c : new Grupos().carregar()) {
            cbGrupo.addItem(c);
        }
        cbGrupo.setSelectedIndex(-1);

    }//GEN-LAST:event_btnRecarregarGrupoActionPerformed

    private void btnRecarregarEditoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarEditoraActionPerformed

        cbEditora.removeAllItems();
        //Editora
        for (Editoras b : new Editoras().carregar()) {
            cbEditora.addItem(b);
        }
        cbEditora.setSelectedIndex(-1);

    }//GEN-LAST:event_btnRecarregarEditoraActionPerformed

    private void btnRecarregarIdiomasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarIdiomasActionPerformed

        cbIdioma.removeAllItems();
        //Idioma
        for (Idiomas e : new Idiomas().carregar()) {
            cbIdioma.addItem(e);
        }
        cbIdioma.setSelectedIndex(-1);

    }//GEN-LAST:event_btnRecarregarIdiomasActionPerformed

    private void btnRecarregarAutoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarAutoresActionPerformed
        cbAutor.removeAllItems();

        //Autores
        for (Autores g : new Autores().carregar()) {
            cbAutor.addItem(g);
        }
        cbAutor.setSelectedIndex(-1);
    }//GEN-LAST:event_btnRecarregarAutoresActionPerformed

    private void btnRecarregarEstConservacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecarregarEstConservacaoActionPerformed
        cbEstadodeConservacao.removeAllItems();
        for (EstadoDoLivro e : new EstadoDoLivro().carregar()) {
            cbEstadodeConservacao.addItem(e);
        }
        cbEstadodeConservacao.setSelectedIndex(-1);
    }//GEN-LAST:event_btnRecarregarEstConservacaoActionPerformed

    public void ExemplaresdaObra() {
        long time = System.currentTimeMillis();
//------------------------------------------------------------------------------
        dadosdaObra = new ArrayList();
        banco = new DB();
        banco.connect();
        Query q2 = new Query(banco.conn);
        String sql = "SELECT d.iddetalhesdolivro,d.exemplar,e.descricao,d.status,d.disponibilidade,d.cadlivros_id"
                + " FROM detalhesdolivro d,cadestadodolivro e "
                + " WHERE d.estadodolivro_id=e.codigo"
                + " AND d.cadlivros_id=" + modelObra.getRow(tblObras.getSelectedRow(), 22).toString()
                + " ORDER BY d.cadlivros_id,d.exemplar";
        q2.open(sql);

        String id, exemplar, descricao, status, disponibilidade, cadlivros_id;
        try {
            while (q2.next()) {

                id = q2.fieldbyname("iddetalhesdolivro");
                exemplar = q2.fieldbyname("exemplar");
                descricao = q2.fieldbyname("descricao");
                status = q2.fieldbyname("status");
                disponibilidade = q2.fieldbyname("disponibilidade");
                cadlivros_id = q2.fieldbyname("cadlivros_id");

                //EMPRESTADO EM,RESERVADO RS,RENOVADO RN,LENDO NO LOCAL LL, ou
                //DISPONÍVEL DI
                if (disponibilidade.equals("D")) {
                    disponibilidade = "DISPONÍVEL";
                } else if (disponibilidade.equals("L")) {
                    disponibilidade = "LENDO";
                } else if (disponibilidade.equals("E")) {
                    disponibilidade = "EMPRESTADO";
                } else if (disponibilidade.equals("R")) {
                    disponibilidade = "RESERVADO";
                }
                //STATUS DA OBRA V,F
                if (status.equals("F")) {
                    status = "EMPRESTAR";
                } else if (status.equals("V")) {
                    status = "NÃO EMPRESTAR";
                }
                id = new java.text.DecimalFormat("0000000000").format(new java.lang.Double(id));
                //--------------------------------------------------------------
                dadosdaObra.add(new String[]{
                            id,
                            exemplar,
                            descricao,
                            status,
                            disponibilidade,
                            cadlivros_id
                        });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar em detalhesdolivro \n"
                    + e.getMessage(), "Aviso", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
        banco.disconnect();

        boolean[] edicao1 = {false, false, false, false, false};
        modelExemplares = new MkTableModel(dadosdaObra, colunas2, edicao1);
        tblExemplares.setModel(modelExemplares);
        //codigo,exemplar,estado,status,disponibilidade
        tblExemplares.getColumnModel().getColumn(0).setPreferredWidth(80);
        tblExemplares.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblExemplares.getColumnModel().getColumn(2).setPreferredWidth(150);
        tblExemplares.getColumnModel().getColumn(3).setPreferredWidth(150);
        tblExemplares.getColumnModel().getColumn(4).setPreferredWidth(100);
//------------------------------------------------------------------------------
        tblExemplares.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                this.setHorizontalAlignment(CENTER);
                Object ref = modelExemplares.getValueAt(row, 3);
                if (ref != null && ref.equals("DISPONÍVEL")) {
                    setBackground(new Color(204, 204, 255));
                    setForeground(Color.blue);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 12));

                } else if (ref != null && ref.equals("EMPRESTADO") || ref.equals("LENDO")) {
                    setBackground(new Color(255, 51, 51));
                    setForeground(Color.black);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 14));
                    tblExemplares.setSelectionBackground(Color.cyan);

                } else if (ref != null && ref.equals("RESERVADO")) {
                    setBackground(new Color(255, 255, 102));
                    setForeground(Color.black);
                    tblExemplares.setFont(new Font("Tahoma", Font.BOLD, 12));
                    tblExemplares.setSelectionBackground(Color.cyan);
                }
//                 else {
//                    setBackground(null);
//                    setForeground(Color.black);
//                    setFont(new Font("Tahoma", Font.BOLD, 12));
//                    tblExemplares.setSelectionBackground(Color.PINK);
//
//                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
//------------------------------------------------------------------------------
        time = System.currentTimeMillis() - time;  // ms

        if (tblExemplares.getRowCount() == 0) {
            lblMensagem.setText("Nenhum exemplar encontrado !");
        } else if (tblExemplares.getRowCount() == 1) {
            lblMensagem.setText(tblExemplares.getRowCount() + " exemplar encontrado !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        } else if (tblExemplares.getRowCount() > 1) {
            lblMensagem.setText(tblExemplares.getRowCount() + " exemplares encontrados !"
                    + " Tempo gasto em segundos: " + time / 1000.0 + " s");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAutor;
    private javax.swing.JButton btnAddExemplar;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAlterarExemplar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelarConsulta;
    private javax.swing.JButton btnConsultaAutor;
    private javax.swing.JButton btnConsultaClasLiteraria;
    private javax.swing.JButton btnConsultaEditora;
    private javax.swing.JButton btnConsultaGrupo;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluiAutor;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluirExemplar;
    private javax.swing.JButton btnRecarregarAutores;
    private javax.swing.JButton btnRecarregarClasLiteraria;
    private javax.swing.JButton btnRecarregarEditora;
    private javax.swing.JButton btnRecarregarEstConservacao;
    private javax.swing.JButton btnRecarregarGrupo;
    private javax.swing.JButton btnRecarregarIdiomas;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarVariosExemplares;
    private javax.swing.JButton btnSelecionaRegistro;
    private javax.swing.JButton btnTodos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cbAutor;
    private javax.swing.JComboBox cbClasLiteraria;
    private javax.swing.JComboBox cbEditora;
    private javax.swing.JComboBox cbEstadodeConservacao;
    private javax.swing.JComboBox cbFiltro;
    private javax.swing.JComboBox cbGrupo;
    private javax.swing.JComboBox cbIdioma;
    private javax.swing.JCheckBox chkStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JPanel painel4;
    private javax.swing.JPanel painel5;
    private javax.swing.JPanel painel6;
    private javax.swing.JPanel painel7;
    private javax.swing.JPanel painel8;
    private javax.swing.JTable tblAutores;
    private javax.swing.JTable tblExemplares;
    private javax.swing.JTable tblExemplares2;
    private javax.swing.JTable tblObras;
    private javax.swing.JTextField txtAno;
    private javax.swing.JTextField txtCDC;
    private javax.swing.JTextField txtCDD;
    private javax.swing.JTextField txtCDU;
    public javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtConsulta;
    private javax.swing.JTextField txtCutter;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDataPublicacao;
    private javax.swing.JTextField txtEdicao;
    private javax.swing.JTextField txtExemplar;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtLocal;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtNPag;
    private javax.swing.JTextArea txtResumo;
    private javax.swing.JTextField txtSubtitulo;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtTombo;
    private javax.swing.JTextField txtVolume;
    // End of variables declaration//GEN-END:variables
}
